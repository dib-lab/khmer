/* Generated by Cython 0.29.32 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__khmer___oxli__graphs
#define __PYX_HAVE_API__khmer___oxli__graphs
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <memory>
#include <stdint.h>
#include <map>
#include <unordered_map>
#include "oxli/oxli.hh"
#include <queue>
#include "oxli/kmer_hash.hh"
#include "oxli_exception_convert.hh"
#include "oxli/hashtable.hh"
#include <iostream>
#include <fstream>
#include "oxli/read_parsers.hh"
#include "khmer/_cpy_khmer.hh"
#include "oxli/alphabets.hh"
#include "oxli/subset.hh"
#include "oxli/storage.hh"
#include "oxli/hashgraph.hh"
#include "oxli/labelhash.hh"
#include "oxli/traversal.hh"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "khmer/_oxli/graphs.pxd",
  "khmer/_oxli/graphs.pyx",
  "stringsource",
  "khmer/_oxli/hashing.pxd",
  "khmer/_oxli/parsing.pxd",
  "khmer/_oxli/legacy_partitioning.pxd",
  "khmer/_oxli/hashset.pxd",
  "khmer/_oxli/traversal.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/
struct __pyx_obj_5khmer_5_oxli_7hashing_Kmer;
struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets;
struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence;
struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle;
struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser;
struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser;
struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader;
struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader;
struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo;
struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition;
struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet;
struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser;
struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable;
struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable;
struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable;
struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable;
struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable;
struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable;
struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph;
struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph;
struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph;
struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph;
struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags;
struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags;
struct __pyx_opt_args_5khmer_5_oxli_9traversal_9Traverser__neighbors;

/* "khmer/_oxli/traversal.pxd":31
 *     cdef list _kmerqueue_to_kmer_list(self, KmerQueue * kmers)
 *     cdef list _kmerqueue_to_hash_list(self, KmerQueue * kmers)
 *     cdef list _neighbors(self, CpKmer start, int direction=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_5khmer_5_oxli_9traversal_9Traverser__neighbors {
  int __pyx_n;
  int direction;
};

/* "khmer/_oxli/hashing.pxd":62
 * 
 * 
 * cdef class Kmer:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpKmer] _this
 *     cdef readonly str kmer
 */
struct __pyx_obj_5khmer_5_oxli_7hashing_Kmer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7hashing_Kmer *__pyx_vtab;
  std::shared_ptr<oxli::Kmer>  _this;
  PyObject *kmer;
};


/* "khmer/_oxli/parsing.pxd":109
 * '''
 * 
 * cdef class Alphabets:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets *__pyx_vtab;
};


/* "khmer/_oxli/parsing.pxd":115
 * 
 * 
 * cdef class Sequence:             # <<<<<<<<<<<<<<
 *     cdef CpSequence _obj
 * 
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence *__pyx_vtab;
  oxli::read_parsers::Read _obj;
};


/* "khmer/_oxli/parsing.pxd":122
 * 
 * 
 * cdef class ReadBundle:             # <<<<<<<<<<<<<<
 *     cdef list reads
 * 
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle {
  PyObject_HEAD
  PyObject *reads;
};


/* "khmer/_oxli/parsing.pxd":126
 * 
 * 
 * cdef class FastxParser:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpReadParser[CpFastxReader]] _this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *__pyx_vtab;
  std::shared_ptr<oxli::read_parsers::ReadParser<oxli::read_parsers::FastxReader> >  _this;
};


/* "khmer/_oxli/parsing.pxd":133
 * 
 * 
 * cdef class SanitizedFastxParser(FastxParser):             # <<<<<<<<<<<<<<
 *     cdef readonly int n_bad
 *     cdef readonly string _alphabet
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser {
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser __pyx_base;
  int n_bad;
  std::string _alphabet;
  bool convert_n;
};


/* "khmer/_oxli/parsing.pxd":142
 * 
 * 
 * cdef class SplitPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser left_parser
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_vtab;
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *left_parser;
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *right_parser;
  int min_length;
  bool force_name_match;
};


/* "khmer/_oxli/parsing.pxd":152
 * 
 * 
 * cdef class BrokenPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser parser
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_vtab;
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *parser;
  int min_length;
  bool force_single;
  bool require_paired;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *record;
};


/* "khmer/_oxli/legacy_partitioning.pxd":83
 *         void report_on_partitions()
 * 
 * cdef class PrePartitionInfo:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cp_pre_partition_info] _this
 *     @staticmethod
 */
struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *__pyx_vtab;
  std::shared_ptr<struct oxli::pre_partition_info>  _this;
};


/* "khmer/_oxli/legacy_partitioning.pxd":91
 * 
 * 
 * cdef class SubsetPartition:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpSubsetPartition] _this
 */
struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition {
  PyObject_HEAD
  std::shared_ptr<oxli::SubsetPartition>  _this;
};


/* "khmer/_oxli/hashset.pxd":10
 * 
 * 
 * cdef class HashSet:             # <<<<<<<<<<<<<<
 *     cdef set[HashIntoType] hs
 *     cdef public WordLength ksize
 */
struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7hashset_HashSet *__pyx_vtab;
  std::set<oxli::HashIntoType>  hs;
  oxli::WordLength ksize;
};


/* "khmer/_oxli/traversal.pxd":25
 * 
 * 
 * cdef class Traverser:             # <<<<<<<<<<<<<<
 *     cdef Hashgraph graph
 *     cdef shared_ptr[CpTraverser] _this
 */
struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_9traversal_Traverser *__pyx_vtab;
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *graph;
  std::shared_ptr<oxli::Traverser>  _this;
  std::shared_ptr<oxli::Hashgraph>  _graph_ptr;
};


/* "khmer/_oxli/graphs.pxd":247
 * 
 * 
 * cdef class Hashtable:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpHashtable] _ht_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *__pyx_vtab;
  std::shared_ptr<oxli::Hashtable>  _ht_this;
};


/* "khmer/_oxli/graphs.pxd":259
 * 
 * 
 * cdef class QFCounttable(Hashtable):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpQFCounttable] _qf_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
  std::shared_ptr<oxli::QFCounttable>  _qf_this;
};


/* "khmer/_oxli/graphs.pxd":263
 * 
 * 
 * cdef class SmallCounttable(Hashtable):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpSmallCounttable] _st_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
  std::shared_ptr<oxli::SmallCounttable>  _st_this;
};


/* "khmer/_oxli/graphs.pxd":267
 * 
 * 
 * cdef class Counttable(Hashtable):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpCounttable] _ct_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
  std::shared_ptr<oxli::Counttable>  _ct_this;
};


/* "khmer/_oxli/graphs.pxd":271
 * 
 * 
 * cdef class CyclicCounttable(Hashtable):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpCyclicCounttable] _cct_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
  std::shared_ptr<oxli::CyclicCounttable>  _cct_this;
};


/* "khmer/_oxli/graphs.pxd":275
 * 
 * 
 * cdef class Nodetable(Hashtable):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpNodetable] _nt_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
  std::shared_ptr<oxli::Nodetable>  _nt_this;
};


/* "khmer/_oxli/graphs.pxd":279
 * 
 * 
 * cdef class Hashgraph(Hashtable):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpHashgraph] _hg_this
 *     cdef SubsetPartition partitions
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
  std::shared_ptr<oxli::Hashgraph>  _hg_this;
  struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *partitions;
  std::shared_ptr<oxli::SubsetPartition>  partitions_ptr;
};


/* "khmer/_oxli/graphs.pxd":287
 * 
 * 
 * cdef class Nodegraph(Hashgraph):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpNodegraph] _ng_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph __pyx_base;
  std::shared_ptr<oxli::Nodegraph>  _ng_this;
};


/* "khmer/_oxli/graphs.pxd":291
 * 
 * 
 * cdef class Countgraph(Hashgraph):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpCountgraph] _cg_this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph __pyx_base;
  std::shared_ptr<oxli::Countgraph>  _cg_this;
};


/* "khmer/_oxli/graphs.pxd":295
 * 
 * 
 * cdef class SmallCountgraph(Hashgraph):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpSmallCountgraph] _sg_this
 */
struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph __pyx_base;
  std::shared_ptr<oxli::SmallCountgraph>  _sg_this;
};


/* "khmer/_oxli/graphs.pyx":620
 *         return all_tags
 * 
 *     def tags(self):             # <<<<<<<<<<<<<<
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 */
struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags {
  PyObject_HEAD
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self;
  oxli::HashIntoType __pyx_v_st;
  std::set<oxli::HashIntoType> ::iterator __pyx_t_0;
  std::set<oxli::HashIntoType>  *__pyx_t_1;
};


/* "khmer/_oxli/graphs.pyx":810
 *         return stop_tags
 * 
 *     def iter_stop_tags(self):             # <<<<<<<<<<<<<<
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 */
struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags {
  PyObject_HEAD
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self;
  oxli::HashIntoType __pyx_v_st;
  std::set<oxli::HashIntoType> ::iterator __pyx_t_0;
  std::set<oxli::HashIntoType>  *__pyx_t_1;
};



/* "khmer/_oxli/hashing.pxd":62
 * 
 * 
 * cdef class Kmer:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpKmer] _this
 *     cdef readonly str kmer
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7hashing_Kmer {
  struct __pyx_obj_5khmer_5_oxli_7hashing_Kmer *(*wrap)(oxli::Kmer *, oxli::WordLength);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7hashing_Kmer *__pyx_vtabptr_5khmer_5_oxli_7hashing_Kmer;


/* "khmer/_oxli/parsing.pxd":109
 * '''
 * 
 * cdef class Alphabets:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets {
  std::string (*_get)(std::string);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets *__pyx_vtabptr_5khmer_5_oxli_7parsing_Alphabets;


/* "khmer/_oxli/parsing.pxd":115
 * 
 * 
 * cdef class Sequence:             # <<<<<<<<<<<<<<
 *     cdef CpSequence _obj
 * 
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *(*_wrap)(oxli::read_parsers::Read);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence *__pyx_vtabptr_5khmer_5_oxli_7parsing_Sequence;


/* "khmer/_oxli/parsing.pxd":126
 * 
 * 
 * cdef class FastxParser:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpReadParser[CpFastxReader]] _this
 * 
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser {
  bool (*is_complete)(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *, int __pyx_skip_dispatch);
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *(*_next)(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *__pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser;


/* "khmer/_oxli/parsing.pxd":133
 * 
 * 
 * cdef class SanitizedFastxParser(FastxParser):             # <<<<<<<<<<<<<<
 *     cdef readonly int n_bad
 *     cdef readonly string _alphabet
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser {
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_vtabptr_5khmer_5_oxli_7parsing_SanitizedFastxParser;


/* "khmer/_oxli/parsing.pxd":142
 * 
 * 
 * cdef class SplitPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser left_parser
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader {
  PyObject *(*_next)(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_vtabptr_5khmer_5_oxli_7parsing_SplitPairedReader;


/* "khmer/_oxli/parsing.pxd":152
 * 
 * 
 * cdef class BrokenPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser parser
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader {
  PyObject *(*_next)(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_vtabptr_5khmer_5_oxli_7parsing_BrokenPairedReader;


/* "khmer/_oxli/legacy_partitioning.pxd":83
 *         void report_on_partitions()
 * 
 * cdef class PrePartitionInfo:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cp_pre_partition_info] _this
 *     @staticmethod
 */

struct __pyx_vtabstruct_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo {
  struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *(*wrap)(struct oxli::pre_partition_info *);
  struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *(*create)(oxli::Kmer);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *__pyx_vtabptr_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo;


/* "khmer/_oxli/hashset.pxd":10
 * 
 * 
 * cdef class HashSet:             # <<<<<<<<<<<<<<
 *     cdef set[HashIntoType] hs
 *     cdef public WordLength ksize
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7hashset_HashSet {
  PyObject *(*add)(struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *, oxli::HashIntoType, int __pyx_skip_dispatch);
  PyObject *(*remove)(struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *, oxli::HashIntoType, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7hashset_HashSet *__pyx_vtabptr_5khmer_5_oxli_7hashset_HashSet;


/* "khmer/_oxli/traversal.pxd":25
 * 
 * 
 * cdef class Traverser:             # <<<<<<<<<<<<<<
 *     cdef Hashgraph graph
 *     cdef shared_ptr[CpTraverser] _this
 */

struct __pyx_vtabstruct_5khmer_5_oxli_9traversal_Traverser {
  PyObject *(*_kmerqueue_to_kmer_list)(struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser *, oxli::KmerQueue *);
  PyObject *(*_kmerqueue_to_hash_list)(struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser *, oxli::KmerQueue *);
  PyObject *(*_neighbors)(struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser *, oxli::Kmer, struct __pyx_opt_args_5khmer_5_oxli_9traversal_9Traverser__neighbors *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_9traversal_Traverser *__pyx_vtabptr_5khmer_5_oxli_9traversal_Traverser;


/* "khmer/_oxli/graphs.pyx":31
 * 
 * 
 * cdef class Hashtable:             # <<<<<<<<<<<<<<
 * 
 *     cpdef bytes sanitize_seq_kmer(self, object kmer):
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable {
  PyObject *(*sanitize_kmer)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*sanitize_seq_kmer)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *, int __pyx_skip_dispatch);
  oxli::HashIntoType (*sanitize_hash_kmer)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *);
  PyObject *(*_valid_sequence)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *);
  oxli::Kmer (*_build_kmer)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *);
  oxli::read_parsers::FastxParserPtr (*_get_parser)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *);
  PyObject *(*_get_raw_tables)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, uint8_t **, std::vector<uint64_t> );
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;


/* "khmer/_oxli/graphs.pyx":350
 * 
 * 
 * cdef class QFCounttable(Hashtable):             # <<<<<<<<<<<<<<
 *     """Count kmers using a counting quotient filter.
 * 
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_QFCounttable {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_QFCounttable *__pyx_vtabptr_5khmer_5_oxli_6graphs_QFCounttable;


/* "khmer/_oxli/graphs.pyx":424
 * 
 * 
 * cdef class SmallCounttable(Hashtable):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCounttable {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCounttable;


/* "khmer/_oxli/graphs.pyx":392
 *         return table
 * 
 * cdef class Counttable(Hashtable):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Counttable {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Counttable *__pyx_vtabptr_5khmer_5_oxli_6graphs_Counttable;


/* "khmer/_oxli/graphs.pyx":408
 * 
 * 
 * cdef class CyclicCounttable(Hashtable):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_CyclicCounttable {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_CyclicCounttable *__pyx_vtabptr_5khmer_5_oxli_6graphs_CyclicCounttable;


/* "khmer/_oxli/graphs.pyx":447
 * 
 * 
 * cdef class Nodetable(Hashtable):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Nodetable {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Nodetable *__pyx_vtabptr_5khmer_5_oxli_6graphs_Nodetable;


/* "khmer/_oxli/graphs.pyx":463
 * 
 * 
 * cdef class Hashgraph(Hashtable):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, *args, **kwargs):
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashgraph;


/* "khmer/_oxli/graphs.pyx":883
 * 
 * 
 * cdef class Nodegraph(Hashgraph):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Nodegraph {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Nodegraph *__pyx_vtabptr_5khmer_5_oxli_6graphs_Nodegraph;


/* "khmer/_oxli/graphs.pyx":817
 * 
 * 
 * cdef class Countgraph(Hashgraph):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Countgraph {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Countgraph *__pyx_vtabptr_5khmer_5_oxli_6graphs_Countgraph;


/* "khmer/_oxli/graphs.pyx":858
 * 
 * 
 * cdef class SmallCountgraph(Hashgraph):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCountgraph {
  struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCountgraph;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE oxli::HashIntoType __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE oxli::PartitionID __Pyx_PyInt_As_oxli_3a__3a_PartitionID(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE oxli::BoundedCounterType __Pyx_PyInt_As_oxli_3a__3a_BoundedCounterType(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_HashIntoType(oxli::HashIntoType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType(oxli::BoundedCounterType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_WordLength(oxli::WordLength value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_PartitionID(oxli::PartitionID value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer, int __pyx_skip_dispatch); /* proto*/
static oxli::HashIntoType __pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_hash_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto*/
static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__valid_sequence(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto*/
static oxli::Kmer __pyx_f_5khmer_5_oxli_6graphs_9Hashtable__build_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto*/
static oxli::read_parsers::FastxParserPtr __pyx_f_5khmer_5_oxli_6graphs_9Hashtable__get_parser(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename); /* proto*/
static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__get_raw_tables(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, uint8_t **__pyx_v_table_ptrs, std::vector<uint64_t>  __pyx_v_sizes); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'khmer._oxli.oxli_types' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'khmer._oxli.hashing' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7hashing_Kmer = 0;

/* Module declarations from 'khmer._oxli.utils' */
static PyObject *(*__pyx_f_5khmer_5_oxli_5utils__bstring)(PyObject *); /*proto*/
static bool (*__pyx_f_5khmer_5_oxli_5utils_is_str)(PyObject *, int __pyx_skip_dispatch); /*proto*/
static bool (*__pyx_f_5khmer_5_oxli_5utils_is_num)(PyObject *, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'khmer._oxli.parsing' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_Sequence = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_ReadBundle = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_FastxParser = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_SanitizedFastxParser = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_SplitPairedReader = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_BrokenPairedReader = 0;

/* Module declarations from 'khmer._oxli.legacy_partitioning' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'khmer._oxli.hashset' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7hashset_HashSet = 0;

/* Module declarations from 'khmer._oxli.traversal' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_9traversal_Traverser = 0;

/* Module declarations from 'khmer._oxli.graphs' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_SmallCounttable = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_Counttable = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_CyclicCounttable = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_Nodetable = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_Hashgraph = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_Countgraph = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs_SmallCountgraph = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs___pyx_scope_struct__tags = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags = 0;
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_uint64_t(const std::vector<uint64_t>  &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType(const std::vector<oxli::BoundedCounterType>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType(const std::vector<oxli::HashIntoType>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_uint32_t(const std::vector<uint32_t>  &); /*proto*/
static std::vector<uint64_t>  __pyx_convert_vector_from_py_uint64_t(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "khmer._oxli.graphs"
extern int __pyx_module_is_main_khmer___oxli__graphs;
int __pyx_module_is_main_khmer___oxli__graphs = 0;

/* Implementation of 'khmer._oxli.graphs' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_k[] = "k";
static const char __pyx_k_p1[] = "p1";
static const char __pyx_k_p2[] = "p2";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_pid[] = "pid";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_band[] = "band";
static const char __pyx_k_hash[] = "hash";
static const char __pyx_k_hdns[] = "hdns";
static const char __pyx_k_kmer[] = "kmer";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_subs[] = "subs";
static const char __pyx_k_tags[] = "tags";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_ksize[] = "ksize";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_counts[] = "counts";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kmer_u[] = "kmer_u";
static const char __pyx_k_median[] = "median";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_primes[] = "primes";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_end_kmer[] = "end_kmer";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_max_size[] = "max_size";
static const char __pyx_k_n_tables[] = "n_tables";
static const char __pyx_k_sequence[] = "sequence";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_tracking[] = "tracking";
static const char __pyx_k_Hashgraph[] = "Hashgraph";
static const char __pyx_k_Hashtable[] = "Hashtable";
static const char __pyx_k_Nodegraph[] = "Nodegraph";
static const char __pyx_k_Nodetable[] = "Nodetable";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_abundance[] = "abundance";
static const char __pyx_k_frequency[] = "frequency";
static const char __pyx_k_max_count[] = "max_count";
static const char __pyx_k_min_count[] = "min_count";
static const char __pyx_k_num_bands[] = "num_bands";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_Countgraph[] = "Countgraph";
static const char __pyx_k_Counttable[] = "Counttable";
static const char __pyx_k_ReadParser[] = "ReadParser";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_clear_tags[] = "clear_tags";
static const char __pyx_k_min_length[] = "min_length";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_start_kmer[] = "start_kmer";
static const char __pyx_k_stop_filter[] = "stop_filter";
static const char __pyx_k_subset_size[] = "subset_size";
static const char __pyx_k_QFCounttable[] = "QFCounttable";
static const char __pyx_k_khmer__khmer[] = "khmer._khmer";
static const char __pyx_k_min_unique_f[] = "min_unique_f";
static const char __pyx_k_CYTHON_TABLES[] = "CYTHON_TABLES";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_sanitize_kmer[] = "sanitize_kmer";
static const char __pyx_k_starting_size[] = "starting_size";
static const char __pyx_k_Hashgraph_tags[] = "Hashgraph.tags";
static const char __pyx_k_consume_masked[] = "consume_masked";
static const char __pyx_k_iter_stop_tags[] = "iter_stop_tags";
static const char __pyx_k_SmallCountgraph[] = "SmallCountgraph";
static const char __pyx_k_SmallCounttable[] = "SmallCounttable";
static const char __pyx_k_kmer_type_error[] = "_kmer_type_error";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_CyclicCounttable[] = "CyclicCounttable";
static const char __pyx_k_count_partitions[] = "count_partitions";
static const char __pyx_k_break_on_stoptags[] = "break_on_stoptags";
static const char __pyx_k_khmer__oxli_utils[] = "khmer._oxli.utils";
static const char __pyx_k_output_unassigned[] = "output_unassigned";
static const char __pyx_k_sanitize_seq_kmer[] = "sanitize_seq_kmer";
static const char __pyx_k_break_on_stop_tags[] = "break_on_stop_tags";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_khmer__oxli_graphs[] = "khmer._oxli.graphs";
static const char __pyx_k_parser_or_filename[] = "parser_or_filename";
static const char __pyx_k_get_n_primes_near_x[] = "get_n_primes_near_x";
static const char __pyx_k_stop_big_traversals[] = "stop_big_traversals";
static const char __pyx_k_break_on_circumference[] = "break_on_circumference";
static const char __pyx_k_Hashgraph_iter_stop_tags[] = "Hashgraph.iter_stop_tags";
static const char __pyx_k_Expected_k_mer_length_but_got[] = "Expected k-mer length {} but got {}.";
static const char __pyx_k_Object_of_type_0_can_not_be_inte[] = "Object of type {0} can not be interpretted as  a k-mer";
static const char __pyx_k_argument_does_not_appear_to_be_a[] = "argument does not appear to be a parser or a filename: {}";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__ht_this_cannot_be_converte[] = "self._ht_this cannot be converted to a Python object for pickling";
static const char __pyx_k_sequence_length_must_the_hashtab[] = "sequence length ({}) must >= the hashtable k-mer size ({})";
static const char __pyx_k_size_has_to_be_a_power_of_two_no[] = "size has to be a power of two, not {}.";
static PyObject *__pyx_n_s_CYTHON_TABLES;
static PyObject *__pyx_n_s_Countgraph;
static PyObject *__pyx_n_s_Counttable;
static PyObject *__pyx_n_s_CyclicCounttable;
static PyObject *__pyx_kp_s_Expected_k_mer_length_but_got;
static PyObject *__pyx_n_s_Hashgraph;
static PyObject *__pyx_n_s_Hashgraph_iter_stop_tags;
static PyObject *__pyx_n_s_Hashgraph_tags;
static PyObject *__pyx_n_s_Hashtable;
static PyObject *__pyx_n_s_Nodegraph;
static PyObject *__pyx_n_s_Nodetable;
static PyObject *__pyx_kp_s_Object_of_type_0_can_not_be_inte;
static PyObject *__pyx_n_s_QFCounttable;
static PyObject *__pyx_n_s_ReadParser;
static PyObject *__pyx_n_s_SmallCountgraph;
static PyObject *__pyx_n_s_SmallCounttable;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_abundance;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_s_argument_does_not_appear_to_be_a;
static PyObject *__pyx_n_s_band;
static PyObject *__pyx_n_s_break_on_circumference;
static PyObject *__pyx_n_s_break_on_stop_tags;
static PyObject *__pyx_n_s_break_on_stoptags;
static PyObject *__pyx_n_s_clear_tags;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_consume_masked;
static PyObject *__pyx_n_s_count_partitions;
static PyObject *__pyx_n_s_counts;
static PyObject *__pyx_n_s_distance;
static PyObject *__pyx_n_s_end_kmer;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_frequency;
static PyObject *__pyx_n_s_get_n_primes_near_x;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_hash;
static PyObject *__pyx_n_s_hdns;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_iter_stop_tags;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_khmer__khmer;
static PyObject *__pyx_n_s_khmer__oxli_graphs;
static PyObject *__pyx_n_s_khmer__oxli_utils;
static PyObject *__pyx_n_s_kmer;
static PyObject *__pyx_n_s_kmer_type_error;
static PyObject *__pyx_n_s_kmer_u;
static PyObject *__pyx_n_s_ksize;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_max_count;
static PyObject *__pyx_n_s_max_size;
static PyObject *__pyx_n_s_median;
static PyObject *__pyx_n_s_min_count;
static PyObject *__pyx_n_s_min_length;
static PyObject *__pyx_n_s_min_unique_f;
static PyObject *__pyx_n_s_n_tables;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num_bands;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_output_unassigned;
static PyObject *__pyx_n_s_p1;
static PyObject *__pyx_n_s_p2;
static PyObject *__pyx_n_s_parser_or_filename;
static PyObject *__pyx_n_s_partition;
static PyObject *__pyx_n_s_pid;
static PyObject *__pyx_n_s_primes;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_sanitize_kmer;
static PyObject *__pyx_n_s_sanitize_seq_kmer;
static PyObject *__pyx_kp_s_self__ht_this_cannot_be_converte;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sequence;
static PyObject *__pyx_kp_s_sequence_length_must_the_hashtab;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_kp_s_size_has_to_be_a_power_of_two_no;
static PyObject *__pyx_n_s_start_kmer;
static PyObject *__pyx_n_s_starting_size;
static PyObject *__pyx_n_s_stop_big_traversals;
static PyObject *__pyx_n_s_stop_filter;
static PyObject *__pyx_n_s_subs;
static PyObject *__pyx_n_s_subset_size;
static PyObject *__pyx_n_s_tags;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tracking;
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_2sanitize_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_4_kmer_type_error(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_6count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_8add(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_10hash(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_12reverse_hash(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, oxli::HashIntoType __pyx_v_kmer_hash); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_14get(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_16ksize(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_18hashsizes(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_20get_kmers(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_22consume(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_24get_kmer_counts(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_26get_min_count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_28get_max_count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_30get_median_count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_32median_at_least(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_median); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_34get_kmer_hashes(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_36trim_on_abundance(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_abundance); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_38trim_below_abundance(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_abundance); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_40find_spectral_error_positions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_max_count); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_42consume_seqfile(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_44consume_seqfile_with_mask(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_mask, int __pyx_v_threshold, bool __pyx_v_consume_masked); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_46consume_seqfile_banding(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, int __pyx_v_num_bands, int __pyx_v_band); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_48consume_seqfile_banding_with_mask(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, int __pyx_v_num_bands, int __pyx_v_band, struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_mask, int __pyx_v_threshold, bool __pyx_v_consume_masked); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_50abundance_distribution(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_tracking); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_52save(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_file_name); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_54load(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_file_name); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_56n_unique_kmers(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_58n_occupied(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_60n_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_62set_use_bigcount(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_bigcount); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_64get_use_bigcount(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_66get_kmer_hashes_as_hashset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_68get_raw_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_70__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_72__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_2load(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_file_name); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_10Counttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Counttable_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Counttable_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_2get_raw_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_9Nodetable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodetable_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodetable_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_9partition___get__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_2neighbors(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_4calc_connected_graph_size(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, PyObject *__pyx_v_max_size, PyObject *__pyx_v_break_on_circumference); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_6kmer_degree(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_8count_kmers_within_radius(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, int __pyx_v_radius, int __pyx_v_max_count); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_10find_high_degree_nodes(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_12traverse_linear_path(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_hdns, struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_stop_filter); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_14extract_unique_paths(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence, unsigned int __pyx_v_min_length, float __pyx_v_min_unique_f); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_16consume_and_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_18get_tags_and_positions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_20get_tags_for_sequence(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_22find_all_tags_list(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_24consume_seqfile_and_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_parser_or_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_26print_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_28add_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_30get_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_32tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_35load_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_clear_tags); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_37save_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_6n_tags___get__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_39divide_tags_into_subsets(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, int __pyx_v_subset_size); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density___get__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_2__set__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, int __pyx_v_density); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_41do_subset_partition(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_start_kmer, PyObject *__pyx_v_end_kmer, bool __pyx_v_break_on_stoptags, bool __pyx_v_stop_big_traversals); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_43find_all_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_45assign_partition_id(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *__pyx_v_ppi); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_47output_partitions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_output, bool __pyx_v_output_unassigned); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_49load_partitionmap(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_51save_partitionmap(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_53_validate_partitionmap(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_55consume_partitioned_fasta(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_57merge_subset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *__pyx_v_subset); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_59merge_subset_from_disk(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_61count_partitions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_63set_partition_id(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, oxli::PartitionID __pyx_v_pid); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_65join_partitions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, oxli::PartitionID __pyx_v_p1, oxli::PartitionID __pyx_v_p2); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_67get_partition_id(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_69repartition_largest_partition(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_counts, unsigned int __pyx_v_distance, unsigned int __pyx_v_threshold, unsigned int __pyx_v_frequency, struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *__pyx_v_subs); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_71load_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_clear_tags); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_73save_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_75print_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_77trim_on_stoptags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_79add_stop_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_81get_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_83iter_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_86__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_88__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_10Countgraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_2do_subset_partition_with_abundance(struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self, oxli::BoundedCounterType __pyx_v_min_count, oxli::BoundedCounterType __pyx_v_max_count, PyObject *__pyx_v_start_kmer, PyObject *__pyx_v_end_kmer, bool __pyx_v_break_on_stop_tags, bool __pyx_v_stop_big_traversals); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_2get_raw_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_2update(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_QFCounttable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_SmallCounttable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Counttable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_CyclicCounttable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Nodetable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Hashgraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Nodegraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Countgraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_SmallCountgraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct__tags(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
/* Late includes */

/* "khmer/_oxli/graphs.pyx":33
 * cdef class Hashtable:
 * 
 *     cpdef bytes sanitize_seq_kmer(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Length sanitize a string k-mer and return as bytes.'''
 *         if len(kmer) != self.ksize():
 */

static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_1sanitize_seq_kmer(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sanitize_seq_kmer", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sanitize_seq_kmer); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_1sanitize_seq_kmer)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_kmer) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_kmer);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 33, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "khmer/_oxli/graphs.pyx":35
 *     cpdef bytes sanitize_seq_kmer(self, object kmer):
 *         '''Length sanitize a string k-mer and return as bytes.'''
 *         if len(kmer) != self.ksize():             # <<<<<<<<<<<<<<
 *             raise ValueError("Expected k-mer length {}"
 *                              " but got {}.".format(self.ksize(), len(kmer)))
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_kmer); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 35, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "khmer/_oxli/graphs.pyx":37
 *         if len(kmer) != self.ksize():
 *             raise ValueError("Expected k-mer length {}"
 *                              " but got {}.".format(self.ksize(), len(kmer)))             # <<<<<<<<<<<<<<
 *         return _bstring(kmer)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Expected_k_mer_length_but_got, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_v_kmer); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 37, __pyx_L1_error)
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "khmer/_oxli/graphs.pyx":36
 *         '''Length sanitize a string k-mer and return as bytes.'''
 *         if len(kmer) != self.ksize():
 *             raise ValueError("Expected k-mer length {}"             # <<<<<<<<<<<<<<
 *                              " but got {}.".format(self.ksize(), len(kmer)))
 *         return _bstring(kmer)
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 36, __pyx_L1_error)

    /* "khmer/_oxli/graphs.pyx":35
 *     cpdef bytes sanitize_seq_kmer(self, object kmer):
 *         '''Length sanitize a string k-mer and return as bytes.'''
 *         if len(kmer) != self.ksize():             # <<<<<<<<<<<<<<
 *             raise ValueError("Expected k-mer length {}"
 *                              " but got {}.".format(self.ksize(), len(kmer)))
 */
  }

  /* "khmer/_oxli/graphs.pyx":38
 *             raise ValueError("Expected k-mer length {}"
 *                              " but got {}.".format(self.ksize(), len(kmer)))
 *         return _bstring(kmer)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bytes sanitize_kmer(self, object kmer):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_kmer); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":33
 * cdef class Hashtable:
 * 
 *     cpdef bytes sanitize_seq_kmer(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Length sanitize a string k-mer and return as bytes.'''
 *         if len(kmer) != self.ksize():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.sanitize_seq_kmer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_1sanitize_seq_kmer(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer[] = "Length sanitize a string k-mer and return as bytes.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_1sanitize_seq_kmer(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sanitize_seq_kmer (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sanitize_seq_kmer", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer(__pyx_v_self, __pyx_v_kmer, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.sanitize_seq_kmer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":40
 *         return _bstring(kmer)
 * 
 *     cpdef bytes sanitize_kmer(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Type and length sanitize a k-mer and return as bytes, reverse
 *         hashing if necessary.'''
 */

static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_3sanitize_kmer(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_handled = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  oxli::HashIntoType __pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sanitize_kmer", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sanitize_kmer); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_3sanitize_kmer)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_kmer) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_kmer);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 40, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 40, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "khmer/_oxli/graphs.pyx":44
 *         hashing if necessary.'''
 *         cdef bytes handled
 *         if is_num(kmer):             # <<<<<<<<<<<<<<
 *             handled = deref(self._ht_this).unhash_dna(<HashIntoType>kmer)
 *         elif isinstance(kmer, Kmer):
 */
  __pyx_t_5 = (__pyx_f_5khmer_5_oxli_5utils_is_num(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_5) {

    /* "khmer/_oxli/graphs.pyx":45
 *         cdef bytes handled
 *         if is_num(kmer):
 *             handled = deref(self._ht_this).unhash_dna(<HashIntoType>kmer)             # <<<<<<<<<<<<<<
 *         elif isinstance(kmer, Kmer):
 *             handled = _bstring(kmer.kmer)
 */
    __pyx_t_6 = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(__pyx_v_kmer); if (unlikely((__pyx_t_6 == ((oxli::HashIntoType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 45, __pyx_L1_error)
    try {
      __pyx_t_7 = (*__pyx_v_self->_ht_this).unhash_dna(((oxli::HashIntoType)__pyx_t_6));
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 45, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_handled = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "khmer/_oxli/graphs.pyx":44
 *         hashing if necessary.'''
 *         cdef bytes handled
 *         if is_num(kmer):             # <<<<<<<<<<<<<<
 *             handled = deref(self._ht_this).unhash_dna(<HashIntoType>kmer)
 *         elif isinstance(kmer, Kmer):
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":46
 *         if is_num(kmer):
 *             handled = deref(self._ht_this).unhash_dna(<HashIntoType>kmer)
 *         elif isinstance(kmer, Kmer):             # <<<<<<<<<<<<<<
 *             handled = _bstring(kmer.kmer)
 *         elif is_str(kmer):
 */
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_v_kmer, __pyx_ptype_5khmer_5_oxli_7hashing_Kmer); 
  __pyx_t_8 = (__pyx_t_5 != 0);
  if (__pyx_t_8) {

    /* "khmer/_oxli/graphs.pyx":47
 *             handled = deref(self._ht_this).unhash_dna(<HashIntoType>kmer)
 *         elif isinstance(kmer, Kmer):
 *             handled = _bstring(kmer.kmer)             # <<<<<<<<<<<<<<
 *         elif is_str(kmer):
 *             handled = self.sanitize_seq_kmer(kmer)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_kmer, __pyx_n_s_kmer); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_handled = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/graphs.pyx":46
 *         if is_num(kmer):
 *             handled = deref(self._ht_this).unhash_dna(<HashIntoType>kmer)
 *         elif isinstance(kmer, Kmer):             # <<<<<<<<<<<<<<
 *             handled = _bstring(kmer.kmer)
 *         elif is_str(kmer):
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":48
 *         elif isinstance(kmer, Kmer):
 *             handled = _bstring(kmer.kmer)
 *         elif is_str(kmer):             # <<<<<<<<<<<<<<
 *             handled = self.sanitize_seq_kmer(kmer)
 *         else:
 */
  __pyx_t_8 = (__pyx_f_5khmer_5_oxli_5utils_is_str(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_8) {

    /* "khmer/_oxli/graphs.pyx":49
 *             handled = _bstring(kmer.kmer)
 *         elif is_str(kmer):
 *             handled = self.sanitize_seq_kmer(kmer)             # <<<<<<<<<<<<<<
 *         else:
 *             self._kmer_type_error(kmer)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->sanitize_seq_kmer(__pyx_v_self, __pyx_v_kmer, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_handled = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/graphs.pyx":48
 *         elif isinstance(kmer, Kmer):
 *             handled = _bstring(kmer.kmer)
 *         elif is_str(kmer):             # <<<<<<<<<<<<<<
 *             handled = self.sanitize_seq_kmer(kmer)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":51
 *             handled = self.sanitize_seq_kmer(kmer)
 *         else:
 *             self._kmer_type_error(kmer)             # <<<<<<<<<<<<<<
 *         return handled
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kmer_type_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_kmer) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_kmer);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "khmer/_oxli/graphs.pyx":52
 *         else:
 *             self._kmer_type_error(kmer)
 *         return handled             # <<<<<<<<<<<<<<
 * 
 *     cdef HashIntoType sanitize_hash_kmer(self, object kmer) except -1:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_handled)) { __Pyx_RaiseUnboundLocalError("handled"); __PYX_ERR(1, 52, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_v_handled);
  __pyx_r = __pyx_v_handled;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":40
 *         return _bstring(kmer)
 * 
 *     cpdef bytes sanitize_kmer(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Type and length sanitize a k-mer and return as bytes, reverse
 *         hashing if necessary.'''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.sanitize_kmer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handled);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_3sanitize_kmer(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_2sanitize_kmer[] = "Type and length sanitize a k-mer and return as bytes, reverse\n        hashing if necessary.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_3sanitize_kmer(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sanitize_kmer (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_2sanitize_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_2sanitize_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sanitize_kmer", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_kmer(__pyx_v_self, __pyx_v_kmer, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.sanitize_kmer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":54
 *         return handled
 * 
 *     cdef HashIntoType sanitize_hash_kmer(self, object kmer) except -1:             # <<<<<<<<<<<<<<
 *         '''Sanitize a hashed k-mer, or hash if not already.'''
 *         cdef HashIntoType handled
 */

static oxli::HashIntoType __pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_hash_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  oxli::HashIntoType __pyx_v_handled;
  oxli::HashIntoType __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  oxli::HashIntoType __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sanitize_hash_kmer", 0);

  /* "khmer/_oxli/graphs.pyx":57
 *         '''Sanitize a hashed k-mer, or hash if not already.'''
 *         cdef HashIntoType handled
 *         if is_num(kmer):             # <<<<<<<<<<<<<<
 *             handled = <HashIntoType>kmer
 *         elif isinstance(kmer, Kmer):
 */
  __pyx_t_1 = (__pyx_f_5khmer_5_oxli_5utils_is_num(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":58
 *         cdef HashIntoType handled
 *         if is_num(kmer):
 *             handled = <HashIntoType>kmer             # <<<<<<<<<<<<<<
 *         elif isinstance(kmer, Kmer):
 *             handled = kmer.kmer_u
 */
    __pyx_t_2 = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(__pyx_v_kmer); if (unlikely((__pyx_t_2 == ((oxli::HashIntoType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
    __pyx_v_handled = ((oxli::HashIntoType)__pyx_t_2);

    /* "khmer/_oxli/graphs.pyx":57
 *         '''Sanitize a hashed k-mer, or hash if not already.'''
 *         cdef HashIntoType handled
 *         if is_num(kmer):             # <<<<<<<<<<<<<<
 *             handled = <HashIntoType>kmer
 *         elif isinstance(kmer, Kmer):
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":59
 *         if is_num(kmer):
 *             handled = <HashIntoType>kmer
 *         elif isinstance(kmer, Kmer):             # <<<<<<<<<<<<<<
 *             handled = kmer.kmer_u
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_kmer, __pyx_ptype_5khmer_5_oxli_7hashing_Kmer); 
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "khmer/_oxli/graphs.pyx":60
 *             handled = <HashIntoType>kmer
 *         elif isinstance(kmer, Kmer):
 *             handled = kmer.kmer_u             # <<<<<<<<<<<<<<
 *         else:
 *             handled = self.hash(kmer)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_kmer, __pyx_n_s_kmer_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(__pyx_t_4); if (unlikely((__pyx_t_2 == ((oxli::HashIntoType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_handled = __pyx_t_2;

    /* "khmer/_oxli/graphs.pyx":59
 *         if is_num(kmer):
 *             handled = <HashIntoType>kmer
 *         elif isinstance(kmer, Kmer):             # <<<<<<<<<<<<<<
 *             handled = kmer.kmer_u
 *         else:
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":62
 *             handled = kmer.kmer_u
 *         else:
 *             handled = self.hash(kmer)             # <<<<<<<<<<<<<<
 *         return handled
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hash); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_kmer) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_kmer);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(__pyx_t_4); if (unlikely((__pyx_t_2 == ((oxli::HashIntoType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_handled = __pyx_t_2;
  }
  __pyx_L3:;

  /* "khmer/_oxli/graphs.pyx":63
 *         else:
 *             handled = self.hash(kmer)
 *         return handled             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes _valid_sequence(self, str sequence):
 */
  __pyx_r = __pyx_v_handled;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":54
 *         return handled
 * 
 *     cdef HashIntoType sanitize_hash_kmer(self, object kmer) except -1:             # <<<<<<<<<<<<<<
 *         '''Sanitize a hashed k-mer, or hash if not already.'''
 *         cdef HashIntoType handled
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.sanitize_hash_kmer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1LL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":65
 *         return handled
 * 
 *     cdef bytes _valid_sequence(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Validate sequence argument and convert it to bytes"""
 *         if len(sequence) < self.ksize():
 */

static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__valid_sequence(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_valid_sequence", 0);

  /* "khmer/_oxli/graphs.pyx":67
 *     cdef bytes _valid_sequence(self, str sequence):
 *         """Validate sequence argument and convert it to bytes"""
 *         if len(sequence) < self.ksize():             # <<<<<<<<<<<<<<
 *             raise ValueError("sequence length ({}) must >= the hashtable "
 *                              "k-mer size ({})".format(len(sequence),
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_sequence); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 67, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_6)) {

    /* "khmer/_oxli/graphs.pyx":69
 *         if len(sequence) < self.ksize():
 *             raise ValueError("sequence length ({}) must >= the hashtable "
 *                              "k-mer size ({})".format(len(sequence),             # <<<<<<<<<<<<<<
 *                                                       self.ksize()))
 *         return _bstring(sequence)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_sequence_length_must_the_hashtab, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_Length(__pyx_v_sequence); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 69, __pyx_L1_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "khmer/_oxli/graphs.pyx":70
 *             raise ValueError("sequence length ({}) must >= the hashtable "
 *                              "k-mer size ({})".format(len(sequence),
 *                                                       self.ksize()))             # <<<<<<<<<<<<<<
 *         return _bstring(sequence)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_t_5);
      __pyx_t_2 = 0;
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":68
 *         """Validate sequence argument and convert it to bytes"""
 *         if len(sequence) < self.ksize():
 *             raise ValueError("sequence length ({}) must >= the hashtable "             # <<<<<<<<<<<<<<
 *                              "k-mer size ({})".format(len(sequence),
 *                                                       self.ksize()))
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 68, __pyx_L1_error)

    /* "khmer/_oxli/graphs.pyx":67
 *     cdef bytes _valid_sequence(self, str sequence):
 *         """Validate sequence argument and convert it to bytes"""
 *         if len(sequence) < self.ksize():             # <<<<<<<<<<<<<<
 *             raise ValueError("sequence length ({}) must >= the hashtable "
 *                              "k-mer size ({})".format(len(sequence),
 */
  }

  /* "khmer/_oxli/graphs.pyx":71
 *                              "k-mer size ({})".format(len(sequence),
 *                                                       self.ksize()))
 *         return _bstring(sequence)             # <<<<<<<<<<<<<<
 * 
 *     cdef CpKmer _build_kmer(self, object kmer) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_sequence); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":65
 *         return handled
 * 
 *     cdef bytes _valid_sequence(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Validate sequence argument and convert it to bytes"""
 *         if len(sequence) < self.ksize():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable._valid_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":73
 *         return _bstring(sequence)
 * 
 *     cdef CpKmer _build_kmer(self, object kmer) except *:             # <<<<<<<<<<<<<<
 *         '''Build a liboxli Kmer (CpKmer) from a hash or string.'''
 *         if type(kmer) is Kmer:
 */

static oxli::Kmer __pyx_f_5khmer_5_oxli_6graphs_9Hashtable__build_kmer(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_v_temp = 0;
  oxli::Kmer __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_kmer", 0);

  /* "khmer/_oxli/graphs.pyx":75
 *     cdef CpKmer _build_kmer(self, object kmer) except *:
 *         '''Build a liboxli Kmer (CpKmer) from a hash or string.'''
 *         if type(kmer) is Kmer:             # <<<<<<<<<<<<<<
 *             return deref((<Kmer>kmer)._this.get())
 * 
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_kmer)) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashing_Kmer));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":76
 *         '''Build a liboxli Kmer (CpKmer) from a hash or string.'''
 *         if type(kmer) is Kmer:
 *             return deref((<Kmer>kmer)._this.get())             # <<<<<<<<<<<<<<
 * 
 *         cdef bytes temp = self.sanitize_kmer(kmer)
 */
    __pyx_r = (*((struct __pyx_obj_5khmer_5_oxli_7hashing_Kmer *)__pyx_v_kmer)->_this.get());
    goto __pyx_L0;

    /* "khmer/_oxli/graphs.pyx":75
 *     cdef CpKmer _build_kmer(self, object kmer) except *:
 *         '''Build a liboxli Kmer (CpKmer) from a hash or string.'''
 *         if type(kmer) is Kmer:             # <<<<<<<<<<<<<<
 *             return deref((<Kmer>kmer)._this.get())
 * 
 */
  }

  /* "khmer/_oxli/graphs.pyx":78
 *             return deref((<Kmer>kmer)._this.get())
 * 
 *         cdef bytes temp = self.sanitize_kmer(kmer)             # <<<<<<<<<<<<<<
 *         return deref(self._ht_this).build_kmer(temp)
 * 
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->sanitize_kmer(__pyx_v_self, __pyx_v_kmer, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_temp = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/graphs.pyx":79
 * 
 *         cdef bytes temp = self.sanitize_kmer(kmer)
 *         return deref(self._ht_this).build_kmer(temp)             # <<<<<<<<<<<<<<
 * 
 *     def _kmer_type_error(self, object kmer):
 */
  if (unlikely(__pyx_v_temp == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 79, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v_temp); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 79, __pyx_L1_error)
  __pyx_r = (*__pyx_v_self->_ht_this).build_kmer(__pyx_t_4);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":73
 *         return _bstring(sequence)
 * 
 *     cdef CpKmer _build_kmer(self, object kmer) except *:             # <<<<<<<<<<<<<<
 *         '''Build a liboxli Kmer (CpKmer) from a hash or string.'''
 *         if type(kmer) is Kmer:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable._build_kmer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_temp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":81
 *         return deref(self._ht_this).build_kmer(temp)
 * 
 *     def _kmer_type_error(self, object kmer):             # <<<<<<<<<<<<<<
 *         raise TypeError("Object of type {0} can not be interpretted as "
 *                         " a k-mer".format(type(kmer)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_5_kmer_type_error(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_5_kmer_type_error(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_kmer_type_error (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_4_kmer_type_error(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_4_kmer_type_error(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_kmer_type_error", 0);

  /* "khmer/_oxli/graphs.pyx":83
 *     def _kmer_type_error(self, object kmer):
 *         raise TypeError("Object of type {0} can not be interpretted as "
 *                         " a k-mer".format(type(kmer)))             # <<<<<<<<<<<<<<
 * 
 *     def count(self, object kmer):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Object_of_type_0_can_not_be_inte, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)Py_TYPE(__pyx_v_kmer))) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_kmer)));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":82
 * 
 *     def _kmer_type_error(self, object kmer):
 *         raise TypeError("Object of type {0} can not be interpretted as "             # <<<<<<<<<<<<<<
 *                         " a k-mer".format(type(kmer)))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(1, 82, __pyx_L1_error)

  /* "khmer/_oxli/graphs.pyx":81
 *         return deref(self._ht_this).build_kmer(temp)
 * 
 *     def _kmer_type_error(self, object kmer):             # <<<<<<<<<<<<<<
 *         raise TypeError("Object of type {0} can not be interpretted as "
 *                         " a k-mer".format(type(kmer)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable._kmer_type_error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":85
 *                         " a k-mer".format(type(kmer)))
 * 
 *     def count(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Increment the count of this k-mer.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_7count(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_6count[] = "Increment the count of this k-mer.\n\n        Synonym for 'add'.\n        ";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_7count(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_6count(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_6count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);

  /* "khmer/_oxli/graphs.pyx":90
 *         Synonym for 'add'.
 *         """
 *         self.add(kmer)             # <<<<<<<<<<<<<<
 * 
 *     def add(self, object kmer):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_kmer) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_kmer);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":85
 *                         " a k-mer".format(type(kmer)))
 * 
 *     def count(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Increment the count of this k-mer.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":92
 *         self.add(kmer)
 * 
 *     def add(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Increment the count of this k-mer
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_9add(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_8add[] = "Increment the count of this k-mer\n\n        `kmer` can be either a string or an integer representing the hashed\n        value of the kmer.\n        ";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_9add(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_8add(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_8add(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  oxli::HashIntoType __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "khmer/_oxli/graphs.pyx":98
 *         value of the kmer.
 *         """
 *         if is_str(kmer):             # <<<<<<<<<<<<<<
 *             return deref(self._ht_this).add(self.sanitize_seq_kmer(kmer))
 *         elif is_num(kmer):
 */
  __pyx_t_1 = (__pyx_f_5khmer_5_oxli_5utils_is_str(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":99
 *         """
 *         if is_str(kmer):
 *             return deref(self._ht_this).add(self.sanitize_seq_kmer(kmer))             # <<<<<<<<<<<<<<
 *         elif is_num(kmer):
 *             return deref(self._ht_this).add(<HashIntoType>kmer)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->sanitize_seq_kmer(__pyx_v_self, __pyx_v_kmer, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(1, 99, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(1, 99, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_ht_this).add(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/graphs.pyx":98
 *         value of the kmer.
 *         """
 *         if is_str(kmer):             # <<<<<<<<<<<<<<
 *             return deref(self._ht_this).add(self.sanitize_seq_kmer(kmer))
 *         elif is_num(kmer):
 */
  }

  /* "khmer/_oxli/graphs.pyx":100
 *         if is_str(kmer):
 *             return deref(self._ht_this).add(self.sanitize_seq_kmer(kmer))
 *         elif is_num(kmer):             # <<<<<<<<<<<<<<
 *             return deref(self._ht_this).add(<HashIntoType>kmer)
 *         else:
 */
  __pyx_t_1 = (__pyx_f_5khmer_5_oxli_5utils_is_num(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":101
 *             return deref(self._ht_this).add(self.sanitize_seq_kmer(kmer))
 *         elif is_num(kmer):
 *             return deref(self._ht_this).add(<HashIntoType>kmer)             # <<<<<<<<<<<<<<
 *         else:
 *             self._kmer_type_error(kmer)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(__pyx_v_kmer); if (unlikely((__pyx_t_5 == ((oxli::HashIntoType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 101, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_ht_this).add(((oxli::HashIntoType)__pyx_t_5))); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/graphs.pyx":100
 *         if is_str(kmer):
 *             return deref(self._ht_this).add(self.sanitize_seq_kmer(kmer))
 *         elif is_num(kmer):             # <<<<<<<<<<<<<<
 *             return deref(self._ht_this).add(<HashIntoType>kmer)
 *         else:
 */
  }

  /* "khmer/_oxli/graphs.pyx":103
 *             return deref(self._ht_this).add(<HashIntoType>kmer)
 *         else:
 *             self._kmer_type_error(kmer)             # <<<<<<<<<<<<<<
 * 
 *     def hash(self, object kmer):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kmer_type_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_kmer) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_kmer);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "khmer/_oxli/graphs.pyx":92
 *         self.add(kmer)
 * 
 *     def add(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Increment the count of this k-mer
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":105
 *             self._kmer_type_error(kmer)
 * 
 *     def hash(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Compute the hash of this k-mer."""
 *         if is_num(kmer):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_11hash(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_10hash[] = "Compute the hash of this k-mer.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_11hash(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hash (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_10hash(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_10hash(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  oxli::HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hash", 0);

  /* "khmer/_oxli/graphs.pyx":107
 *     def hash(self, object kmer):
 *         """Compute the hash of this k-mer."""
 *         if is_num(kmer):             # <<<<<<<<<<<<<<
 *             return kmer
 * 
 */
  __pyx_t_1 = (__pyx_f_5khmer_5_oxli_5utils_is_num(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":108
 *         """Compute the hash of this k-mer."""
 *         if is_num(kmer):
 *             return kmer             # <<<<<<<<<<<<<<
 * 
 *         data = self.sanitize_seq_kmer(kmer)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_kmer);
    __pyx_r = __pyx_v_kmer;
    goto __pyx_L0;

    /* "khmer/_oxli/graphs.pyx":107
 *     def hash(self, object kmer):
 *         """Compute the hash of this k-mer."""
 *         if is_num(kmer):             # <<<<<<<<<<<<<<
 *             return kmer
 * 
 */
  }

  /* "khmer/_oxli/graphs.pyx":110
 *             return kmer
 * 
 *         data = self.sanitize_seq_kmer(kmer)             # <<<<<<<<<<<<<<
 *         return deref(self._ht_this).hash_dna(data)
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->sanitize_seq_kmer(__pyx_v_self, __pyx_v_kmer, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_data = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":111
 * 
 *         data = self.sanitize_seq_kmer(kmer)
 *         return deref(self._ht_this).hash_dna(data)             # <<<<<<<<<<<<<<
 * 
 *     def reverse_hash(self, HashIntoType kmer_hash):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 111, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_data); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(1, 111, __pyx_L1_error)
  try {
    __pyx_t_4 = (*__pyx_v_self->_ht_this).hash_dna(__pyx_t_3);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 111, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_oxli_3a__3a_HashIntoType(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":105
 *             self._kmer_type_error(kmer)
 * 
 *     def hash(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Compute the hash of this k-mer."""
 *         if is_num(kmer):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":113
 *         return deref(self._ht_this).hash_dna(data)
 * 
 *     def reverse_hash(self, HashIntoType kmer_hash):             # <<<<<<<<<<<<<<
 *         """Turn a k-mer hash back into a DNA k-mer, if possible."""
 *         return deref(self._ht_this).unhash_dna(kmer_hash)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_13reverse_hash(PyObject *__pyx_v_self, PyObject *__pyx_arg_kmer_hash); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_12reverse_hash[] = "Turn a k-mer hash back into a DNA k-mer, if possible.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_13reverse_hash(PyObject *__pyx_v_self, PyObject *__pyx_arg_kmer_hash) {
  oxli::HashIntoType __pyx_v_kmer_hash;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reverse_hash (wrapper)", 0);
  assert(__pyx_arg_kmer_hash); {
    __pyx_v_kmer_hash = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(__pyx_arg_kmer_hash); if (unlikely((__pyx_v_kmer_hash == ((oxli::HashIntoType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 113, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.reverse_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_12reverse_hash(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((oxli::HashIntoType)__pyx_v_kmer_hash));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_12reverse_hash(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, oxli::HashIntoType __pyx_v_kmer_hash) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reverse_hash", 0);

  /* "khmer/_oxli/graphs.pyx":115
 *     def reverse_hash(self, HashIntoType kmer_hash):
 *         """Turn a k-mer hash back into a DNA k-mer, if possible."""
 *         return deref(self._ht_this).unhash_dna(kmer_hash)             # <<<<<<<<<<<<<<
 * 
 *     def get(self, object kmer):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = (*__pyx_v_self->_ht_this).unhash_dna(__pyx_v_kmer_hash);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 115, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":113
 *         return deref(self._ht_this).hash_dna(data)
 * 
 *     def reverse_hash(self, HashIntoType kmer_hash):             # <<<<<<<<<<<<<<
 *         """Turn a k-mer hash back into a DNA k-mer, if possible."""
 *         return deref(self._ht_this).unhash_dna(kmer_hash)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.reverse_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":117
 *         return deref(self._ht_this).unhash_dna(kmer_hash)
 * 
 *     def get(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Retrieve the count for the given k-mer.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_15get(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_14get[] = "Retrieve the count for the given k-mer.\n\n        `kmer` can be either a string or an integer representing the hashed\n        value of the kmer.\n\n        For Nodetables and Counttables, this function will fail if the\n        supplied k-mer contains non-ACGT characters.\n        ";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_15get(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_14get(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_14get(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_v__kmer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  oxli::BoundedCounterType __pyx_t_4;
  oxli::HashIntoType __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "khmer/_oxli/graphs.pyx":126
 *         supplied k-mer contains non-ACGT characters.
 *         """
 *         if is_str(kmer):             # <<<<<<<<<<<<<<
 *             _kmer = self.sanitize_seq_kmer(kmer)
 *             return deref(self._ht_this).get_count(_kmer)
 */
  __pyx_t_1 = (__pyx_f_5khmer_5_oxli_5utils_is_str(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":127
 *         """
 *         if is_str(kmer):
 *             _kmer = self.sanitize_seq_kmer(kmer)             # <<<<<<<<<<<<<<
 *             return deref(self._ht_this).get_count(_kmer)
 *         elif is_num(kmer):
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->sanitize_seq_kmer(__pyx_v_self, __pyx_v_kmer, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v__kmer = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/graphs.pyx":128
 *         if is_str(kmer):
 *             _kmer = self.sanitize_seq_kmer(kmer)
 *             return deref(self._ht_this).get_count(_kmer)             # <<<<<<<<<<<<<<
 *         elif is_num(kmer):
 *             return deref(self._ht_this).get_count(<HashIntoType> kmer)
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v__kmer == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(1, 128, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v__kmer); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(1, 128, __pyx_L1_error)
    try {
      __pyx_t_4 = (*__pyx_v_self->_ht_this).get_count(__pyx_t_3);
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 128, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/graphs.pyx":126
 *         supplied k-mer contains non-ACGT characters.
 *         """
 *         if is_str(kmer):             # <<<<<<<<<<<<<<
 *             _kmer = self.sanitize_seq_kmer(kmer)
 *             return deref(self._ht_this).get_count(_kmer)
 */
  }

  /* "khmer/_oxli/graphs.pyx":129
 *             _kmer = self.sanitize_seq_kmer(kmer)
 *             return deref(self._ht_this).get_count(_kmer)
 *         elif is_num(kmer):             # <<<<<<<<<<<<<<
 *             return deref(self._ht_this).get_count(<HashIntoType> kmer)
 *         else:
 */
  __pyx_t_1 = (__pyx_f_5khmer_5_oxli_5utils_is_num(__pyx_v_kmer, 0) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":130
 *             return deref(self._ht_this).get_count(_kmer)
 *         elif is_num(kmer):
 *             return deref(self._ht_this).get_count(<HashIntoType> kmer)             # <<<<<<<<<<<<<<
 *         else:
 *             self._kmer_type_error(kmer)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(__pyx_v_kmer); if (unlikely((__pyx_t_5 == ((oxli::HashIntoType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L1_error)
    try {
      __pyx_t_4 = (*__pyx_v_self->_ht_this).get_count(((oxli::HashIntoType)__pyx_t_5));
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 130, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/graphs.pyx":129
 *             _kmer = self.sanitize_seq_kmer(kmer)
 *             return deref(self._ht_this).get_count(_kmer)
 *         elif is_num(kmer):             # <<<<<<<<<<<<<<
 *             return deref(self._ht_this).get_count(<HashIntoType> kmer)
 *         else:
 */
  }

  /* "khmer/_oxli/graphs.pyx":132
 *             return deref(self._ht_this).get_count(<HashIntoType> kmer)
 *         else:
 *             self._kmer_type_error(kmer)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kmer_type_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_kmer) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_kmer);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "khmer/_oxli/graphs.pyx":117
 *         return deref(self._ht_this).unhash_dna(kmer_hash)
 * 
 *     def get(self, object kmer):             # <<<<<<<<<<<<<<
 *         """Retrieve the count for the given k-mer.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__kmer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":135
 * 
 * 
 *     def ksize(self):             # <<<<<<<<<<<<<<
 *         """k-mer size"""
 *         return deref(self._ht_this).ksize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_17ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_16ksize[] = "k-mer size";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_17ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ksize (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_16ksize(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_16ksize(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ksize", 0);

  /* "khmer/_oxli/graphs.pyx":137
 *     def ksize(self):
 *         """k-mer size"""
 *         return deref(self._ht_this).ksize()             # <<<<<<<<<<<<<<
 * 
 *     def hashsizes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_WordLength((*__pyx_v_self->_ht_this).ksize()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":135
 * 
 * 
 *     def ksize(self):             # <<<<<<<<<<<<<<
 *         """k-mer size"""
 *         return deref(self._ht_this).ksize()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.ksize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":139
 *         return deref(self._ht_this).ksize()
 * 
 *     def hashsizes(self):             # <<<<<<<<<<<<<<
 *         """Size of hash tables used."""
 *         return deref(self._ht_this).get_tablesizes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_19hashsizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_18hashsizes[] = "Size of hash tables used.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_19hashsizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hashsizes (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_18hashsizes(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_18hashsizes(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hashsizes", 0);

  /* "khmer/_oxli/graphs.pyx":141
 *     def hashsizes(self):
 *         """Size of hash tables used."""
 *         return deref(self._ht_this).get_tablesizes()             # <<<<<<<<<<<<<<
 * 
 *     def get_kmers(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_uint64_t((*__pyx_v_self->_ht_this).get_tablesizes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":139
 *         return deref(self._ht_this).ksize()
 * 
 *     def hashsizes(self):             # <<<<<<<<<<<<<<
 *         """Size of hash tables used."""
 *         return deref(self._ht_this).get_tablesizes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.hashsizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":143
 *         return deref(self._ht_this).get_tablesizes()
 * 
 *     def get_kmers(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Generate an ordered list of all k-mers in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_21get_kmers(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_20get_kmers[] = "Generate an ordered list of all k-mers in sequence.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_21get_kmers(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_kmers (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 143, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_20get_kmers(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_20get_kmers(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_data = 0;
  std::vector<std::string>  __pyx_v_kmers;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_kmers", 0);

  /* "khmer/_oxli/graphs.pyx":145
 *     def get_kmers(self, str sequence):
 *         """Generate an ordered list of all k-mers in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         cdef vector[string] kmers
 *         deref(self._ht_this).get_kmers(data, kmers)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":147
 *         cdef bytes data = self._valid_sequence(sequence)
 *         cdef vector[string] kmers
 *         deref(self._ht_this).get_kmers(data, kmers)             # <<<<<<<<<<<<<<
 *         return kmers
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  (*__pyx_v_self->_ht_this).get_kmers(__pyx_t_2, __pyx_v_kmers);

  /* "khmer/_oxli/graphs.pyx":148
 *         cdef vector[string] kmers
 *         deref(self._ht_this).get_kmers(data, kmers)
 *         return kmers             # <<<<<<<<<<<<<<
 * 
 *     def consume(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_kmers); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":143
 *         return deref(self._ht_this).get_tablesizes()
 * 
 *     def get_kmers(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Generate an ordered list of all k-mers in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_kmers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":150
 *         return kmers
 * 
 *     def consume(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Increment the counts of all of the k-mers in the sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_23consume(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_22consume[] = "Increment the counts of all of the k-mers in the sequence.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_23consume(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 150, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_22consume(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_22consume(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume", 0);

  /* "khmer/_oxli/graphs.pyx":152
 *     def consume(self, str sequence):
 *         """Increment the counts of all of the k-mers in the sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         return deref(self._ht_this).consume_string(data)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":153
 *         """Increment the counts of all of the k-mers in the sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 *         return deref(self._ht_this).consume_string(data)             # <<<<<<<<<<<<<<
 * 
 *     def get_kmer_counts(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 153, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t((*__pyx_v_self->_ht_this).consume_string(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":150
 *         return kmers
 * 
 *     def consume(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Increment the counts of all of the k-mers in the sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":155
 *         return deref(self._ht_this).consume_string(data)
 * 
 *     def get_kmer_counts(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Retrieve an ordered list of the counts of all k-mers in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_25get_kmer_counts(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_24get_kmer_counts[] = "Retrieve an ordered list of the counts of all k-mers in sequence.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_25get_kmer_counts(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_kmer_counts (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_24get_kmer_counts(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_24get_kmer_counts(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_data = 0;
  std::vector<oxli::BoundedCounterType>  __pyx_v_counts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_kmer_counts", 0);

  /* "khmer/_oxli/graphs.pyx":157
 *     def get_kmer_counts(self, str sequence):
 *         """Retrieve an ordered list of the counts of all k-mers in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         cdef vector[BoundedCounterType] counts
 *         deref(self._ht_this).get_kmer_counts(data, counts)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":159
 *         cdef bytes data = self._valid_sequence(sequence)
 *         cdef vector[BoundedCounterType] counts
 *         deref(self._ht_this).get_kmer_counts(data, counts)             # <<<<<<<<<<<<<<
 *         return counts
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 159, __pyx_L1_error)
  (*__pyx_v_self->_ht_this).get_kmer_counts(__pyx_t_2, __pyx_v_counts);

  /* "khmer/_oxli/graphs.pyx":160
 *         cdef vector[BoundedCounterType] counts
 *         deref(self._ht_this).get_kmer_counts(data, counts)
 *         return counts             # <<<<<<<<<<<<<<
 * 
 *     def get_min_count(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType(__pyx_v_counts); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":155
 *         return deref(self._ht_this).consume_string(data)
 * 
 *     def get_kmer_counts(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Retrieve an ordered list of the counts of all k-mers in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_kmer_counts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":162
 *         return counts
 * 
 *     def get_min_count(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Get the smallest count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_27get_min_count(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_26get_min_count[] = "Get the smallest count of all the k-mers in the string.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_27get_min_count(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_min_count (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 162, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_26get_min_count(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_26get_min_count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_min_count", 0);

  /* "khmer/_oxli/graphs.pyx":164
 *     def get_min_count(self, str sequence):
 *         """Get the smallest count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         return deref(self._ht_this).get_min_count(data)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":165
 *         """Get the smallest count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)
 *         return deref(self._ht_this).get_min_count(data)             # <<<<<<<<<<<<<<
 * 
 *     def get_max_count(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 165, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType((*__pyx_v_self->_ht_this).get_min_count(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":162
 *         return counts
 * 
 *     def get_min_count(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Get the smallest count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_min_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":167
 *         return deref(self._ht_this).get_min_count(data)
 * 
 *     def get_max_count(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Get the larget count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_29get_max_count(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_28get_max_count[] = "Get the larget count of all the k-mers in the string.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_29get_max_count(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_max_count (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 167, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_28get_max_count(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_28get_max_count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_max_count", 0);

  /* "khmer/_oxli/graphs.pyx":169
 *     def get_max_count(self, str sequence):
 *         """Get the larget count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         return deref(self._ht_this).get_max_count(data)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":170
 *         """Get the larget count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)
 *         return deref(self._ht_this).get_max_count(data)             # <<<<<<<<<<<<<<
 * 
 *     def get_median_count(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType((*__pyx_v_self->_ht_this).get_max_count(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":167
 *         return deref(self._ht_this).get_min_count(data)
 * 
 *     def get_max_count(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Get the larget count of all the k-mers in the string."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_max_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":172
 *         return deref(self._ht_this).get_max_count(data)
 * 
 *     def get_median_count(self, str sequence):             # <<<<<<<<<<<<<<
 *         """median, average, and stddev of the k-mer counts in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_31get_median_count(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_30get_median_count[] = "median, average, and stddev of the k-mer counts in sequence.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_31get_median_count(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_median_count (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_30get_median_count(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_30get_median_count(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_data = 0;
  oxli::BoundedCounterType __pyx_v_med;
  float __pyx_v_average;
  float __pyx_v_stddev;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_median_count", 0);

  /* "khmer/_oxli/graphs.pyx":174
 *     def get_median_count(self, str sequence):
 *         """median, average, and stddev of the k-mer counts in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         cdef BoundedCounterType med = 0
 *         cdef float average = 0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":175
 *         """median, average, and stddev of the k-mer counts in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 *         cdef BoundedCounterType med = 0             # <<<<<<<<<<<<<<
 *         cdef float average = 0
 *         cdef float stddev = 0
 */
  __pyx_v_med = 0;

  /* "khmer/_oxli/graphs.pyx":176
 *         cdef bytes data = self._valid_sequence(sequence)
 *         cdef BoundedCounterType med = 0
 *         cdef float average = 0             # <<<<<<<<<<<<<<
 *         cdef float stddev = 0
 * 
 */
  __pyx_v_average = 0.0;

  /* "khmer/_oxli/graphs.pyx":177
 *         cdef BoundedCounterType med = 0
 *         cdef float average = 0
 *         cdef float stddev = 0             # <<<<<<<<<<<<<<
 * 
 *         deref(self._ht_this).get_median_count(data, med, average, stddev)
 */
  __pyx_v_stddev = 0.0;

  /* "khmer/_oxli/graphs.pyx":179
 *         cdef float stddev = 0
 * 
 *         deref(self._ht_this).get_median_count(data, med, average, stddev)             # <<<<<<<<<<<<<<
 *         return (med, average, stddev)
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 179, __pyx_L1_error)
  try {
    (*__pyx_v_self->_ht_this).get_median_count(__pyx_t_2, __pyx_v_med, __pyx_v_average, __pyx_v_stddev);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 179, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":180
 * 
 *         deref(self._ht_this).get_median_count(data, med, average, stddev)
 *         return (med, average, stddev)             # <<<<<<<<<<<<<<
 * 
 *     def median_at_least(self, str sequence, int median):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType(__pyx_v_med); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_average); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_stddev); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":172
 *         return deref(self._ht_this).get_max_count(data)
 * 
 *     def get_median_count(self, str sequence):             # <<<<<<<<<<<<<<
 *         """median, average, and stddev of the k-mer counts in sequence."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_median_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":182
 *         return (med, average, stddev)
 * 
 *     def median_at_least(self, str sequence, int median):             # <<<<<<<<<<<<<<
 *         '''Check if median k-mer count is at least the given value.'''
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_33median_at_least(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_32median_at_least[] = "Check if median k-mer count is at least the given value.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_33median_at_least(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sequence = 0;
  int __pyx_v_median;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("median_at_least (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sequence,&__pyx_n_s_median,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sequence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_median)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("median_at_least", 1, 2, 2, 1); __PYX_ERR(1, 182, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "median_at_least") < 0)) __PYX_ERR(1, 182, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sequence = ((PyObject*)values[0]);
    __pyx_v_median = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_median == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 182, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("median_at_least", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 182, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.median_at_least", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 182, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_32median_at_least(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_sequence, __pyx_v_median);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_32median_at_least(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_median) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("median_at_least", 0);

  /* "khmer/_oxli/graphs.pyx":184
 *     def median_at_least(self, str sequence, int median):
 *         '''Check if median k-mer count is at least the given value.'''
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         return <bool>deref(self._ht_this).median_at_least(data, median)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":185
 *         '''Check if median k-mer count is at least the given value.'''
 *         cdef bytes data = self._valid_sequence(sequence)
 *         return <bool>deref(self._ht_this).median_at_least(data, median)             # <<<<<<<<<<<<<<
 * 
 *     def get_kmer_hashes(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 185, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(((bool)(*__pyx_v_self->_ht_this).median_at_least(__pyx_t_2, __pyx_v_median))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":182
 *         return (med, average, stddev)
 * 
 *     def median_at_least(self, str sequence, int median):             # <<<<<<<<<<<<<<
 *         '''Check if median k-mer count is at least the given value.'''
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.median_at_least", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":187
 *         return <bool>deref(self._ht_this).median_at_least(data, median)
 * 
 *     def get_kmer_hashes(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Retrieve hashes of all k-mers in sequence.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_35get_kmer_hashes(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_34get_kmer_hashes[] = "Retrieve hashes of all k-mers in sequence.\n\n        Hashes are returned in the same order as k-mers appear in sequence.\n        ";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_35get_kmer_hashes(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_kmer_hashes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_34get_kmer_hashes(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_34get_kmer_hashes(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_data = 0;
  std::vector<oxli::HashIntoType>  __pyx_v_hashes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_kmer_hashes", 0);

  /* "khmer/_oxli/graphs.pyx":192
 *         Hashes are returned in the same order as k-mers appear in sequence.
 *         """
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         cdef vector[HashIntoType] hashes
 *         deref(self._ht_this).get_kmer_hashes(data, hashes)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":194
 *         cdef bytes data = self._valid_sequence(sequence)
 *         cdef vector[HashIntoType] hashes
 *         deref(self._ht_this).get_kmer_hashes(data, hashes)             # <<<<<<<<<<<<<<
 *         return hashes
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 194, __pyx_L1_error)
  (*__pyx_v_self->_ht_this).get_kmer_hashes(__pyx_t_2, __pyx_v_hashes);

  /* "khmer/_oxli/graphs.pyx":195
 *         cdef vector[HashIntoType] hashes
 *         deref(self._ht_this).get_kmer_hashes(data, hashes)
 *         return hashes             # <<<<<<<<<<<<<<
 * 
 *     def trim_on_abundance(self, str sequence, int abundance):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType(__pyx_v_hashes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":187
 *         return <bool>deref(self._ht_this).median_at_least(data, median)
 * 
 *     def get_kmer_hashes(self, str sequence):             # <<<<<<<<<<<<<<
 *         """Retrieve hashes of all k-mers in sequence.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_kmer_hashes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":197
 *         return hashes
 * 
 *     def trim_on_abundance(self, str sequence, int abundance):             # <<<<<<<<<<<<<<
 *         """Trim sequence at first k-mer below the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_37trim_on_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_36trim_on_abundance[] = "Trim sequence at first k-mer below the given abundance.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_37trim_on_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sequence = 0;
  int __pyx_v_abundance;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trim_on_abundance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sequence,&__pyx_n_s_abundance,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sequence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_abundance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trim_on_abundance", 1, 2, 2, 1); __PYX_ERR(1, 197, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "trim_on_abundance") < 0)) __PYX_ERR(1, 197, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sequence = ((PyObject*)values[0]);
    __pyx_v_abundance = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_abundance == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trim_on_abundance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 197, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.trim_on_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_36trim_on_abundance(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_sequence, __pyx_v_abundance);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_36trim_on_abundance(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_abundance) {
  PyObject *__pyx_v_data = 0;
  uint64_t __pyx_v_trimmed_at;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trim_on_abundance", 0);

  /* "khmer/_oxli/graphs.pyx":199
 *     def trim_on_abundance(self, str sequence, int abundance):
 *         """Trim sequence at first k-mer below the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         trimmed_at = deref(self._ht_this).trim_on_abundance(data, abundance)
 *         return sequence[:trimmed_at], trimmed_at
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":200
 *         """Trim sequence at first k-mer below the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)
 *         trimmed_at = deref(self._ht_this).trim_on_abundance(data, abundance)             # <<<<<<<<<<<<<<
 *         return sequence[:trimmed_at], trimmed_at
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 200, __pyx_L1_error)
  __pyx_v_trimmed_at = (*__pyx_v_self->_ht_this).trim_on_abundance(__pyx_t_2, __pyx_v_abundance);

  /* "khmer/_oxli/graphs.pyx":201
 *         cdef bytes data = self._valid_sequence(sequence)
 *         trimmed_at = deref(self._ht_this).trim_on_abundance(data, abundance)
 *         return sequence[:trimmed_at], trimmed_at             # <<<<<<<<<<<<<<
 * 
 *     def trim_below_abundance(self, str sequence, int abundance):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_sequence == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 201, __pyx_L1_error)
  }
  __pyx_t_1 = PySequence_GetSlice(__pyx_v_sequence, 0, __pyx_v_trimmed_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_trimmed_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":197
 *         return hashes
 * 
 *     def trim_on_abundance(self, str sequence, int abundance):             # <<<<<<<<<<<<<<
 *         """Trim sequence at first k-mer below the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.trim_on_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":203
 *         return sequence[:trimmed_at], trimmed_at
 * 
 *     def trim_below_abundance(self, str sequence, int abundance):             # <<<<<<<<<<<<<<
 *         """Trim sequence at first k-mer above the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_39trim_below_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_38trim_below_abundance[] = "Trim sequence at first k-mer above the given abundance.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_39trim_below_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sequence = 0;
  int __pyx_v_abundance;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trim_below_abundance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sequence,&__pyx_n_s_abundance,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sequence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_abundance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trim_below_abundance", 1, 2, 2, 1); __PYX_ERR(1, 203, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "trim_below_abundance") < 0)) __PYX_ERR(1, 203, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sequence = ((PyObject*)values[0]);
    __pyx_v_abundance = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_abundance == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trim_below_abundance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.trim_below_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 203, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_38trim_below_abundance(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_sequence, __pyx_v_abundance);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_38trim_below_abundance(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_abundance) {
  PyObject *__pyx_v_data = 0;
  int __pyx_v_trimmed_at;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trim_below_abundance", 0);

  /* "khmer/_oxli/graphs.pyx":205
 *     def trim_below_abundance(self, str sequence, int abundance):
 *         """Trim sequence at first k-mer above the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         cdef int trimmed_at = deref(self._ht_this).trim_below_abundance(data, abundance)
 *         return sequence[:trimmed_at], trimmed_at
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":206
 *         """Trim sequence at first k-mer above the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)
 *         cdef int trimmed_at = deref(self._ht_this).trim_below_abundance(data, abundance)             # <<<<<<<<<<<<<<
 *         return sequence[:trimmed_at], trimmed_at
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 206, __pyx_L1_error)
  __pyx_v_trimmed_at = (*__pyx_v_self->_ht_this).trim_below_abundance(__pyx_t_2, __pyx_v_abundance);

  /* "khmer/_oxli/graphs.pyx":207
 *         cdef bytes data = self._valid_sequence(sequence)
 *         cdef int trimmed_at = deref(self._ht_this).trim_below_abundance(data, abundance)
 *         return sequence[:trimmed_at], trimmed_at             # <<<<<<<<<<<<<<
 * 
 *     def find_spectral_error_positions(self, str sequence, int max_count):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_sequence == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 207, __pyx_L1_error)
  }
  __pyx_t_1 = PySequence_GetSlice(__pyx_v_sequence, 0, __pyx_v_trimmed_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_trimmed_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":203
 *         return sequence[:trimmed_at], trimmed_at
 * 
 *     def trim_below_abundance(self, str sequence, int abundance):             # <<<<<<<<<<<<<<
 *         """Trim sequence at first k-mer above the given abundance."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.trim_below_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":209
 *         return sequence[:trimmed_at], trimmed_at
 * 
 *     def find_spectral_error_positions(self, str sequence, int max_count):             # <<<<<<<<<<<<<<
 *         """Identify positions of low-abundance k-mers."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_41find_spectral_error_positions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_40find_spectral_error_positions[] = "Identify positions of low-abundance k-mers.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_41find_spectral_error_positions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sequence = 0;
  int __pyx_v_max_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_spectral_error_positions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sequence,&__pyx_n_s_max_count,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sequence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("find_spectral_error_positions", 1, 2, 2, 1); __PYX_ERR(1, 209, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_spectral_error_positions") < 0)) __PYX_ERR(1, 209, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sequence = ((PyObject*)values[0]);
    __pyx_v_max_count = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_max_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_spectral_error_positions", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 209, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.find_spectral_error_positions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 209, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_40find_spectral_error_positions(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_sequence, __pyx_v_max_count);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_40find_spectral_error_positions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence, int __pyx_v_max_count) {
  PyObject *__pyx_v_data = 0;
  std::vector<uint32_t>  __pyx_v_posns;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_spectral_error_positions", 0);

  /* "khmer/_oxli/graphs.pyx":211
 *     def find_spectral_error_positions(self, str sequence, int max_count):
 *         """Identify positions of low-abundance k-mers."""
 *         cdef bytes data = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         posns = (deref(self._ht_this).find_spectral_error_positions(data,
 *                                                                    max_count))
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_valid_sequence(__pyx_v_self, __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":212
 *         """Identify positions of low-abundance k-mers."""
 *         cdef bytes data = self._valid_sequence(sequence)
 *         posns = (deref(self._ht_this).find_spectral_error_positions(data,             # <<<<<<<<<<<<<<
 *                                                                    max_count))
 *         return posns
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 212, __pyx_L1_error)

  /* "khmer/_oxli/graphs.pyx":213
 *         cdef bytes data = self._valid_sequence(sequence)
 *         posns = (deref(self._ht_this).find_spectral_error_positions(data,
 *                                                                    max_count))             # <<<<<<<<<<<<<<
 *         return posns
 * 
 */
  __pyx_v_posns = (*__pyx_v_self->_ht_this).find_spectral_error_positions(__pyx_t_2, __pyx_v_max_count);

  /* "khmer/_oxli/graphs.pyx":214
 *         posns = (deref(self._ht_this).find_spectral_error_positions(data,
 *                                                                    max_count))
 *         return posns             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParserPtr _get_parser(self, object parser_or_filename) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_uint32_t(__pyx_v_posns); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":209
 *         return sequence[:trimmed_at], trimmed_at
 * 
 *     def find_spectral_error_positions(self, str sequence, int max_count):             # <<<<<<<<<<<<<<
 *         """Identify positions of low-abundance k-mers."""
 *         cdef bytes data = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.find_spectral_error_positions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":216
 *         return posns
 * 
 *     cdef FastxParserPtr _get_parser(self, object parser_or_filename) except *:             # <<<<<<<<<<<<<<
 *         cdef FastxParserPtr _parser
 *         if isinstance(parser_or_filename, FastxParser):
 */

static oxli::read_parsers::FastxParserPtr __pyx_f_5khmer_5_oxli_6graphs_9Hashtable__get_parser(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename) {
  oxli::read_parsers::FastxParserPtr __pyx_v__parser;
  oxli::read_parsers::FastxParserPtr __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<oxli::read_parsers::ReadParser<oxli::read_parsers::FastxReader> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  oxli::read_parsers::FastxParserPtr __pyx_t_5;
  std::string __pyx_t_6;
  std::shared_ptr<oxli::read_parsers::ReadParser<oxli::read_parsers::FastxReader> >  __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_parser", 0);

  /* "khmer/_oxli/graphs.pyx":218
 *     cdef FastxParserPtr _get_parser(self, object parser_or_filename) except *:
 *         cdef FastxParserPtr _parser
 *         if isinstance(parser_or_filename, FastxParser):             # <<<<<<<<<<<<<<
 *             _parser = (<FastxParser>parser_or_filename)._this
 *         elif isinstance(parser_or_filename, ReadParser):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_parser_or_filename, __pyx_ptype_5khmer_5_oxli_7parsing_FastxParser); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":219
 *         cdef FastxParserPtr _parser
 *         if isinstance(parser_or_filename, FastxParser):
 *             _parser = (<FastxParser>parser_or_filename)._this             # <<<<<<<<<<<<<<
 *         elif isinstance(parser_or_filename, ReadParser):
 *             _parser = (<CPyReadParser_Object*>parser_or_filename).parser
 */
    __pyx_t_3 = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_parser_or_filename)->_this;
    __pyx_v__parser = __pyx_t_3;

    /* "khmer/_oxli/graphs.pyx":218
 *     cdef FastxParserPtr _get_parser(self, object parser_or_filename) except *:
 *         cdef FastxParserPtr _parser
 *         if isinstance(parser_or_filename, FastxParser):             # <<<<<<<<<<<<<<
 *             _parser = (<FastxParser>parser_or_filename)._this
 *         elif isinstance(parser_or_filename, ReadParser):
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":220
 *         if isinstance(parser_or_filename, FastxParser):
 *             _parser = (<FastxParser>parser_or_filename)._this
 *         elif isinstance(parser_or_filename, ReadParser):             # <<<<<<<<<<<<<<
 *             _parser = (<CPyReadParser_Object*>parser_or_filename).parser
 *         elif is_str(parser_or_filename):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ReadParser); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_parser_or_filename, __pyx_t_4); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":221
 *             _parser = (<FastxParser>parser_or_filename)._this
 *         elif isinstance(parser_or_filename, ReadParser):
 *             _parser = (<CPyReadParser_Object*>parser_or_filename).parser             # <<<<<<<<<<<<<<
 *         elif is_str(parser_or_filename):
 *             _parser = get_parser[CpFastxReader](_bstring(parser_or_filename))
 */
    __pyx_t_5 = ((khmer::khmer_ReadParser_Object *)__pyx_v_parser_or_filename)->parser;
    __pyx_v__parser = __pyx_t_5;

    /* "khmer/_oxli/graphs.pyx":220
 *         if isinstance(parser_or_filename, FastxParser):
 *             _parser = (<FastxParser>parser_or_filename)._this
 *         elif isinstance(parser_or_filename, ReadParser):             # <<<<<<<<<<<<<<
 *             _parser = (<CPyReadParser_Object*>parser_or_filename).parser
 *         elif is_str(parser_or_filename):
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":222
 *         elif isinstance(parser_or_filename, ReadParser):
 *             _parser = (<CPyReadParser_Object*>parser_or_filename).parser
 *         elif is_str(parser_or_filename):             # <<<<<<<<<<<<<<
 *             _parser = get_parser[CpFastxReader](_bstring(parser_or_filename))
 *         else:
 */
  __pyx_t_1 = (__pyx_f_5khmer_5_oxli_5utils_is_str(__pyx_v_parser_or_filename, 0) != 0);
  if (likely(__pyx_t_1)) {

    /* "khmer/_oxli/graphs.pyx":223
 *             _parser = (<CPyReadParser_Object*>parser_or_filename).parser
 *         elif is_str(parser_or_filename):
 *             _parser = get_parser[CpFastxReader](_bstring(parser_or_filename))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('argument does not appear to be a parser or a '
 */
    __pyx_t_4 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_parser_or_filename); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_7 = oxli::read_parsers::get_parser<oxli::read_parsers::FastxReader>(__pyx_t_6);
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 223, __pyx_L1_error)
    }
    __pyx_v__parser = __pyx_t_7;

    /* "khmer/_oxli/graphs.pyx":222
 *         elif isinstance(parser_or_filename, ReadParser):
 *             _parser = (<CPyReadParser_Object*>parser_or_filename).parser
 *         elif is_str(parser_or_filename):             # <<<<<<<<<<<<<<
 *             _parser = get_parser[CpFastxReader](_bstring(parser_or_filename))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":225
 *             _parser = get_parser[CpFastxReader](_bstring(parser_or_filename))
 *         else:
 *             raise TypeError('argument does not appear to be a parser or a '             # <<<<<<<<<<<<<<
 *                             'filename: {}'.format(parser_or_filename))
 *         return _parser
 */
  /*else*/ {

    /* "khmer/_oxli/graphs.pyx":226
 *         else:
 *             raise TypeError('argument does not appear to be a parser or a '
 *                             'filename: {}'.format(parser_or_filename))             # <<<<<<<<<<<<<<
 *         return _parser
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_argument_does_not_appear_to_be_a, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_parser_or_filename) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_parser_or_filename);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "khmer/_oxli/graphs.pyx":225
 *             _parser = get_parser[CpFastxReader](_bstring(parser_or_filename))
 *         else:
 *             raise TypeError('argument does not appear to be a parser or a '             # <<<<<<<<<<<<<<
 *                             'filename: {}'.format(parser_or_filename))
 *         return _parser
 */
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(1, 225, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "khmer/_oxli/graphs.pyx":227
 *             raise TypeError('argument does not appear to be a parser or a '
 *                             'filename: {}'.format(parser_or_filename))
 *         return _parser             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v__parser;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":216
 *         return posns
 * 
 *     cdef FastxParserPtr _get_parser(self, object parser_or_filename) except *:             # <<<<<<<<<<<<<<
 *         cdef FastxParserPtr _parser
 *         if isinstance(parser_or_filename, FastxParser):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable._get_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":230
 * 
 * 
 *     def consume_seqfile(self, object parser_or_filename):             # <<<<<<<<<<<<<<
 *         """Count all k-mers from file_name."""
 *         cdef unsigned long long n_consumed = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_43consume_seqfile(PyObject *__pyx_v_self, PyObject *__pyx_v_parser_or_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_42consume_seqfile[] = "Count all k-mers from file_name.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_43consume_seqfile(PyObject *__pyx_v_self, PyObject *__pyx_v_parser_or_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume_seqfile (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_42consume_seqfile(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_parser_or_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_42consume_seqfile(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename) {
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  oxli::read_parsers::FastxParserPtr __pyx_v__parser;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::read_parsers::FastxParserPtr __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume_seqfile", 0);

  /* "khmer/_oxli/graphs.pyx":232
 *     def consume_seqfile(self, object parser_or_filename):
 *         """Count all k-mers from file_name."""
 *         cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 */
  __pyx_v_n_consumed = 0;

  /* "khmer/_oxli/graphs.pyx":233
 *         """Count all k-mers from file_name."""
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:
 */
  __pyx_v_total_reads = 0;

  /* "khmer/_oxli/graphs.pyx":234
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             deref(self._ht_this).consume_seqfile[CpFastxReader](\
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_get_parser(__pyx_v_self, __pyx_v_parser_or_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 234, __pyx_L1_error)
  __pyx_v__parser = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":235
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).consume_seqfile[CpFastxReader](\
 *                 _parser, total_reads, n_consumed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":236
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:
 *             deref(self._ht_this).consume_seqfile[CpFastxReader](\             # <<<<<<<<<<<<<<
 *                 _parser, total_reads, n_consumed
 *             )
 */
        try {
          (*__pyx_v_self->_ht_this).consume_seqfile<oxli::read_parsers::FastxReader>(__pyx_v__parser, __pyx_v_total_reads, __pyx_v_n_consumed);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 236, __pyx_L4_error)
        }
      }

      /* "khmer/_oxli/graphs.pyx":235
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).consume_seqfile[CpFastxReader](\
 *                 _parser, total_reads, n_consumed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":239
 *                 _parser, total_reads, n_consumed
 *             )
 *         return total_reads, n_consumed             # <<<<<<<<<<<<<<
 * 
 *     def consume_seqfile_with_mask(self, object parser_or_filename,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":230
 * 
 * 
 *     def consume_seqfile(self, object parser_or_filename):             # <<<<<<<<<<<<<<
 *         """Count all k-mers from file_name."""
 *         cdef unsigned long long n_consumed = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume_seqfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":241
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_with_mask(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                   Hashtable mask, int threshold=0,
 *                                   bool consume_masked=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_45consume_seqfile_with_mask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_45consume_seqfile_with_mask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parser_or_filename = 0;
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_mask = 0;
  int __pyx_v_threshold;
  bool __pyx_v_consume_masked;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume_seqfile_with_mask (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser_or_filename,&__pyx_n_s_mask,&__pyx_n_s_threshold,&__pyx_n_s_consume_masked,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parser_or_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mask)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_seqfile_with_mask", 0, 2, 4, 1); __PYX_ERR(1, 241, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_consume_masked);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "consume_seqfile_with_mask") < 0)) __PYX_ERR(1, 241, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parser_or_filename = values[0];
    __pyx_v_mask = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)values[1]);
    if (values[2]) {
      __pyx_v_threshold = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_threshold == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 242, __pyx_L3_error)
    } else {
      __pyx_v_threshold = ((int)0);
    }
    if (values[3]) {
      __pyx_v_consume_masked = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_consume_masked == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 243, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/graphs.pyx":243
 *     def consume_seqfile_with_mask(self, object parser_or_filename,
 *                                   Hashtable mask, int threshold=0,
 *                                   bool consume_masked=False):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 */
      __pyx_v_consume_masked = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_seqfile_with_mask", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 241, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume_seqfile_with_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable, 1, "mask", 0))) __PYX_ERR(1, 242, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_44consume_seqfile_with_mask(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_parser_or_filename, __pyx_v_mask, __pyx_v_threshold, __pyx_v_consume_masked);

  /* "khmer/_oxli/graphs.pyx":241
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_with_mask(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                   Hashtable mask, int threshold=0,
 *                                   bool consume_masked=False):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_44consume_seqfile_with_mask(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_mask, int __pyx_v_threshold, bool __pyx_v_consume_masked) {
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  oxli::read_parsers::FastxParserPtr __pyx_v__parser;
  oxli::Hashtable *__pyx_v_cmask;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::read_parsers::FastxParserPtr __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume_seqfile_with_mask", 0);

  /* "khmer/_oxli/graphs.pyx":244
 *                                   Hashtable mask, int threshold=0,
 *                                   bool consume_masked=False):
 *         cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 */
  __pyx_v_n_consumed = 0;

  /* "khmer/_oxli/graphs.pyx":245
 *                                   bool consume_masked=False):
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 */
  __pyx_v_total_reads = 0;

  /* "khmer/_oxli/graphs.pyx":246
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)             # <<<<<<<<<<<<<<
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 *         with nogil:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_get_parser(__pyx_v_self, __pyx_v_parser_or_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 246, __pyx_L1_error)
  __pyx_v__parser = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":247
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             deref(self._ht_this).consume_seqfile_with_mask[CpFastxReader](\
 */
  __pyx_v_cmask = __pyx_v_mask->_ht_this.get();

  /* "khmer/_oxli/graphs.pyx":248
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).consume_seqfile_with_mask[CpFastxReader](\
 *                 _parser, cmask, threshold, total_reads, n_consumed, consume_masked
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":249
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 *         with nogil:
 *             deref(self._ht_this).consume_seqfile_with_mask[CpFastxReader](\             # <<<<<<<<<<<<<<
 *                 _parser, cmask, threshold, total_reads, n_consumed, consume_masked
 *             )
 */
        try {
          (*__pyx_v_self->_ht_this).consume_seqfile_with_mask<oxli::read_parsers::FastxReader>(__pyx_v__parser, __pyx_v_cmask, __pyx_v_threshold, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_v_consume_masked);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 249, __pyx_L4_error)
        }
      }

      /* "khmer/_oxli/graphs.pyx":248
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).consume_seqfile_with_mask[CpFastxReader](\
 *                 _parser, cmask, threshold, total_reads, n_consumed, consume_masked
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":252
 *                 _parser, cmask, threshold, total_reads, n_consumed, consume_masked
 *             )
 *         return total_reads, n_consumed             # <<<<<<<<<<<<<<
 * 
 *     def consume_seqfile_banding(self, object parser_or_filename, int num_bands,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":241
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_with_mask(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                   Hashtable mask, int threshold=0,
 *                                   bool consume_masked=False):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume_seqfile_with_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":254
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_banding(self, object parser_or_filename, int num_bands,             # <<<<<<<<<<<<<<
 *                                 int band):
 *         """Count all k-mers from file_name."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_47consume_seqfile_banding(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_46consume_seqfile_banding[] = "Count all k-mers from file_name.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_47consume_seqfile_banding(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parser_or_filename = 0;
  int __pyx_v_num_bands;
  int __pyx_v_band;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume_seqfile_banding (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser_or_filename,&__pyx_n_s_num_bands,&__pyx_n_s_band,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parser_or_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_bands)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_seqfile_banding", 1, 3, 3, 1); __PYX_ERR(1, 254, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_band)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_seqfile_banding", 1, 3, 3, 2); __PYX_ERR(1, 254, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "consume_seqfile_banding") < 0)) __PYX_ERR(1, 254, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_parser_or_filename = values[0];
    __pyx_v_num_bands = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_num_bands == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 254, __pyx_L3_error)
    __pyx_v_band = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_band == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 255, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_seqfile_banding", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 254, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume_seqfile_banding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_46consume_seqfile_banding(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_parser_or_filename, __pyx_v_num_bands, __pyx_v_band);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_46consume_seqfile_banding(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, int __pyx_v_num_bands, int __pyx_v_band) {
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  oxli::read_parsers::FastxParserPtr __pyx_v__parser;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::read_parsers::FastxParserPtr __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume_seqfile_banding", 0);

  /* "khmer/_oxli/graphs.pyx":257
 *                                 int band):
 *         """Count all k-mers from file_name."""
 *         cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 */
  __pyx_v_n_consumed = 0;

  /* "khmer/_oxli/graphs.pyx":258
 *         """Count all k-mers from file_name."""
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:
 */
  __pyx_v_total_reads = 0;

  /* "khmer/_oxli/graphs.pyx":259
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             deref(self._ht_this).consume_seqfile_banding[CpFastxReader](\
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_get_parser(__pyx_v_self, __pyx_v_parser_or_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L1_error)
  __pyx_v__parser = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":260
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).consume_seqfile_banding[CpFastxReader](\
 *                 _parser, num_bands, band, total_reads, n_consumed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":261
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:
 *             deref(self._ht_this).consume_seqfile_banding[CpFastxReader](\             # <<<<<<<<<<<<<<
 *                 _parser, num_bands, band, total_reads, n_consumed
 *             )
 */
        try {
          (*__pyx_v_self->_ht_this).consume_seqfile_banding<oxli::read_parsers::FastxReader>(__pyx_v__parser, __pyx_v_num_bands, __pyx_v_band, __pyx_v_total_reads, __pyx_v_n_consumed);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 261, __pyx_L4_error)
        }
      }

      /* "khmer/_oxli/graphs.pyx":260
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).consume_seqfile_banding[CpFastxReader](\
 *                 _parser, num_bands, band, total_reads, n_consumed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":264
 *                 _parser, num_bands, band, total_reads, n_consumed
 *             )
 *         return total_reads, n_consumed             # <<<<<<<<<<<<<<
 * 
 *     def consume_seqfile_banding_with_mask(self, object parser_or_filename,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":254
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_banding(self, object parser_or_filename, int num_bands,             # <<<<<<<<<<<<<<
 *                                 int band):
 *         """Count all k-mers from file_name."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume_seqfile_banding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":266
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_banding_with_mask(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                           int num_bands, int band,
 *                                           Hashtable mask, int threshold=0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_49consume_seqfile_banding_with_mask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_49consume_seqfile_banding_with_mask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parser_or_filename = 0;
  int __pyx_v_num_bands;
  int __pyx_v_band;
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_mask = 0;
  int __pyx_v_threshold;
  bool __pyx_v_consume_masked;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume_seqfile_banding_with_mask (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser_or_filename,&__pyx_n_s_num_bands,&__pyx_n_s_band,&__pyx_n_s_mask,&__pyx_n_s_threshold,&__pyx_n_s_consume_masked,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parser_or_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_bands)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_seqfile_banding_with_mask", 0, 4, 6, 1); __PYX_ERR(1, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_band)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_seqfile_banding_with_mask", 0, 4, 6, 2); __PYX_ERR(1, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mask)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_seqfile_banding_with_mask", 0, 4, 6, 3); __PYX_ERR(1, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_consume_masked);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "consume_seqfile_banding_with_mask") < 0)) __PYX_ERR(1, 266, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parser_or_filename = values[0];
    __pyx_v_num_bands = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_num_bands == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 267, __pyx_L3_error)
    __pyx_v_band = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_band == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 267, __pyx_L3_error)
    __pyx_v_mask = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)values[3]);
    if (values[4]) {
      __pyx_v_threshold = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_threshold == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 268, __pyx_L3_error)
    } else {
      __pyx_v_threshold = ((int)0);
    }
    if (values[5]) {
      __pyx_v_consume_masked = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_consume_masked == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 269, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/graphs.pyx":269
 *                                           int num_bands, int band,
 *                                           Hashtable mask, int threshold=0,
 *                                           bool consume_masked=False):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 */
      __pyx_v_consume_masked = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_seqfile_banding_with_mask", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume_seqfile_banding_with_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable, 1, "mask", 0))) __PYX_ERR(1, 268, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_48consume_seqfile_banding_with_mask(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_parser_or_filename, __pyx_v_num_bands, __pyx_v_band, __pyx_v_mask, __pyx_v_threshold, __pyx_v_consume_masked);

  /* "khmer/_oxli/graphs.pyx":266
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_banding_with_mask(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                           int num_bands, int band,
 *                                           Hashtable mask, int threshold=0,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_48consume_seqfile_banding_with_mask(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, int __pyx_v_num_bands, int __pyx_v_band, struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_mask, int __pyx_v_threshold, bool __pyx_v_consume_masked) {
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  oxli::read_parsers::FastxParserPtr __pyx_v__parser;
  oxli::Hashtable *__pyx_v_cmask;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::read_parsers::FastxParserPtr __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume_seqfile_banding_with_mask", 0);

  /* "khmer/_oxli/graphs.pyx":270
 *                                           Hashtable mask, int threshold=0,
 *                                           bool consume_masked=False):
 *         cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 */
  __pyx_v_n_consumed = 0;

  /* "khmer/_oxli/graphs.pyx":271
 *                                           bool consume_masked=False):
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 */
  __pyx_v_total_reads = 0;

  /* "khmer/_oxli/graphs.pyx":272
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)             # <<<<<<<<<<<<<<
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 *         with nogil:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_get_parser(__pyx_v_self, __pyx_v_parser_or_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 272, __pyx_L1_error)
  __pyx_v__parser = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":273
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             deref(self._ht_this).\
 */
  __pyx_v_cmask = __pyx_v_mask->_ht_this.get();

  /* "khmer/_oxli/graphs.pyx":274
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).\
 *                 consume_seqfile_banding_with_mask[CpFastxReader](\
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":276
 *         with nogil:
 *             deref(self._ht_this).\
 *                 consume_seqfile_banding_with_mask[CpFastxReader](\             # <<<<<<<<<<<<<<
 *                     _parser, num_bands, band, cmask, threshold, total_reads,
 *                     n_consumed, consume_masked
 */
        try {
          (*__pyx_v_self->_ht_this).consume_seqfile_banding_with_mask<oxli::read_parsers::FastxReader>(__pyx_v__parser, __pyx_v_num_bands, __pyx_v_band, __pyx_v_cmask, __pyx_v_threshold, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_v_consume_masked);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 276, __pyx_L4_error)
        }
      }

      /* "khmer/_oxli/graphs.pyx":274
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * cmask = mask._ht_this.get()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._ht_this).\
 *                 consume_seqfile_banding_with_mask[CpFastxReader](\
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":280
 *                     n_consumed, consume_masked
 *                 )
 *         return total_reads, n_consumed             # <<<<<<<<<<<<<<
 * 
 *     def abundance_distribution(self, object parser_or_filename,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":266
 *         return total_reads, n_consumed
 * 
 *     def consume_seqfile_banding_with_mask(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                           int num_bands, int band,
 *                                           Hashtable mask, int threshold=0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.consume_seqfile_banding_with_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":282
 *         return total_reads, n_consumed
 * 
 *     def abundance_distribution(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                Hashtable tracking):
 *         """Calculate the k-mer abundance distribution over input reads."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_51abundance_distribution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_50abundance_distribution[] = "Calculate the k-mer abundance distribution over input reads.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_51abundance_distribution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parser_or_filename = 0;
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_tracking = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("abundance_distribution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser_or_filename,&__pyx_n_s_tracking,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parser_or_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tracking)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("abundance_distribution", 1, 2, 2, 1); __PYX_ERR(1, 282, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "abundance_distribution") < 0)) __PYX_ERR(1, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parser_or_filename = values[0];
    __pyx_v_tracking = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("abundance_distribution", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.abundance_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tracking), __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable, 1, "tracking", 0))) __PYX_ERR(1, 283, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_50abundance_distribution(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_parser_or_filename, __pyx_v_tracking);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_50abundance_distribution(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_parser_or_filename, struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_tracking) {
  oxli::read_parsers::FastxParserPtr __pyx_v__parser;
  oxli::Hashtable *__pyx_v__tracking;
  uint64_t *__pyx_v_x;
  PyObject *__pyx_v_abunds = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::read_parsers::FastxParserPtr __pyx_t_1;
  uint64_t *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("abundance_distribution", 0);

  /* "khmer/_oxli/graphs.pyx":285
 *                                Hashtable tracking):
 *         """Calculate the k-mer abundance distribution over input reads."""
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)             # <<<<<<<<<<<<<<
 *         cdef CpHashtable * _tracking = tracking._ht_this.get()
 *         cdef uint64_t * x
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_get_parser(__pyx_v_self, __pyx_v_parser_or_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 285, __pyx_L1_error)
  __pyx_v__parser = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":286
 *         """Calculate the k-mer abundance distribution over input reads."""
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 *         cdef CpHashtable * _tracking = tracking._ht_this.get()             # <<<<<<<<<<<<<<
 *         cdef uint64_t * x
 *         with nogil:
 */
  __pyx_v__tracking = __pyx_v_tracking->_ht_this.get();

  /* "khmer/_oxli/graphs.pyx":288
 *         cdef CpHashtable * _tracking = tracking._ht_this.get()
 *         cdef uint64_t * x
 *         with nogil:             # <<<<<<<<<<<<<<
 *             x = deref(self._ht_this).abundance_distribution[CpFastxReader](\
 *                 _parser, _tracking
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":289
 *         cdef uint64_t * x
 *         with nogil:
 *             x = deref(self._ht_this).abundance_distribution[CpFastxReader](\             # <<<<<<<<<<<<<<
 *                 _parser, _tracking
 *             )
 */
        try {
          __pyx_t_2 = (*__pyx_v_self->_ht_this).abundance_distribution<oxli::read_parsers::FastxReader>(__pyx_v__parser, __pyx_v__tracking);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 289, __pyx_L4_error)
        }
        __pyx_v_x = __pyx_t_2;
      }

      /* "khmer/_oxli/graphs.pyx":288
 *         cdef CpHashtable * _tracking = tracking._ht_this.get()
 *         cdef uint64_t * x
 *         with nogil:             # <<<<<<<<<<<<<<
 *             x = deref(self._ht_this).abundance_distribution[CpFastxReader](\
 *                 _parser, _tracking
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":293
 *             )
 * 
 *         abunds = []             # <<<<<<<<<<<<<<
 *         for i in range(MAX_BIGCOUNT):
 *             abunds.append(x[i])
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_abunds = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/graphs.pyx":294
 * 
 *         abunds = []
 *         for i in range(MAX_BIGCOUNT):             # <<<<<<<<<<<<<<
 *             abunds.append(x[i])
 *         return abunds
 */
  __pyx_t_4 = MAX_BIGCOUNT;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "khmer/_oxli/graphs.pyx":295
 *         abunds = []
 *         for i in range(MAX_BIGCOUNT):
 *             abunds.append(x[i])             # <<<<<<<<<<<<<<
 *         return abunds
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint64_t((__pyx_v_x[__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_abunds, __pyx_t_3); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "khmer/_oxli/graphs.pyx":296
 *         for i in range(MAX_BIGCOUNT):
 *             abunds.append(x[i])
 *         return abunds             # <<<<<<<<<<<<<<
 * 
 *     def save(self, file_name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_abunds);
  __pyx_r = __pyx_v_abunds;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":282
 *         return total_reads, n_consumed
 * 
 *     def abundance_distribution(self, object parser_or_filename,             # <<<<<<<<<<<<<<
 *                                Hashtable tracking):
 *         """Calculate the k-mer abundance distribution over input reads."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.abundance_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_abunds);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":298
 *         return abunds
 * 
 *     def save(self, file_name):             # <<<<<<<<<<<<<<
 *         """Save the graph to the specified file."""
 *         deref(self._ht_this).save(_bstring(file_name))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_53save(PyObject *__pyx_v_self, PyObject *__pyx_v_file_name); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_52save[] = "Save the graph to the specified file.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_53save(PyObject *__pyx_v_self, PyObject *__pyx_v_file_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_52save(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_file_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_52save(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_file_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "khmer/_oxli/graphs.pyx":300
 *     def save(self, file_name):
 *         """Save the graph to the specified file."""
 *         deref(self._ht_this).save(_bstring(file_name))             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_file_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (*__pyx_v_self->_ht_this).save(__pyx_t_2);

  /* "khmer/_oxli/graphs.pyx":298
 *         return abunds
 * 
 *     def save(self, file_name):             # <<<<<<<<<<<<<<
 *         """Save the graph to the specified file."""
 *         deref(self._ht_this).save(_bstring(file_name))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":303
 * 
 *     @classmethod
 *     def load(cls, file_name):             # <<<<<<<<<<<<<<
 *         """Load the graph from the specified file."""
 *         cdef Hashtable table = cls(1, 1, 1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_55load(PyObject *__pyx_v_cls, PyObject *__pyx_v_file_name); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_54load[] = "Load the graph from the specified file.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_55load(PyObject *__pyx_v_cls, PyObject *__pyx_v_file_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_54load(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_file_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_54load(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_file_name) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_table = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "khmer/_oxli/graphs.pyx":305
 *     def load(cls, file_name):
 *         """Load the graph from the specified file."""
 *         cdef Hashtable table = cls(1, 1, 1)             # <<<<<<<<<<<<<<
 *         deref(table._ht_this).load(_bstring(file_name))
 *         return table
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable))))) __PYX_ERR(1, 305, __pyx_L1_error)
  __pyx_v_table = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":306
 *         """Load the graph from the specified file."""
 *         cdef Hashtable table = cls(1, 1, 1)
 *         deref(table._ht_this).load(_bstring(file_name))             # <<<<<<<<<<<<<<
 *         return table
 * 
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_file_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    (*__pyx_v_table->_ht_this).load(__pyx_t_2);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 306, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":307
 *         cdef Hashtable table = cls(1, 1, 1)
 *         deref(table._ht_this).load(_bstring(file_name))
 *         return table             # <<<<<<<<<<<<<<
 * 
 *     def n_unique_kmers(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_table));
  __pyx_r = ((PyObject *)__pyx_v_table);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":303
 * 
 *     @classmethod
 *     def load(cls, file_name):             # <<<<<<<<<<<<<<
 *         """Load the graph from the specified file."""
 *         cdef Hashtable table = cls(1, 1, 1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":309
 *         return table
 * 
 *     def n_unique_kmers(self):             # <<<<<<<<<<<<<<
 *         """Estimate of the number of unique kmers stored."""
 *         return deref(self._ht_this).n_unique_kmers()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_57n_unique_kmers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_56n_unique_kmers[] = "Estimate of the number of unique kmers stored.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_57n_unique_kmers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("n_unique_kmers (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_56n_unique_kmers(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_56n_unique_kmers(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_unique_kmers", 0);

  /* "khmer/_oxli/graphs.pyx":311
 *     def n_unique_kmers(self):
 *         """Estimate of the number of unique kmers stored."""
 *         return deref(self._ht_this).n_unique_kmers()             # <<<<<<<<<<<<<<
 * 
 *     def n_occupied(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t((*__pyx_v_self->_ht_this).n_unique_kmers()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":309
 *         return table
 * 
 *     def n_unique_kmers(self):             # <<<<<<<<<<<<<<
 *         """Estimate of the number of unique kmers stored."""
 *         return deref(self._ht_this).n_unique_kmers()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.n_unique_kmers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":313
 *         return deref(self._ht_this).n_unique_kmers()
 * 
 *     def n_occupied(self):             # <<<<<<<<<<<<<<
 *         """Estimate of the number of occupied slots in the storage."""
 *         return deref(self._ht_this).n_occupied()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_59n_occupied(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_58n_occupied[] = "Estimate of the number of occupied slots in the storage.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_59n_occupied(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("n_occupied (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_58n_occupied(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_58n_occupied(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_occupied", 0);

  /* "khmer/_oxli/graphs.pyx":315
 *     def n_occupied(self):
 *         """Estimate of the number of occupied slots in the storage."""
 *         return deref(self._ht_this).n_occupied()             # <<<<<<<<<<<<<<
 * 
 *     def n_tables(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t((*__pyx_v_self->_ht_this).n_occupied()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":313
 *         return deref(self._ht_this).n_unique_kmers()
 * 
 *     def n_occupied(self):             # <<<<<<<<<<<<<<
 *         """Estimate of the number of occupied slots in the storage."""
 *         return deref(self._ht_this).n_occupied()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.n_occupied", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":317
 *         return deref(self._ht_this).n_occupied()
 * 
 *     def n_tables(self):             # <<<<<<<<<<<<<<
 *         """Number of tables used in the storage."""
 *         return deref(self._ht_this).n_tables()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_61n_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_60n_tables[] = "Number of tables used in the storage.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_61n_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("n_tables (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_60n_tables(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_60n_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_tables", 0);

  /* "khmer/_oxli/graphs.pyx":319
 *     def n_tables(self):
 *         """Number of tables used in the storage."""
 *         return deref(self._ht_this).n_tables()             # <<<<<<<<<<<<<<
 * 
 *     def set_use_bigcount(self, bigcount):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_ht_this).n_tables()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":317
 *         return deref(self._ht_this).n_occupied()
 * 
 *     def n_tables(self):             # <<<<<<<<<<<<<<
 *         """Number of tables used in the storage."""
 *         return deref(self._ht_this).n_tables()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.n_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":321
 *         return deref(self._ht_this).n_tables()
 * 
 *     def set_use_bigcount(self, bigcount):             # <<<<<<<<<<<<<<
 *         deref(self._ht_this).set_use_bigcount(<bool>bigcount)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_63set_use_bigcount(PyObject *__pyx_v_self, PyObject *__pyx_v_bigcount); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_63set_use_bigcount(PyObject *__pyx_v_self, PyObject *__pyx_v_bigcount) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_use_bigcount (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_62set_use_bigcount(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v_bigcount));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_62set_use_bigcount(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_bigcount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_use_bigcount", 0);

  /* "khmer/_oxli/graphs.pyx":322
 * 
 *     def set_use_bigcount(self, bigcount):
 *         deref(self._ht_this).set_use_bigcount(<bool>bigcount)             # <<<<<<<<<<<<<<
 * 
 *     def get_use_bigcount(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_bigcount); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 322, __pyx_L1_error)
  try {
    (*__pyx_v_self->_ht_this).set_use_bigcount(((bool)__pyx_t_1));
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
    __PYX_ERR(1, 322, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":321
 *         return deref(self._ht_this).n_tables()
 * 
 *     def set_use_bigcount(self, bigcount):             # <<<<<<<<<<<<<<
 *         deref(self._ht_this).set_use_bigcount(<bool>bigcount)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.set_use_bigcount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":324
 *         deref(self._ht_this).set_use_bigcount(<bool>bigcount)
 * 
 *     def get_use_bigcount(self):             # <<<<<<<<<<<<<<
 *         return deref(self._ht_this).get_use_bigcount()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_65get_use_bigcount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_65get_use_bigcount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_use_bigcount (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_64get_use_bigcount(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_64get_use_bigcount(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_use_bigcount", 0);

  /* "khmer/_oxli/graphs.pyx":325
 * 
 *     def get_use_bigcount(self):
 *         return deref(self._ht_this).get_use_bigcount()             # <<<<<<<<<<<<<<
 * 
 *     def get_kmer_hashes_as_hashset(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((*__pyx_v_self->_ht_this).get_use_bigcount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":324
 *         deref(self._ht_this).set_use_bigcount(<bool>bigcount)
 * 
 *     def get_use_bigcount(self):             # <<<<<<<<<<<<<<
 *         return deref(self._ht_this).get_use_bigcount()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_use_bigcount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":327
 *         return deref(self._ht_this).get_use_bigcount()
 * 
 *     def get_kmer_hashes_as_hashset(self, str sequence):             # <<<<<<<<<<<<<<
 *         cdef HashSet hashes = HashSet(self.ksize())
 *         deref(self._ht_this).get_kmer_hashes_as_hashset(_bstring(sequence),
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_67get_kmer_hashes_as_hashset(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_67get_kmer_hashes_as_hashset(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_kmer_hashes_as_hashset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 327, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_66get_kmer_hashes_as_hashset(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_66get_kmer_hashes_as_hashset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, PyObject *__pyx_v_sequence) {
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_hashes = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_kmer_hashes_as_hashset", 0);

  /* "khmer/_oxli/graphs.pyx":328
 * 
 *     def get_kmer_hashes_as_hashset(self, str sequence):
 *         cdef HashSet hashes = HashSet(self.ksize())             # <<<<<<<<<<<<<<
 *         deref(self._ht_this).get_kmer_hashes_as_hashset(_bstring(sequence),
 *                                                         hashes.hs)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashset_HashSet), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hashes = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":329
 *     def get_kmer_hashes_as_hashset(self, str sequence):
 *         cdef HashSet hashes = HashSet(self.ksize())
 *         deref(self._ht_this).get_kmer_hashes_as_hashset(_bstring(sequence),             # <<<<<<<<<<<<<<
 *                                                         hashes.hs)
 *         return hashes
 */
  __pyx_t_2 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":330
 *         cdef HashSet hashes = HashSet(self.ksize())
 *         deref(self._ht_this).get_kmer_hashes_as_hashset(_bstring(sequence),
 *                                                         hashes.hs)             # <<<<<<<<<<<<<<
 *         return hashes
 * 
 */
  (*__pyx_v_self->_ht_this).get_kmer_hashes_as_hashset(__pyx_t_4, __pyx_v_hashes->hs);

  /* "khmer/_oxli/graphs.pyx":331
 *         deref(self._ht_this).get_kmer_hashes_as_hashset(_bstring(sequence),
 *                                                         hashes.hs)
 *         return hashes             # <<<<<<<<<<<<<<
 * 
 *     cdef list _get_raw_tables(self, uint8_t ** table_ptrs, vector[uint64_t] sizes):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_hashes));
  __pyx_r = ((PyObject *)__pyx_v_hashes);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":327
 *         return deref(self._ht_this).get_use_bigcount()
 * 
 *     def get_kmer_hashes_as_hashset(self, str sequence):             # <<<<<<<<<<<<<<
 *         cdef HashSet hashes = HashSet(self.ksize())
 *         deref(self._ht_this).get_kmer_hashes_as_hashset(_bstring(sequence),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_kmer_hashes_as_hashset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_hashes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":333
 *         return hashes
 * 
 *     cdef list _get_raw_tables(self, uint8_t ** table_ptrs, vector[uint64_t] sizes):             # <<<<<<<<<<<<<<
 *         cdef Py_buffer buf_info
 *         cdef object view
 */

static PyObject *__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__get_raw_tables(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, uint8_t **__pyx_v_table_ptrs, std::vector<uint64_t>  __pyx_v_sizes) {
  Py_buffer __pyx_v_buf_info;
  PyObject *__pyx_v_view = 0;
  PyObject *__pyx_v_views = 0;
  Py_ssize_t __pyx_v_table_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_raw_tables", 0);

  /* "khmer/_oxli/graphs.pyx":336
 *         cdef Py_buffer buf_info
 *         cdef object view
 *         cdef list views = []             # <<<<<<<<<<<<<<
 *         for table_idx in range(0, len(sizes)):
 *             PyBuffer_FillInfo(&buf_info, None, table_ptrs[table_idx],
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_views = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":337
 *         cdef object view
 *         cdef list views = []
 *         for table_idx in range(0, len(sizes)):             # <<<<<<<<<<<<<<
 *             PyBuffer_FillInfo(&buf_info, None, table_ptrs[table_idx],
 *                               sizes[table_idx], 0, PyBUF_FULL_RO)
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_uint64_t(__pyx_v_sizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_table_idx = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":338
 *         cdef list views = []
 *         for table_idx in range(0, len(sizes)):
 *             PyBuffer_FillInfo(&buf_info, None, table_ptrs[table_idx],             # <<<<<<<<<<<<<<
 *                               sizes[table_idx], 0, PyBUF_FULL_RO)
 *             view = PyMemoryView_FromBuffer(&buf_info)
 */
    __pyx_t_5 = PyBuffer_FillInfo((&__pyx_v_buf_info), Py_None, (__pyx_v_table_ptrs[__pyx_v_table_idx]), (__pyx_v_sizes[__pyx_v_table_idx]), 0, PyBUF_FULL_RO); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 338, __pyx_L1_error)

    /* "khmer/_oxli/graphs.pyx":340
 *             PyBuffer_FillInfo(&buf_info, None, table_ptrs[table_idx],
 *                               sizes[table_idx], 0, PyBUF_FULL_RO)
 *             view = PyMemoryView_FromBuffer(&buf_info)             # <<<<<<<<<<<<<<
 *             views.append(view)
 *         return views
 */
    __pyx_t_1 = PyMemoryView_FromBuffer((&__pyx_v_buf_info)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_view, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "khmer/_oxli/graphs.pyx":341
 *                               sizes[table_idx], 0, PyBUF_FULL_RO)
 *             view = PyMemoryView_FromBuffer(&buf_info)
 *             views.append(view)             # <<<<<<<<<<<<<<
 *         return views
 * 
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_views, __pyx_v_view); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 341, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":342
 *             view = PyMemoryView_FromBuffer(&buf_info)
 *             views.append(view)
 *         return views             # <<<<<<<<<<<<<<
 * 
 *     def get_raw_tables(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_views);
  __pyx_r = __pyx_v_views;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":333
 *         return hashes
 * 
 *     cdef list _get_raw_tables(self, uint8_t ** table_ptrs, vector[uint64_t] sizes):             # <<<<<<<<<<<<<<
 *         cdef Py_buffer buf_info
 *         cdef object view
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable._get_raw_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_view);
  __Pyx_XDECREF(__pyx_v_views);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":344
 *         return views
 * 
 *     def get_raw_tables(self):             # <<<<<<<<<<<<<<
 *         cdef uint8_t ** table_ptrs = deref(self._ht_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._ht_this).get_tablesizes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_69get_raw_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_69get_raw_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_tables (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_68get_raw_tables(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_68get_raw_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  uint8_t **__pyx_v_table_ptrs;
  std::vector<uint64_t>  __pyx_v_sizes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_raw_tables", 0);

  /* "khmer/_oxli/graphs.pyx":345
 * 
 *     def get_raw_tables(self):
 *         cdef uint8_t ** table_ptrs = deref(self._ht_this).get_raw_tables()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] sizes = deref(self._ht_this).get_tablesizes()
 *         return self._get_raw_tables(table_ptrs, sizes)
 */
  __pyx_v_table_ptrs = (*__pyx_v_self->_ht_this).get_raw_tables();

  /* "khmer/_oxli/graphs.pyx":346
 *     def get_raw_tables(self):
 *         cdef uint8_t ** table_ptrs = deref(self._ht_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._ht_this).get_tablesizes()             # <<<<<<<<<<<<<<
 *         return self._get_raw_tables(table_ptrs, sizes)
 * 
 */
  __pyx_v_sizes = (*__pyx_v_self->_ht_this).get_tablesizes();

  /* "khmer/_oxli/graphs.pyx":347
 *         cdef uint8_t ** table_ptrs = deref(self._ht_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._ht_this).get_tablesizes()
 *         return self._get_raw_tables(table_ptrs, sizes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self->__pyx_vtab)->_get_raw_tables(__pyx_v_self, __pyx_v_table_ptrs, __pyx_v_sizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":344
 *         return views
 * 
 *     def get_raw_tables(self):             # <<<<<<<<<<<<<<
 *         cdef uint8_t ** table_ptrs = deref(self._ht_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._ht_this).get_tablesizes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.get_raw_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_71__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_71__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_70__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_70__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_73__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_73__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_72__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashtable_72__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashtable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":373
 *     """
 * 
 *     def __cinit__(self, int k, uint64_t size):             # <<<<<<<<<<<<<<
 *         # size has to be a power of two
 *         power_of_two = ((size & (size - 1) == 0) and
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(1, 373, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 373, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 373, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 373, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.QFCounttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *)__pyx_v_self), __pyx_v_k, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_size) {
  PyObject *__pyx_v_power_of_two = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  uint64_t __pyx_t_9;
  std::shared_ptr<oxli::QFCounttable>  __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/graphs.pyx":375
 *     def __cinit__(self, int k, uint64_t size):
 *         # size has to be a power of two
 *         power_of_two = ((size & (size - 1) == 0) and             # <<<<<<<<<<<<<<
 *                         (size != 0))
 *         if not power_of_two:
 */
  __pyx_t_2 = ((__pyx_v_size & (__pyx_v_size - 1)) == 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "khmer/_oxli/graphs.pyx":376
 *         # size has to be a power of two
 *         power_of_two = ((size & (size - 1) == 0) and
 *                         (size != 0))             # <<<<<<<<<<<<<<
 *         if not power_of_two:
 *             raise ValueError("size has to be a power of two, not"
 */
  __pyx_t_2 = (__pyx_v_size != 0);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_v_power_of_two = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":377
 *         power_of_two = ((size & (size - 1) == 0) and
 *                         (size != 0))
 *         if not power_of_two:             # <<<<<<<<<<<<<<
 *             raise ValueError("size has to be a power of two, not"
 *                              " {}.".format(size))
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_power_of_two); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 377, __pyx_L1_error)
  __pyx_t_4 = ((!__pyx_t_2) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "khmer/_oxli/graphs.pyx":379
 *         if not power_of_two:
 *             raise ValueError("size has to be a power of two, not"
 *                              " {}.".format(size))             # <<<<<<<<<<<<<<
 *         if type(self) is QFCounttable:
 *             self._qf_this = make_shared[CpQFCounttable](k, <uint64_t>log(size, 2))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_size_has_to_be_a_power_of_two_no, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":378
 *                         (size != 0))
 *         if not power_of_two:
 *             raise ValueError("size has to be a power of two, not"             # <<<<<<<<<<<<<<
 *                              " {}.".format(size))
 *         if type(self) is QFCounttable:
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 378, __pyx_L1_error)

    /* "khmer/_oxli/graphs.pyx":377
 *         power_of_two = ((size & (size - 1) == 0) and
 *                         (size != 0))
 *         if not power_of_two:             # <<<<<<<<<<<<<<
 *             raise ValueError("size has to be a power of two, not"
 *                              " {}.".format(size))
 */
  }

  /* "khmer/_oxli/graphs.pyx":380
 *             raise ValueError("size has to be a power of two, not"
 *                              " {}.".format(size))
 *         if type(self) is QFCounttable:             # <<<<<<<<<<<<<<
 *             self._qf_this = make_shared[CpQFCounttable](k, <uint64_t>log(size, 2))
 *             self._ht_this = <shared_ptr[CpHashtable]>self._qf_this
 */
  __pyx_t_4 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable));
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":381
 *                              " {}.".format(size))
 *         if type(self) is QFCounttable:
 *             self._qf_this = make_shared[CpQFCounttable](k, <uint64_t>log(size, 2))             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._qf_this
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_int_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_int_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_5);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_int_2);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_t_10 = std::make_shared<oxli::QFCounttable>(__pyx_v_k, ((uint64_t)__pyx_t_9));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 381, __pyx_L1_error)
    }
    __pyx_v_self->_qf_this = __pyx_t_10;

    /* "khmer/_oxli/graphs.pyx":382
 *         if type(self) is QFCounttable:
 *             self._qf_this = make_shared[CpQFCounttable](k, <uint64_t>log(size, 2))
 *             self._ht_this = <shared_ptr[CpHashtable]>self._qf_this             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->_qf_this);

    /* "khmer/_oxli/graphs.pyx":380
 *             raise ValueError("size has to be a power of two, not"
 *                              " {}.".format(size))
 *         if type(self) is QFCounttable:             # <<<<<<<<<<<<<<
 *             self._qf_this = make_shared[CpQFCounttable](k, <uint64_t>log(size, 2))
 *             self._ht_this = <shared_ptr[CpHashtable]>self._qf_this
 */
  }

  /* "khmer/_oxli/graphs.pyx":373
 *     """
 * 
 *     def __cinit__(self, int k, uint64_t size):             # <<<<<<<<<<<<<<
 *         # size has to be a power of two
 *         power_of_two = ((size & (size - 1) == 0) and
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("khmer._oxli.graphs.QFCounttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_power_of_two);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":386
 * 
 *     @classmethod
 *     def load(cls, file_name):             # <<<<<<<<<<<<<<
 *         """Load the graph from the specified file."""
 *         cdef QFCounttable table = cls(1, 1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_3load(PyObject *__pyx_v_cls, PyObject *__pyx_v_file_name); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_12QFCounttable_2load[] = "Load the graph from the specified file.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_3load(PyObject *__pyx_v_cls, PyObject *__pyx_v_file_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_2load(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_file_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_2load(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_file_name) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *__pyx_v_table = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "khmer/_oxli/graphs.pyx":388
 *     def load(cls, file_name):
 *         """Load the graph from the specified file."""
 *         cdef QFCounttable table = cls(1, 1)             # <<<<<<<<<<<<<<
 *         deref(table._qf_this).load(_bstring(file_name))
 *         return table
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable))))) __PYX_ERR(1, 388, __pyx_L1_error)
  __pyx_v_table = ((struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":389
 *         """Load the graph from the specified file."""
 *         cdef QFCounttable table = cls(1, 1)
 *         deref(table._qf_this).load(_bstring(file_name))             # <<<<<<<<<<<<<<
 *         return table
 * 
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_file_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    (*__pyx_v_table->_qf_this).load(__pyx_t_2);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 389, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":390
 *         cdef QFCounttable table = cls(1, 1)
 *         deref(table._qf_this).load(_bstring(file_name))
 *         return table             # <<<<<<<<<<<<<<
 * 
 * cdef class Counttable(Hashtable):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_table));
  __pyx_r = ((PyObject *)__pyx_v_table);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":386
 * 
 *     @classmethod
 *     def load(cls, file_name):             # <<<<<<<<<<<<<<
 *         """Load the graph from the specified file."""
 *         cdef QFCounttable table = cls(1, 1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.QFCounttable.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_table);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_4__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.QFCounttable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_6__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_12QFCounttable_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.QFCounttable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":394
 * cdef class Counttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_10Counttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_10Counttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_starting_size;
  int __pyx_v_n_tables;
  PyObject *__pyx_v_primes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_starting_size,&__pyx_n_s_n_tables,&__pyx_n_s_primes,0};
    PyObject* values[4] = {0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":395
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):             # <<<<<<<<<<<<<<
 *         if primes is None:
 *             primes = list()
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_starting_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 394, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 394, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 394, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L3_error)
    __pyx_v_starting_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_starting_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L3_error)
    __pyx_v_n_tables = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_tables == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L3_error)
    __pyx_v_primes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 394, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Counttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_10Counttable___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *)__pyx_v_self), __pyx_v_k, __pyx_v_starting_size, __pyx_v_n_tables, __pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":394
 * cdef class Counttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_10Counttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes) {
  std::vector<uint64_t>  __pyx_v__primes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<uint64_t>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::shared_ptr<oxli::Counttable>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":396
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  __pyx_t_1 = (__pyx_v_primes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":397
 *                   primes=None):
 *         if primes is None:
 *             primes = list()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Counttable:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_primes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":396
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":399
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Counttable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Counttable));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":400
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Counttable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_primes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 400, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "khmer/_oxli/graphs.pyx":401
 *         if type(self) is Counttable:
 *             if primes:
 *                 _primes = primes             # <<<<<<<<<<<<<<
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_v_primes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 401, __pyx_L1_error)
      __pyx_v__primes = __pyx_t_4;

      /* "khmer/_oxli/graphs.pyx":400
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Counttable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/graphs.pyx":403
 *                 _primes = primes
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)             # <<<<<<<<<<<<<<
 *             self._ct_this = make_shared[CpCounttable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._ct_this
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_tables); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_uint64_t(__pyx_v_starting_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 403, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 403, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 403, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v__primes = __pyx_t_4;
    }
    __pyx_L5:;

    /* "khmer/_oxli/graphs.pyx":404
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._ct_this = make_shared[CpCounttable](k, _primes)             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._ct_this
 * 
 */
    try {
      __pyx_t_11 = std::make_shared<oxli::Counttable>(__pyx_v_k, __pyx_v__primes);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 404, __pyx_L1_error)
    }
    __pyx_v_self->_ct_this = __pyx_t_11;

    /* "khmer/_oxli/graphs.pyx":405
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._ct_this = make_shared[CpCounttable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._ct_this             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->_ct_this);

    /* "khmer/_oxli/graphs.pyx":399
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Counttable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":394
 * cdef class Counttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("khmer._oxli.graphs.Counttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Counttable_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Counttable_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_10Counttable_2__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Counttable_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Counttable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Counttable_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Counttable_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_10Counttable_4__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Counttable_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Counttable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":410
 * cdef class CyclicCounttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_starting_size;
  int __pyx_v_n_tables;
  PyObject *__pyx_v_primes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_starting_size,&__pyx_n_s_n_tables,&__pyx_n_s_primes,0};
    PyObject* values[4] = {0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":411
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):             # <<<<<<<<<<<<<<
 *         if primes is None:
 *             primes = list()
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_starting_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 410, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 410, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 410, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 410, __pyx_L3_error)
    __pyx_v_starting_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_starting_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 410, __pyx_L3_error)
    __pyx_v_n_tables = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_tables == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 410, __pyx_L3_error)
    __pyx_v_primes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 410, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.CyclicCounttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *)__pyx_v_self), __pyx_v_k, __pyx_v_starting_size, __pyx_v_n_tables, __pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":410
 * cdef class CyclicCounttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes) {
  std::vector<uint64_t>  __pyx_v__primes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<uint64_t>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::shared_ptr<oxli::CyclicCounttable>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":412
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  __pyx_t_1 = (__pyx_v_primes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":413
 *                   primes=None):
 *         if primes is None:
 *             primes = list()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] _primes
 *         if type(self) is CyclicCounttable:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_primes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":412
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":415
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is CyclicCounttable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_CyclicCounttable));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":416
 *         cdef vector[uint64_t] _primes
 *         if type(self) is CyclicCounttable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_primes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 416, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "khmer/_oxli/graphs.pyx":417
 *         if type(self) is CyclicCounttable:
 *             if primes:
 *                 _primes = primes             # <<<<<<<<<<<<<<
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_v_primes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 417, __pyx_L1_error)
      __pyx_v__primes = __pyx_t_4;

      /* "khmer/_oxli/graphs.pyx":416
 *         cdef vector[uint64_t] _primes
 *         if type(self) is CyclicCounttable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/graphs.pyx":419
 *                 _primes = primes
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)             # <<<<<<<<<<<<<<
 *             self._cct_this = make_shared[CpCyclicCounttable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._cct_this
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_tables); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_uint64_t(__pyx_v_starting_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 419, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 419, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 419, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v__primes = __pyx_t_4;
    }
    __pyx_L5:;

    /* "khmer/_oxli/graphs.pyx":420
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._cct_this = make_shared[CpCyclicCounttable](k, _primes)             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._cct_this
 * 
 */
    try {
      __pyx_t_11 = std::make_shared<oxli::CyclicCounttable>(__pyx_v_k, __pyx_v__primes);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 420, __pyx_L1_error)
    }
    __pyx_v_self->_cct_this = __pyx_t_11;

    /* "khmer/_oxli/graphs.pyx":421
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._cct_this = make_shared[CpCyclicCounttable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._cct_this             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->_cct_this);

    /* "khmer/_oxli/graphs.pyx":415
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is CyclicCounttable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":410
 * cdef class CyclicCounttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("khmer._oxli.graphs.CyclicCounttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable_2__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.CyclicCounttable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable_4__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_16CyclicCounttable_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.CyclicCounttable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":426
 * cdef class SmallCounttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_starting_size;
  int __pyx_v_n_tables;
  PyObject *__pyx_v_primes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_starting_size,&__pyx_n_s_n_tables,&__pyx_n_s_primes,0};
    PyObject* values[4] = {0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":427
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):             # <<<<<<<<<<<<<<
 *         if primes is None:
 *             primes = list()
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_starting_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 426, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 426, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 426, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 426, __pyx_L3_error)
    __pyx_v_starting_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_starting_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 426, __pyx_L3_error)
    __pyx_v_n_tables = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_tables == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 426, __pyx_L3_error)
    __pyx_v_primes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 426, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCounttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *)__pyx_v_self), __pyx_v_k, __pyx_v_starting_size, __pyx_v_n_tables, __pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":426
 * cdef class SmallCounttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes) {
  std::vector<uint64_t>  __pyx_v__primes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<uint64_t>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::shared_ptr<oxli::SmallCounttable>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":428
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  __pyx_t_1 = (__pyx_v_primes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":429
 *                   primes=None):
 *         if primes is None:
 *             primes = list()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCounttable:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_primes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":428
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":431
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCounttable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCounttable));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":432
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCounttable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_primes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 432, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "khmer/_oxli/graphs.pyx":433
 *         if type(self) is SmallCounttable:
 *             if primes:
 *                 _primes = primes             # <<<<<<<<<<<<<<
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_v_primes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 433, __pyx_L1_error)
      __pyx_v__primes = __pyx_t_4;

      /* "khmer/_oxli/graphs.pyx":432
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCounttable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/graphs.pyx":435
 *                 _primes = primes
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)             # <<<<<<<<<<<<<<
 *             self._st_this = make_shared[CpSmallCounttable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._st_this
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_tables); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_uint64_t(__pyx_v_starting_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 435, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 435, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 435, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v__primes = __pyx_t_4;
    }
    __pyx_L5:;

    /* "khmer/_oxli/graphs.pyx":436
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._st_this = make_shared[CpSmallCounttable](k, _primes)             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._st_this
 * 
 */
    try {
      __pyx_t_11 = std::make_shared<oxli::SmallCounttable>(__pyx_v_k, __pyx_v__primes);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 436, __pyx_L1_error)
    }
    __pyx_v_self->_st_this = __pyx_t_11;

    /* "khmer/_oxli/graphs.pyx":437
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._st_this = make_shared[CpSmallCounttable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._st_this             # <<<<<<<<<<<<<<
 * 
 *     def get_raw_tables(self):
 */
    __pyx_v_self->__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->_st_this);

    /* "khmer/_oxli/graphs.pyx":431
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCounttable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":426
 * cdef class SmallCounttable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCounttable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":439
 *             self._ht_this = <shared_ptr[CpHashtable]>self._st_this
 * 
 *     def get_raw_tables(self):             # <<<<<<<<<<<<<<
 *         cdef uint8_t ** table_ptrs = deref(self._st_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._st_this).get_tablesizes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_3get_raw_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_3get_raw_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_tables (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_2get_raw_tables(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_2get_raw_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self) {
  uint8_t **__pyx_v_table_ptrs;
  std::vector<uint64_t>  __pyx_v_sizes;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_raw_tables", 0);

  /* "khmer/_oxli/graphs.pyx":440
 * 
 *     def get_raw_tables(self):
 *         cdef uint8_t ** table_ptrs = deref(self._st_this).get_raw_tables()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] sizes = deref(self._st_this).get_tablesizes()
 *         for i in range(len(sizes)):
 */
  __pyx_v_table_ptrs = (*__pyx_v_self->_st_this).get_raw_tables();

  /* "khmer/_oxli/graphs.pyx":441
 *     def get_raw_tables(self):
 *         cdef uint8_t ** table_ptrs = deref(self._st_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._st_this).get_tablesizes()             # <<<<<<<<<<<<<<
 *         for i in range(len(sizes)):
 *             sizes[i] = (sizes[i] // 2) + 1
 */
  __pyx_v_sizes = (*__pyx_v_self->_st_this).get_tablesizes();

  /* "khmer/_oxli/graphs.pyx":442
 *         cdef uint8_t ** table_ptrs = deref(self._st_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._st_this).get_tablesizes()
 *         for i in range(len(sizes)):             # <<<<<<<<<<<<<<
 *             sizes[i] = (sizes[i] // 2) + 1
 *         return self._get_raw_tables(table_ptrs, sizes)
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_uint64_t(__pyx_v_sizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":443
 *         cdef vector[uint64_t] sizes = deref(self._st_this).get_tablesizes()
 *         for i in range(len(sizes)):
 *             sizes[i] = (sizes[i] // 2) + 1             # <<<<<<<<<<<<<<
 *         return self._get_raw_tables(table_ptrs, sizes)
 * 
 */
    (__pyx_v_sizes[__pyx_v_i]) = (((__pyx_v_sizes[__pyx_v_i]) / 2) + 1);
  }

  /* "khmer/_oxli/graphs.pyx":444
 *         for i in range(len(sizes)):
 *             sizes[i] = (sizes[i] // 2) + 1
 *         return self._get_raw_tables(table_ptrs, sizes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCounttable *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._get_raw_tables(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_table_ptrs, __pyx_v_sizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":439
 *             self._ht_this = <shared_ptr[CpHashtable]>self._st_this
 * 
 *     def get_raw_tables(self):             # <<<<<<<<<<<<<<
 *         cdef uint8_t ** table_ptrs = deref(self._st_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._st_this).get_tablesizes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCounttable.get_raw_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_4__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCounttable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_6__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCounttable_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCounttable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":449
 * cdef class Nodetable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_starting_size;
  int __pyx_v_n_tables;
  PyObject *__pyx_v_primes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_starting_size,&__pyx_n_s_n_tables,&__pyx_n_s_primes,0};
    PyObject* values[4] = {0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":450
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):             # <<<<<<<<<<<<<<
 *         if primes is None:
 *             primes = list()
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_starting_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 449, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L3_error)
    __pyx_v_starting_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_starting_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L3_error)
    __pyx_v_n_tables = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_tables == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L3_error)
    __pyx_v_primes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 449, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodetable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Nodetable___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *)__pyx_v_self), __pyx_v_k, __pyx_v_starting_size, __pyx_v_n_tables, __pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":449
 * cdef class Nodetable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_9Nodetable___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes) {
  std::vector<uint64_t>  __pyx_v__primes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<uint64_t>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::shared_ptr<oxli::Nodetable>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":451
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  __pyx_t_1 = (__pyx_v_primes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":452
 *                   primes=None):
 *         if primes is None:
 *             primes = list()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodetable:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_primes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":451
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":454
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodetable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodetable));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":455
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodetable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_primes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 455, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "khmer/_oxli/graphs.pyx":456
 *         if type(self) is Nodetable:
 *             if primes:
 *                 _primes = primes             # <<<<<<<<<<<<<<
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_v_primes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 456, __pyx_L1_error)
      __pyx_v__primes = __pyx_t_4;

      /* "khmer/_oxli/graphs.pyx":455
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodetable:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/graphs.pyx":458
 *                 _primes = primes
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)             # <<<<<<<<<<<<<<
 *             self._nt_this = make_shared[CpNodetable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._nt_this
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_tables); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_uint64_t(__pyx_v_starting_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 458, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 458, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 458, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v__primes = __pyx_t_4;
    }
    __pyx_L5:;

    /* "khmer/_oxli/graphs.pyx":459
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._nt_this = make_shared[CpNodetable](k, _primes)             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._nt_this
 * 
 */
    try {
      __pyx_t_11 = std::make_shared<oxli::Nodetable>(__pyx_v_k, __pyx_v__primes);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 459, __pyx_L1_error)
    }
    __pyx_v_self->_nt_this = __pyx_t_11;

    /* "khmer/_oxli/graphs.pyx":460
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._nt_this = make_shared[CpNodetable](k, _primes)
 *             self._ht_this = <shared_ptr[CpHashtable]>self._nt_this             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->_nt_this);

    /* "khmer/_oxli/graphs.pyx":454
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodetable:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":449
 * cdef class Nodetable(Hashtable):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodetable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Nodetable_2__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodetable_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodetable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Nodetable_4__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodetable_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodetable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":465
 * cdef class Hashgraph(Hashtable):
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.partitions = None
 * 
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/graphs.pyx":466
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.partitions = None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->partitions);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->partitions));
  __pyx_v_self->partitions = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)Py_None);

  /* "khmer/_oxli/graphs.pyx":465
 * cdef class Hashgraph(Hashtable):
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.partitions = None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":469
 * 
 *     @property
 *     def partition(self):             # <<<<<<<<<<<<<<
 *         if self.partitions is None:
 *             self.partitions = SubsetPartition(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_9partition_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_9partition_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_9partition___get__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_9partition___get__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<oxli::SubsetPartition>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/graphs.pyx":470
 *     @property
 *     def partition(self):
 *         if self.partitions is None:             # <<<<<<<<<<<<<<
 *             self.partitions = SubsetPartition(self)
 *             self.partitions._this = deref(self._hg_this).partition
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->partitions) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":471
 *     def partition(self):
 *         if self.partitions is None:
 *             self.partitions = SubsetPartition(self)             # <<<<<<<<<<<<<<
 *             self.partitions._this = deref(self._hg_this).partition
 *             self.partitions_ptr = self.partitions._this
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->partitions);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->partitions));
    __pyx_v_self->partitions = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":472
 *         if self.partitions is None:
 *             self.partitions = SubsetPartition(self)
 *             self.partitions._this = deref(self._hg_this).partition             # <<<<<<<<<<<<<<
 *             self.partitions_ptr = self.partitions._this
 *         return self.partitions
 */
    __pyx_t_4 = (*__pyx_v_self->_hg_this).partition;
    __pyx_v_self->partitions->_this = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":473
 *             self.partitions = SubsetPartition(self)
 *             self.partitions._this = deref(self._hg_this).partition
 *             self.partitions_ptr = self.partitions._this             # <<<<<<<<<<<<<<
 *         return self.partitions
 * 
 */
    __pyx_t_4 = __pyx_v_self->partitions->_this;
    __pyx_v_self->partitions_ptr = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":470
 *     @property
 *     def partition(self):
 *         if self.partitions is None:             # <<<<<<<<<<<<<<
 *             self.partitions = SubsetPartition(self)
 *             self.partitions._this = deref(self._hg_this).partition
 */
  }

  /* "khmer/_oxli/graphs.pyx":474
 *             self.partitions._this = deref(self._hg_this).partition
 *             self.partitions_ptr = self.partitions._this
 *         return self.partitions             # <<<<<<<<<<<<<<
 * 
 *     def neighbors(self, object kmer):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->partitions));
  __pyx_r = ((PyObject *)__pyx_v_self->partitions);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":469
 * 
 *     @property
 *     def partition(self):             # <<<<<<<<<<<<<<
 *         if self.partitions is None:
 *             self.partitions = SubsetPartition(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.partition.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":476
 *         return self.partitions
 * 
 *     def neighbors(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Get a list of neighbor nodes for this k-mer.'''
 *         cdef Traverser traverser = Traverser(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_3neighbors(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_2neighbors[] = "Get a list of neighbor nodes for this k-mer.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_3neighbors(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("neighbors (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_2neighbors(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_2neighbors(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer) {
  struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser *__pyx_v_traverser = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  oxli::Kmer __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("neighbors", 0);

  /* "khmer/_oxli/graphs.pyx":478
 *     def neighbors(self, object kmer):
 *         '''Get a list of neighbor nodes for this k-mer.'''
 *         cdef Traverser traverser = Traverser(self)             # <<<<<<<<<<<<<<
 *         return list(traverser._neighbors(self._build_kmer(kmer)))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_9traversal_Traverser), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_traverser = ((struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":479
 *         '''Get a list of neighbor nodes for this k-mer.'''
 *         cdef Traverser traverser = Traverser(self)
 *         return list(traverser._neighbors(self._build_kmer(kmer)))             # <<<<<<<<<<<<<<
 * 
 *     def calc_connected_graph_size(self, object kmer, max_size=0,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._build_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 479, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_9traversal_Traverser *)__pyx_v_traverser->__pyx_vtab)->_neighbors(__pyx_v_traverser, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":476
 *         return self.partitions
 * 
 *     def neighbors(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Get a list of neighbor nodes for this k-mer.'''
 *         cdef Traverser traverser = Traverser(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.neighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_traverser);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":481
 *         return list(traverser._neighbors(self._build_kmer(kmer)))
 * 
 *     def calc_connected_graph_size(self, object kmer, max_size=0,             # <<<<<<<<<<<<<<
 *                                   break_on_circumference=False):
 *         '''Find the number of nodes connected to this k-mer.'''
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_5calc_connected_graph_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_4calc_connected_graph_size[] = "Find the number of nodes connected to this k-mer.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_5calc_connected_graph_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kmer = 0;
  PyObject *__pyx_v_max_size = 0;
  PyObject *__pyx_v_break_on_circumference = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_connected_graph_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kmer,&__pyx_n_s_max_size,&__pyx_n_s_break_on_circumference,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);

    /* "khmer/_oxli/graphs.pyx":482
 * 
 *     def calc_connected_graph_size(self, object kmer, max_size=0,
 *                                   break_on_circumference=False):             # <<<<<<<<<<<<<<
 *         '''Find the number of nodes connected to this k-mer.'''
 *         cdef CpKmer _kmer = self._build_kmer(_bstring(kmer))
 */
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kmer)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_size);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_break_on_circumference);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_connected_graph_size") < 0)) __PYX_ERR(1, 481, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kmer = values[0];
    __pyx_v_max_size = values[1];
    __pyx_v_break_on_circumference = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_connected_graph_size", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.calc_connected_graph_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_4calc_connected_graph_size(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_kmer, __pyx_v_max_size, __pyx_v_break_on_circumference);

  /* "khmer/_oxli/graphs.pyx":481
 *         return list(traverser._neighbors(self._build_kmer(kmer)))
 * 
 *     def calc_connected_graph_size(self, object kmer, max_size=0,             # <<<<<<<<<<<<<<
 *                                   break_on_circumference=False):
 *         '''Find the number of nodes connected to this k-mer.'''
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_4calc_connected_graph_size(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, PyObject *__pyx_v_max_size, PyObject *__pyx_v_break_on_circumference) {
  oxli::Kmer __pyx_v__kmer;
  unsigned PY_LONG_LONG __pyx_v__size;
  uint64_t __pyx_v__max_size;
  bool __pyx_v__break;
  oxli::KmerSet __pyx_v_keeper;
  oxli::Hashgraph *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  oxli::Kmer __pyx_t_2;
  uint64_t __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calc_connected_graph_size", 0);

  /* "khmer/_oxli/graphs.pyx":484
 *                                   break_on_circumference=False):
 *         '''Find the number of nodes connected to this k-mer.'''
 *         cdef CpKmer _kmer = self._build_kmer(_bstring(kmer))             # <<<<<<<<<<<<<<
 *         cdef unsigned long long _size = 0
 *         cdef uint64_t _max_size = max_size
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_kmer); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._build_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__kmer = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":485
 *         '''Find the number of nodes connected to this k-mer.'''
 *         cdef CpKmer _kmer = self._build_kmer(_bstring(kmer))
 *         cdef unsigned long long _size = 0             # <<<<<<<<<<<<<<
 *         cdef uint64_t _max_size = max_size
 *         cdef bool _break = break_on_circumference
 */
  __pyx_v__size = 0;

  /* "khmer/_oxli/graphs.pyx":486
 *         cdef CpKmer _kmer = self._build_kmer(_bstring(kmer))
 *         cdef unsigned long long _size = 0
 *         cdef uint64_t _max_size = max_size             # <<<<<<<<<<<<<<
 *         cdef bool _break = break_on_circumference
 *         cdef KmerSet keeper
 */
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_max_size); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 486, __pyx_L1_error)
  __pyx_v__max_size = __pyx_t_3;

  /* "khmer/_oxli/graphs.pyx":487
 *         cdef unsigned long long _size = 0
 *         cdef uint64_t _max_size = max_size
 *         cdef bool _break = break_on_circumference             # <<<<<<<<<<<<<<
 *         cdef KmerSet keeper
 *         cdef CpHashgraph * ptr = self._hg_this.get() # need tmp ref for nogil
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_break_on_circumference); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 487, __pyx_L1_error)
  __pyx_v__break = __pyx_t_4;

  /* "khmer/_oxli/graphs.pyx":489
 *         cdef bool _break = break_on_circumference
 *         cdef KmerSet keeper
 *         cdef CpHashgraph * ptr = self._hg_this.get() # need tmp ref for nogil             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_v_ptr = __pyx_v_self->_hg_this.get();

  /* "khmer/_oxli/graphs.pyx":491
 *         cdef CpHashgraph * ptr = self._hg_this.get() # need tmp ref for nogil
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(ptr).calc_connected_graph_size(_kmer, _size,
 *                                                  keeper, _max_size,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":492
 * 
 *         with nogil:
 *             deref(ptr).calc_connected_graph_size(_kmer, _size,             # <<<<<<<<<<<<<<
 *                                                  keeper, _max_size,
 *                                                  _break)
 */
        (*__pyx_v_ptr).calc_connected_graph_size(__pyx_v__kmer, __pyx_v__size, __pyx_v_keeper, __pyx_v__max_size, __pyx_v__break);
      }

      /* "khmer/_oxli/graphs.pyx":491
 *         cdef CpHashgraph * ptr = self._hg_this.get() # need tmp ref for nogil
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(ptr).calc_connected_graph_size(_kmer, _size,
 *                                                  keeper, _max_size,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":495
 *                                                  keeper, _max_size,
 *                                                  _break)
 *         return _size             # <<<<<<<<<<<<<<
 * 
 *     def kmer_degree(self, object kmer):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v__size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":481
 *         return list(traverser._neighbors(self._build_kmer(kmer)))
 * 
 *     def calc_connected_graph_size(self, object kmer, max_size=0,             # <<<<<<<<<<<<<<
 *                                   break_on_circumference=False):
 *         '''Find the number of nodes connected to this k-mer.'''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.calc_connected_graph_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":497
 *         return _size
 * 
 *     def kmer_degree(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Calculate the number of immediate neighbors this k-mer has
 *         the graph.'''
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_7kmer_degree(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_6kmer_degree[] = "Calculate the number of immediate neighbors this k-mer has\n        the graph.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_7kmer_degree(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kmer_degree (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_6kmer_degree(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_6kmer_degree(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_v__kmer = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kmer_degree", 0);

  /* "khmer/_oxli/graphs.pyx":500
 *         '''Calculate the number of immediate neighbors this k-mer has
 *         the graph.'''
 *         cdef bytes _kmer = self.sanitize_kmer(kmer)             # <<<<<<<<<<<<<<
 *         return deref(self._hg_this).kmer_degree(_kmer)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.sanitize_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__kmer = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":501
 *         the graph.'''
 *         cdef bytes _kmer = self.sanitize_kmer(kmer)
 *         return deref(self._hg_this).kmer_degree(_kmer)             # <<<<<<<<<<<<<<
 * 
 *     def count_kmers_within_radius(self, object kmer, int radius, int max_count=0):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v__kmer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 501, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v__kmer); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 501, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t((*__pyx_v_self->_hg_this).kmer_degree(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":497
 *         return _size
 * 
 *     def kmer_degree(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Calculate the number of immediate neighbors this k-mer has
 *         the graph.'''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.kmer_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__kmer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":503
 *         return deref(self._hg_this).kmer_degree(_kmer)
 * 
 *     def count_kmers_within_radius(self, object kmer, int radius, int max_count=0):             # <<<<<<<<<<<<<<
 *         '''Calculate the number of neighbors with given radius in the graph.'''
 *         cdef unsigned int n
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_9count_kmers_within_radius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_8count_kmers_within_radius[] = "Calculate the number of neighbors with given radius in the graph.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_9count_kmers_within_radius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kmer = 0;
  int __pyx_v_radius;
  int __pyx_v_max_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_kmers_within_radius (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kmer,&__pyx_n_s_radius,&__pyx_n_s_max_count,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kmer)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("count_kmers_within_radius", 0, 2, 3, 1); __PYX_ERR(1, 503, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_count);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count_kmers_within_radius") < 0)) __PYX_ERR(1, 503, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kmer = values[0];
    __pyx_v_radius = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_radius == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 503, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_max_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 503, __pyx_L3_error)
    } else {
      __pyx_v_max_count = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_kmers_within_radius", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 503, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.count_kmers_within_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_8count_kmers_within_radius(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_kmer, __pyx_v_radius, __pyx_v_max_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_8count_kmers_within_radius(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, int __pyx_v_radius, int __pyx_v_max_count) {
  unsigned int __pyx_v_n;
  uint32_t __pyx_v__radius;
  uint32_t __pyx_v__max_count;
  oxli::Kmer __pyx_v__kmer;
  oxli::KmerSet __pyx_v_seen;
  oxli::Hashgraph *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::Kmer __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_kmers_within_radius", 0);

  /* "khmer/_oxli/graphs.pyx":506
 *         '''Calculate the number of neighbors with given radius in the graph.'''
 *         cdef unsigned int n
 *         cdef uint32_t _radius = radius             # <<<<<<<<<<<<<<
 *         cdef uint32_t _max_count = max_count
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 */
  __pyx_v__radius = __pyx_v_radius;

  /* "khmer/_oxli/graphs.pyx":507
 *         cdef unsigned int n
 *         cdef uint32_t _radius = radius
 *         cdef uint32_t _max_count = max_count             # <<<<<<<<<<<<<<
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef KmerSet seen
 */
  __pyx_v__max_count = __pyx_v_max_count;

  /* "khmer/_oxli/graphs.pyx":508
 *         cdef uint32_t _radius = radius
 *         cdef uint32_t _max_count = max_count
 *         cdef CpKmer _kmer = self._build_kmer(kmer)             # <<<<<<<<<<<<<<
 *         cdef KmerSet seen
 *         cdef CpHashgraph * ptr = self._hg_this.get()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._build_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 508, __pyx_L1_error)
  __pyx_v__kmer = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":510
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef KmerSet seen
 *         cdef CpHashgraph * ptr = self._hg_this.get()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             n = deref(ptr).traverse_from_kmer(_kmer, _radius,
 */
  __pyx_v_ptr = __pyx_v_self->_hg_this.get();

  /* "khmer/_oxli/graphs.pyx":511
 *         cdef KmerSet seen
 *         cdef CpHashgraph * ptr = self._hg_this.get()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             n = deref(ptr).traverse_from_kmer(_kmer, _radius,
 *                                               seen, _max_count)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":512
 *         cdef CpHashgraph * ptr = self._hg_this.get()
 *         with nogil:
 *             n = deref(ptr).traverse_from_kmer(_kmer, _radius,             # <<<<<<<<<<<<<<
 *                                               seen, _max_count)
 *         return n
 */
        __pyx_v_n = (*__pyx_v_ptr).traverse_from_kmer(__pyx_v__kmer, __pyx_v__radius, __pyx_v_seen, __pyx_v__max_count);
      }

      /* "khmer/_oxli/graphs.pyx":511
 *         cdef KmerSet seen
 *         cdef CpHashgraph * ptr = self._hg_this.get()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             n = deref(ptr).traverse_from_kmer(_kmer, _radius,
 *                                               seen, _max_count)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":514
 *             n = deref(ptr).traverse_from_kmer(_kmer, _radius,
 *                                               seen, _max_count)
 *         return n             # <<<<<<<<<<<<<<
 * 
 *     def find_high_degree_nodes(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":503
 *         return deref(self._hg_this).kmer_degree(_kmer)
 * 
 *     def count_kmers_within_radius(self, object kmer, int radius, int max_count=0):             # <<<<<<<<<<<<<<
 *         '''Calculate the number of neighbors with given radius in the graph.'''
 *         cdef unsigned int n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.count_kmers_within_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":516
 *         return n
 * 
 *     def find_high_degree_nodes(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Examine the given sequence for degree > 2 nodes and add to
 *         list; used in graph contraction.'''
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11find_high_degree_nodes(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_10find_high_degree_nodes[] = "Examine the given sequence for degree > 2 nodes and add to\n        list; used in graph contraction.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11find_high_degree_nodes(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_high_degree_nodes (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 516, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_10find_high_degree_nodes(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_10find_high_degree_nodes(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence) {
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_hdns = 0;
  PyObject *__pyx_v__sequence = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_high_degree_nodes", 0);

  /* "khmer/_oxli/graphs.pyx":519
 *         '''Examine the given sequence for degree > 2 nodes and add to
 *         list; used in graph contraction.'''
 *         cdef HashSet hdns = HashSet(self.ksize())             # <<<<<<<<<<<<<<
 *         _sequence = self._valid_sequence(sequence)
 *         deref(self._hg_this).find_high_degree_nodes(_sequence,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashset_HashSet), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hdns = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":520
 *         list; used in graph contraction.'''
 *         cdef HashSet hdns = HashSet(self.ksize())
 *         _sequence = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         deref(self._hg_this).find_high_degree_nodes(_sequence,
 *                                                     hdns.hs)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._valid_sequence(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__sequence = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":521
 *         cdef HashSet hdns = HashSet(self.ksize())
 *         _sequence = self._valid_sequence(sequence)
 *         deref(self._hg_this).find_high_degree_nodes(_sequence,             # <<<<<<<<<<<<<<
 *                                                     hdns.hs)
 *         return hdns
 */
  if (unlikely(__pyx_v__sequence == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 521, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v__sequence); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 521, __pyx_L1_error)

  /* "khmer/_oxli/graphs.pyx":522
 *         _sequence = self._valid_sequence(sequence)
 *         deref(self._hg_this).find_high_degree_nodes(_sequence,
 *                                                     hdns.hs)             # <<<<<<<<<<<<<<
 *         return hdns
 * 
 */
  (*__pyx_v_self->_hg_this).find_high_degree_nodes(__pyx_t_4, __pyx_v_hdns->hs);

  /* "khmer/_oxli/graphs.pyx":523
 *         deref(self._hg_this).find_high_degree_nodes(_sequence,
 *                                                     hdns.hs)
 *         return hdns             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_hdns));
  __pyx_r = ((PyObject *)__pyx_v_hdns);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":516
 *         return n
 * 
 *     def find_high_degree_nodes(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Examine the given sequence for degree > 2 nodes and add to
 *         list; used in graph contraction.'''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.find_high_degree_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_hdns);
  __Pyx_XDECREF(__pyx_v__sequence);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":526
 * 
 * 
 *     def traverse_linear_path(self, object kmer, HashSet hdns,             # <<<<<<<<<<<<<<
 *                              Nodegraph stop_filter=None):
 *         '''Traverse the path through the graph starting with the given
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_13traverse_linear_path(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_12traverse_linear_path[] = "Traverse the path through the graph starting with the given\n        k-mer and avoiding high-degree nodes, finding (and returning)\n        traversed k-mers and any encountered high-degree nodes.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_13traverse_linear_path(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kmer = 0;
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_hdns = 0;
  struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_stop_filter = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("traverse_linear_path (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kmer,&__pyx_n_s_hdns,&__pyx_n_s_stop_filter,0};
    PyObject* values[3] = {0,0,0};

    /* "khmer/_oxli/graphs.pyx":527
 * 
 *     def traverse_linear_path(self, object kmer, HashSet hdns,
 *                              Nodegraph stop_filter=None):             # <<<<<<<<<<<<<<
 *         '''Traverse the path through the graph starting with the given
 *         k-mer and avoiding high-degree nodes, finding (and returning)
 */
    values[2] = (PyObject *)((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kmer)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hdns)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("traverse_linear_path", 0, 2, 3, 1); __PYX_ERR(1, 526, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop_filter);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "traverse_linear_path") < 0)) __PYX_ERR(1, 526, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kmer = values[0];
    __pyx_v_hdns = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)values[1]);
    __pyx_v_stop_filter = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("traverse_linear_path", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 526, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.traverse_linear_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hdns), __pyx_ptype_5khmer_5_oxli_7hashset_HashSet, 1, "hdns", 0))) __PYX_ERR(1, 526, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stop_filter), __pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph, 1, "stop_filter", 0))) __PYX_ERR(1, 527, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_12traverse_linear_path(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_kmer, __pyx_v_hdns, __pyx_v_stop_filter);

  /* "khmer/_oxli/graphs.pyx":526
 * 
 * 
 *     def traverse_linear_path(self, object kmer, HashSet hdns,             # <<<<<<<<<<<<<<
 *                              Nodegraph stop_filter=None):
 *         '''Traverse the path through the graph starting with the given
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_12traverse_linear_path(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_hdns, struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_stop_filter) {
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_adj = 0;
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_visited = 0;
  oxli::Kmer __pyx_v__kmer;
  oxli::Nodegraph *__pyx_v__stop_filter;
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  oxli::Kmer __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("traverse_linear_path", 0);

  /* "khmer/_oxli/graphs.pyx":531
 *         k-mer and avoiding high-degree nodes, finding (and returning)
 *         traversed k-mers and any encountered high-degree nodes.'''
 *         cdef HashSet adj = HashSet(self.ksize())             # <<<<<<<<<<<<<<
 *         cdef HashSet visited = HashSet(self.ksize())
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashset_HashSet), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_adj = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":532
 *         traversed k-mers and any encountered high-degree nodes.'''
 *         cdef HashSet adj = HashSet(self.ksize())
 *         cdef HashSet visited = HashSet(self.ksize())             # <<<<<<<<<<<<<<
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef CpNodegraph * _stop_filter = stop_filter._ng_this.get()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashset_HashSet), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_visited = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":533
 *         cdef HashSet adj = HashSet(self.ksize())
 *         cdef HashSet visited = HashSet(self.ksize())
 *         cdef CpKmer _kmer = self._build_kmer(kmer)             # <<<<<<<<<<<<<<
 *         cdef CpNodegraph * _stop_filter = stop_filter._ng_this.get()
 *         cdef int size = deref(self._hg_this).traverse_linear_path(_kmer,
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._build_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 533, __pyx_L1_error)
  __pyx_v__kmer = __pyx_t_4;

  /* "khmer/_oxli/graphs.pyx":534
 *         cdef HashSet visited = HashSet(self.ksize())
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef CpNodegraph * _stop_filter = stop_filter._ng_this.get()             # <<<<<<<<<<<<<<
 *         cdef int size = deref(self._hg_this).traverse_linear_path(_kmer,
 *                                                                  adj.hs,
 */
  __pyx_v__stop_filter = __pyx_v_stop_filter->_ng_this.get();

  /* "khmer/_oxli/graphs.pyx":535
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef CpNodegraph * _stop_filter = stop_filter._ng_this.get()
 *         cdef int size = deref(self._hg_this).traverse_linear_path(_kmer,             # <<<<<<<<<<<<<<
 *                                                                  adj.hs,
 *                                                                  visited.hs,
 */
  __pyx_v_size = (*__pyx_v_self->_hg_this).traverse_linear_path(__pyx_v__kmer, __pyx_v_adj->hs, __pyx_v_visited->hs, (*__pyx_v__stop_filter), __pyx_v_hdns->hs);

  /* "khmer/_oxli/graphs.pyx":540
 *                                                                  deref(_stop_filter),
 *                                                                  hdns.hs)
 *         return size, adj, visited             # <<<<<<<<<<<<<<
 * 
 *     def extract_unique_paths(self, str sequence, unsigned int min_length, float
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_adj));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_adj));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_adj));
  __Pyx_INCREF(((PyObject *)__pyx_v_visited));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_visited));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_visited));
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":526
 * 
 * 
 *     def traverse_linear_path(self, object kmer, HashSet hdns,             # <<<<<<<<<<<<<<
 *                              Nodegraph stop_filter=None):
 *         '''Traverse the path through the graph starting with the given
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.traverse_linear_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_adj);
  __Pyx_XDECREF((PyObject *)__pyx_v_visited);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":542
 *         return size, adj, visited
 * 
 *     def extract_unique_paths(self, str sequence, unsigned int min_length, float             # <<<<<<<<<<<<<<
 *                              min_unique_f):
 *         cdef vector[string] results
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_15extract_unique_paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_15extract_unique_paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sequence = 0;
  unsigned int __pyx_v_min_length;
  float __pyx_v_min_unique_f;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_unique_paths (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sequence,&__pyx_n_s_min_length,&__pyx_n_s_min_unique_f,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sequence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_unique_paths", 1, 3, 3, 1); __PYX_ERR(1, 542, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_unique_f)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_unique_paths", 1, 3, 3, 2); __PYX_ERR(1, 542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "extract_unique_paths") < 0)) __PYX_ERR(1, 542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sequence = ((PyObject*)values[0]);
    __pyx_v_min_length = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_min_length == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 542, __pyx_L3_error)
    __pyx_v_min_unique_f = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_min_unique_f == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 542, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_unique_paths", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.extract_unique_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 542, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_14extract_unique_paths(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_sequence, __pyx_v_min_length, __pyx_v_min_unique_f);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_14extract_unique_paths(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence, unsigned int __pyx_v_min_length, float __pyx_v_min_unique_f) {
  std::vector<std::string>  __pyx_v_results;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_unique_paths", 0);

  /* "khmer/_oxli/graphs.pyx":545
 *                              min_unique_f):
 *         cdef vector[string] results
 *         deref(self._hg_this).extract_unique_paths(_bstring(sequence), min_length,             # <<<<<<<<<<<<<<
 *                                                   min_unique_f, results)
 *         return results
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":546
 *         cdef vector[string] results
 *         deref(self._hg_this).extract_unique_paths(_bstring(sequence), min_length,
 *                                                   min_unique_f, results)             # <<<<<<<<<<<<<<
 *         return results
 * 
 */
  (*__pyx_v_self->_hg_this).extract_unique_paths(__pyx_t_2, __pyx_v_min_length, __pyx_v_min_unique_f, __pyx_v_results);

  /* "khmer/_oxli/graphs.pyx":547
 *         deref(self._hg_this).extract_unique_paths(_bstring(sequence), min_length,
 *                                                   min_unique_f, results)
 *         return results             # <<<<<<<<<<<<<<
 * 
 *     def consume_and_tag(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_results); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":542
 *         return size, adj, visited
 * 
 *     def extract_unique_paths(self, str sequence, unsigned int min_length, float             # <<<<<<<<<<<<<<
 *                              min_unique_f):
 *         cdef vector[string] results
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.extract_unique_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":549
 *         return results
 * 
 *     def consume_and_tag(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Consume a sequence and tag it.'''
 *         cdef unsigned long long n_consumed = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_17consume_and_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_16consume_and_tag[] = "Consume a sequence and tag it.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_17consume_and_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume_and_tag (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 549, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_16consume_and_tag(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_16consume_and_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence) {
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume_and_tag", 0);

  /* "khmer/_oxli/graphs.pyx":551
 *     def consume_and_tag(self, str sequence):
 *         '''Consume a sequence and tag it.'''
 *         cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *         deref(self._hg_this).consume_sequence_and_tag(_bstring(sequence),
 *                                                      n_consumed)
 */
  __pyx_v_n_consumed = 0;

  /* "khmer/_oxli/graphs.pyx":552
 *         '''Consume a sequence and tag it.'''
 *         cdef unsigned long long n_consumed = 0
 *         deref(self._hg_this).consume_sequence_and_tag(_bstring(sequence),             # <<<<<<<<<<<<<<
 *                                                      n_consumed)
 *         return n_consumed
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":553
 *         cdef unsigned long long n_consumed = 0
 *         deref(self._hg_this).consume_sequence_and_tag(_bstring(sequence),
 *                                                      n_consumed)             # <<<<<<<<<<<<<<
 *         return n_consumed
 * 
 */
  (*__pyx_v_self->_hg_this).consume_sequence_and_tag(__pyx_t_2, __pyx_v_n_consumed);

  /* "khmer/_oxli/graphs.pyx":554
 *         deref(self._hg_this).consume_sequence_and_tag(_bstring(sequence),
 *                                                      n_consumed)
 *         return n_consumed             # <<<<<<<<<<<<<<
 * 
 *     def get_tags_and_positions(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_n_consumed); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":549
 *         return results
 * 
 *     def consume_and_tag(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Consume a sequence and tag it.'''
 *         cdef unsigned long long n_consumed = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.consume_and_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":556
 *         return n_consumed
 * 
 *     def get_tags_and_positions(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Retrieve tags and their positions in a sequence.'''
 *         cdef list result = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_19get_tags_and_positions(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_18get_tags_and_positions[] = "Retrieve tags and their positions in a sequence.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_19get_tags_and_positions(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tags_and_positions (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 556, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_18get_tags_and_positions(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_18get_tags_and_positions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence) {
  PyObject *__pyx_v_result = 0;
  int __pyx_v_pos;
  oxli::WordLength __pyx_v_K;
  oxli::HashIntoType __pyx_v_kmer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  oxli::HashIntoType __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tags_and_positions", 0);

  /* "khmer/_oxli/graphs.pyx":558
 *     def get_tags_and_positions(self, str sequence):
 *         '''Retrieve tags and their positions in a sequence.'''
 *         cdef list result = []             # <<<<<<<<<<<<<<
 *         cdef int pos
 *         cdef WordLength K = deref(self._hg_this).ksize()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":560
 *         cdef list result = []
 *         cdef int pos
 *         cdef WordLength K = deref(self._hg_this).ksize()             # <<<<<<<<<<<<<<
 *         cdef HashIntoType kmer
 *         for pos in range(0, len(sequence)-K+1):
 */
  __pyx_v_K = (*__pyx_v_self->_hg_this).ksize();

  /* "khmer/_oxli/graphs.pyx":562
 *         cdef WordLength K = deref(self._hg_this).ksize()
 *         cdef HashIntoType kmer
 *         for pos in range(0, len(sequence)-K+1):             # <<<<<<<<<<<<<<
 *             kmer = deref(self._hg_this).hash_dna(_bstring(sequence[pos:pos+K]))
 *             if deref(self._hg_this).has_tag(kmer):
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_sequence); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 562, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 - __pyx_v_K) + 1);
  __pyx_t_2 = __pyx_t_3;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
    __pyx_v_pos = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":563
 *         cdef HashIntoType kmer
 *         for pos in range(0, len(sequence)-K+1):
 *             kmer = deref(self._hg_this).hash_dna(_bstring(sequence[pos:pos+K]))             # <<<<<<<<<<<<<<
 *             if deref(self._hg_this).has_tag(kmer):
 *                 result.append((pos+1, kmer))
 */
    if (unlikely(__pyx_v_sequence == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 563, __pyx_L1_error)
    }
    __pyx_t_1 = PySequence_GetSlice(__pyx_v_sequence, __pyx_v_pos, (__pyx_v_pos + __pyx_v_K)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_5 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(1, 563, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyBytes_AsString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 563, __pyx_L1_error)
    try {
      __pyx_t_7 = (*__pyx_v_self->_hg_this).hash_dna(__pyx_t_6);
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 563, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_kmer = __pyx_t_7;

    /* "khmer/_oxli/graphs.pyx":564
 *         for pos in range(0, len(sequence)-K+1):
 *             kmer = deref(self._hg_this).hash_dna(_bstring(sequence[pos:pos+K]))
 *             if deref(self._hg_this).has_tag(kmer):             # <<<<<<<<<<<<<<
 *                 result.append((pos+1, kmer))
 *         return result
 */
    __pyx_t_8 = ((*__pyx_v_self->_hg_this).has_tag(__pyx_v_kmer) != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/graphs.pyx":565
 *             kmer = deref(self._hg_this).hash_dna(_bstring(sequence[pos:pos+K]))
 *             if deref(self._hg_this).has_tag(kmer):
 *                 result.append((pos+1, kmer))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_pos + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_HashIntoType(__pyx_v_kmer); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
      __pyx_t_5 = 0;
      __pyx_t_1 = 0;
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_9); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 565, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "khmer/_oxli/graphs.pyx":564
 *         for pos in range(0, len(sequence)-K+1):
 *             kmer = deref(self._hg_this).hash_dna(_bstring(sequence[pos:pos+K]))
 *             if deref(self._hg_this).has_tag(kmer):             # <<<<<<<<<<<<<<
 *                 result.append((pos+1, kmer))
 *         return result
 */
    }
  }

  /* "khmer/_oxli/graphs.pyx":566
 *             if deref(self._hg_this).has_tag(kmer):
 *                 result.append((pos+1, kmer))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def get_tags_for_sequence(self, str sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":556
 *         return n_consumed
 * 
 *     def get_tags_and_positions(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Retrieve tags and their positions in a sequence.'''
 *         cdef list result = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.get_tags_and_positions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":568
 *         return result
 * 
 *     def get_tags_for_sequence(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Get the tags present in a sequence.'''
 *         cdef string _sequence = self._valid_sequence(sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_21get_tags_for_sequence(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_20get_tags_for_sequence[] = "Get the tags present in a sequence.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_21get_tags_for_sequence(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tags_for_sequence (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 568, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_20get_tags_for_sequence(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_20get_tags_for_sequence(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence) {
  std::string __pyx_v__sequence;
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_hs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tags_for_sequence", 0);

  /* "khmer/_oxli/graphs.pyx":570
 *     def get_tags_for_sequence(self, str sequence):
 *         '''Get the tags present in a sequence.'''
 *         cdef string _sequence = self._valid_sequence(sequence)             # <<<<<<<<<<<<<<
 *         cdef HashSet hs = HashSet(self.ksize())
 *         deref(self._hg_this).get_tags_for_sequence(_sequence, hs.hs)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._valid_sequence(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__sequence = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":571
 *         '''Get the tags present in a sequence.'''
 *         cdef string _sequence = self._valid_sequence(sequence)
 *         cdef HashSet hs = HashSet(self.ksize())             # <<<<<<<<<<<<<<
 *         deref(self._hg_this).get_tags_for_sequence(_sequence, hs.hs)
 *         return hs
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashset_HashSet), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hs = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/graphs.pyx":572
 *         cdef string _sequence = self._valid_sequence(sequence)
 *         cdef HashSet hs = HashSet(self.ksize())
 *         deref(self._hg_this).get_tags_for_sequence(_sequence, hs.hs)             # <<<<<<<<<<<<<<
 *         return hs
 * 
 */
  (*__pyx_v_self->_hg_this).get_tags_for_sequence(__pyx_v__sequence, __pyx_v_hs->hs);

  /* "khmer/_oxli/graphs.pyx":573
 *         cdef HashSet hs = HashSet(self.ksize())
 *         deref(self._hg_this).get_tags_for_sequence(_sequence, hs.hs)
 *         return hs             # <<<<<<<<<<<<<<
 * 
 *     def find_all_tags_list(self, object kmer):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_hs));
  __pyx_r = ((PyObject *)__pyx_v_hs);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":568
 *         return result
 * 
 *     def get_tags_for_sequence(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Get the tags present in a sequence.'''
 *         cdef string _sequence = self._valid_sequence(sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.get_tags_for_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_hs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":575
 *         return hs
 * 
 *     def find_all_tags_list(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Find all tags within range of the given k-mer, return as list'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_23find_all_tags_list(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_22find_all_tags_list[] = "Find all tags within range of the given k-mer, return as list";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_23find_all_tags_list(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_all_tags_list (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_22find_all_tags_list(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_22find_all_tags_list(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer) {
  oxli::Kmer __pyx_v__kmer;
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_result = 0;
  std::set<oxli::HashIntoType>  *__pyx_v_tags;
  std::shared_ptr<oxli::Hashgraph>  __pyx_v_this;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::Kmer __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::shared_ptr<oxli::Hashgraph>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_all_tags_list", 0);

  /* "khmer/_oxli/graphs.pyx":577
 *     def find_all_tags_list(self, object kmer):
 *         '''Find all tags within range of the given k-mer, return as list'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)             # <<<<<<<<<<<<<<
 *         cdef HashSet result = HashSet(self.ksize())
 *         cdef set[HashIntoType] * tags = &(result.hs)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._build_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 577, __pyx_L1_error)
  __pyx_v__kmer = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":578
 *         '''Find all tags within range of the given k-mer, return as list'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef HashSet result = HashSet(self.ksize())             # <<<<<<<<<<<<<<
 *         cdef set[HashIntoType] * tags = &(result.hs)
 *         cdef shared_ptr[CpHashgraph] this = self._hg_this
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashset_HashSet), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/graphs.pyx":579
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef HashSet result = HashSet(self.ksize())
 *         cdef set[HashIntoType] * tags = &(result.hs)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CpHashgraph] this = self._hg_this
 * 
 */
  __pyx_v_tags = (&__pyx_v_result->hs);

  /* "khmer/_oxli/graphs.pyx":580
 *         cdef HashSet result = HashSet(self.ksize())
 *         cdef set[HashIntoType] * tags = &(result.hs)
 *         cdef shared_ptr[CpHashgraph] this = self._hg_this             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_5 = __pyx_v_self->_hg_this;
  __pyx_v_this = __pyx_t_5;

  /* "khmer/_oxli/graphs.pyx":582
 *         cdef shared_ptr[CpHashgraph] this = self._hg_this
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(deref(self._hg_this).partition).find_all_tags(_kmer, deref(tags),
 *                                                                 deref(this).all_tags)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":583
 * 
 *         with nogil:
 *             deref(deref(self._hg_this).partition).find_all_tags(_kmer, deref(tags),             # <<<<<<<<<<<<<<
 *                                                                 deref(this).all_tags)
 * 
 */
        try {
          (*(*__pyx_v_self->_hg_this).partition).find_all_tags(__pyx_v__kmer, (*__pyx_v_tags), (*__pyx_v_this).all_tags);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 583, __pyx_L4_error)
        }
      }

      /* "khmer/_oxli/graphs.pyx":582
 *         cdef shared_ptr[CpHashgraph] this = self._hg_this
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(deref(self._hg_this).partition).find_all_tags(_kmer, deref(tags),
 *                                                                 deref(this).all_tags)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":586
 *                                                                 deref(this).all_tags)
 * 
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def consume_seqfile_and_tag(self, object parser_or_filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":575
 *         return hs
 * 
 *     def find_all_tags_list(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Find all tags within range of the given k-mer, return as list'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.find_all_tags_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":588
 *         return result
 * 
 *     def consume_seqfile_and_tag(self, object parser_or_filename):             # <<<<<<<<<<<<<<
 *         '''Consume all sequences in a FASTA/FASTQ file and tag the resulting
 *         graph.'''
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_25consume_seqfile_and_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_parser_or_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_24consume_seqfile_and_tag[] = "Consume all sequences in a FASTA/FASTQ file and tag the resulting\n        graph.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_25consume_seqfile_and_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_parser_or_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume_seqfile_and_tag (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_24consume_seqfile_and_tag(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_parser_or_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_24consume_seqfile_and_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_parser_or_filename) {
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  oxli::read_parsers::FastxParserPtr __pyx_v__parser;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::read_parsers::FastxParserPtr __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume_seqfile_and_tag", 0);

  /* "khmer/_oxli/graphs.pyx":591
 *         '''Consume all sequences in a FASTA/FASTQ file and tag the resulting
 *         graph.'''
 *         cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 */
  __pyx_v_n_consumed = 0;

  /* "khmer/_oxli/graphs.pyx":592
 *         graph.'''
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 * 
 */
  __pyx_v_total_reads = 0;

  /* "khmer/_oxli/graphs.pyx":593
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._get_parser(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_parser_or_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 593, __pyx_L1_error)
  __pyx_v__parser = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":595
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._hg_this).\
 *                 consume_seqfile_and_tag_readparser[CpFastxReader](_parser,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":597
 *         with nogil:
 *             deref(self._hg_this).\
 *                 consume_seqfile_and_tag_readparser[CpFastxReader](_parser,             # <<<<<<<<<<<<<<
 *                                                                   total_reads,
 *                                                                   n_consumed)
 */
        (*__pyx_v_self->_hg_this).consume_seqfile_and_tag<oxli::read_parsers::FastxReader>(__pyx_v__parser, __pyx_v_total_reads, __pyx_v_n_consumed);
      }

      /* "khmer/_oxli/graphs.pyx":595
 *         cdef FastxParserPtr _parser = self._get_parser(parser_or_filename)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(self._hg_this).\
 *                 consume_seqfile_and_tag_readparser[CpFastxReader](_parser,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":601
 *                                                                   n_consumed)
 * 
 *         return total_reads, n_consumed             # <<<<<<<<<<<<<<
 * 
 *     def print_tagset(self, str filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":588
 *         return result
 * 
 *     def consume_seqfile_and_tag(self, object parser_or_filename):             # <<<<<<<<<<<<<<
 *         '''Consume all sequences in a FASTA/FASTQ file and tag the resulting
 *         graph.'''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.consume_seqfile_and_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":603
 *         return total_reads, n_consumed
 * 
 *     def print_tagset(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Print out all of the tags.'''
 *         deref(self._hg_this).print_tagset(_bstring(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_27print_tagset(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_26print_tagset[] = "Print out all of the tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_27print_tagset(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_tagset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(1, 603, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_26print_tagset(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_26print_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print_tagset", 0);

  /* "khmer/_oxli/graphs.pyx":605
 *     def print_tagset(self, str filename):
 *         '''Print out all of the tags.'''
 *         deref(self._hg_this).print_tagset(_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     def add_tag(self, object kmer):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (*__pyx_v_self->_hg_this).print_tagset(__pyx_t_2);

  /* "khmer/_oxli/graphs.pyx":603
 *         return total_reads, n_consumed
 * 
 *     def print_tagset(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Print out all of the tags.'''
 *         deref(self._hg_this).print_tagset(_bstring(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.print_tagset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":607
 *         deref(self._hg_this).print_tagset(_bstring(filename))
 * 
 *     def add_tag(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Add a k-mer to the tagset.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_29add_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_28add_tag[] = "Add a k-mer to the tagset.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_29add_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_tag (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_28add_tag(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_28add_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer) {
  oxli::HashIntoType __pyx_v__kmer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::HashIntoType __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_tag", 0);

  /* "khmer/_oxli/graphs.pyx":609
 *     def add_tag(self, object kmer):
 *         '''Add a k-mer to the tagset.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)             # <<<<<<<<<<<<<<
 *         deref(self._hg_this).add_tag(_kmer)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.sanitize_hash_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer); if (unlikely(__pyx_t_1 == ((oxli::HashIntoType)-1LL))) __PYX_ERR(1, 609, __pyx_L1_error)
  __pyx_v__kmer = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":610
 *         '''Add a k-mer to the tagset.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)
 *         deref(self._hg_this).add_tag(_kmer)             # <<<<<<<<<<<<<<
 * 
 *     def get_tagset(self):
 */
  (*__pyx_v_self->_hg_this).add_tag(__pyx_v__kmer);

  /* "khmer/_oxli/graphs.pyx":607
 *         deref(self._hg_this).print_tagset(_bstring(filename))
 * 
 *     def add_tag(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Add a k-mer to the tagset.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.add_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":612
 *         deref(self._hg_this).add_tag(_kmer)
 * 
 *     def get_tagset(self):             # <<<<<<<<<<<<<<
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_31get_tagset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_30get_tagset[] = "Get all tagged k-mers as DNA strings.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_31get_tagset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tagset (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_30get_tagset(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_30get_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  oxli::HashIntoType __pyx_v_st;
  PyObject *__pyx_v_all_tags = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::set<oxli::HashIntoType> ::iterator __pyx_t_2;
  std::set<oxli::HashIntoType>  *__pyx_t_3;
  oxli::HashIntoType __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tagset", 0);

  /* "khmer/_oxli/graphs.pyx":615
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 *         cdef list all_tags = []             # <<<<<<<<<<<<<<
 *         for st in deref(self._hg_this).all_tags:
 *             all_tags.append(deref(self._hg_this).unhash_dna(st))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_all_tags = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":616
 *         cdef HashIntoType st
 *         cdef list all_tags = []
 *         for st in deref(self._hg_this).all_tags:             # <<<<<<<<<<<<<<
 *             all_tags.append(deref(self._hg_this).unhash_dna(st))
 *         return all_tags
 */
  __pyx_t_3 = &(*__pyx_v_self->_hg_this).all_tags;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_st = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":617
 *         cdef list all_tags = []
 *         for st in deref(self._hg_this).all_tags:
 *             all_tags.append(deref(self._hg_this).unhash_dna(st))             # <<<<<<<<<<<<<<
 *         return all_tags
 * 
 */
    try {
      __pyx_t_5 = (*__pyx_v_self->_hg_this).unhash_dna(__pyx_v_st);
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 617, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_all_tags, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "khmer/_oxli/graphs.pyx":616
 *         cdef HashIntoType st
 *         cdef list all_tags = []
 *         for st in deref(self._hg_this).all_tags:             # <<<<<<<<<<<<<<
 *             all_tags.append(deref(self._hg_this).unhash_dna(st))
 *         return all_tags
 */
  }

  /* "khmer/_oxli/graphs.pyx":618
 *         for st in deref(self._hg_this).all_tags:
 *             all_tags.append(deref(self._hg_this).unhash_dna(st))
 *         return all_tags             # <<<<<<<<<<<<<<
 * 
 *     def tags(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_all_tags);
  __pyx_r = __pyx_v_all_tags;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":612
 *         deref(self._hg_this).add_tag(_kmer)
 * 
 *     def get_tagset(self):             # <<<<<<<<<<<<<<
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.get_tagset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_all_tags);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_6graphs_9Hashgraph_34generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/graphs.pyx":620
 *         return all_tags
 * 
 *     def tags(self):             # <<<<<<<<<<<<<<
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_33tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_32tags[] = "Get all tagged k-mers as DNA strings.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_33tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tags (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_32tags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_32tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tags", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *)__pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct__tags(__pyx_ptype_5khmer_5_oxli_6graphs___pyx_scope_struct__tags, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 620, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_6graphs_9Hashgraph_34generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_tags, __pyx_n_s_Hashgraph_tags, __pyx_n_s_khmer__oxli_graphs); if (unlikely(!gen)) __PYX_ERR(1, 620, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_6graphs_9Hashgraph_34generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::set<oxli::HashIntoType> ::iterator __pyx_t_1;
  std::set<oxli::HashIntoType>  *__pyx_t_2;
  oxli::HashIntoType __pyx_t_3;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tags", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 620, __pyx_L1_error)

  /* "khmer/_oxli/graphs.pyx":623
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 *         for st in deref(self._hg_this).all_tags:             # <<<<<<<<<<<<<<
 *             yield deref(self._hg_this).unhash_dna(st)
 * 
 */
  __pyx_t_2 = &(*__pyx_cur_scope->__pyx_v_self->_hg_this).all_tags;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_st = __pyx_t_3;

    /* "khmer/_oxli/graphs.pyx":624
 *         cdef HashIntoType st
 *         for st in deref(self._hg_this).all_tags:
 *             yield deref(self._hg_this).unhash_dna(st)             # <<<<<<<<<<<<<<
 * 
 *     def load_tagset(self, str filename, clear_tags=True):
 */
    try {
      __pyx_t_4 = (*__pyx_cur_scope->__pyx_v_self->_hg_this).unhash_dna(__pyx_cur_scope->__pyx_v_st);
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 624, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 624, __pyx_L1_error)

    /* "khmer/_oxli/graphs.pyx":623
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 *         for st in deref(self._hg_this).all_tags:             # <<<<<<<<<<<<<<
 *             yield deref(self._hg_this).unhash_dna(st)
 * 
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "khmer/_oxli/graphs.pyx":620
 *         return all_tags
 * 
 *     def tags(self):             # <<<<<<<<<<<<<<
 *         '''Get all tagged k-mers as DNA strings.'''
 *         cdef HashIntoType st
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":626
 *             yield deref(self._hg_this).unhash_dna(st)
 * 
 *     def load_tagset(self, str filename, clear_tags=True):             # <<<<<<<<<<<<<<
 *         '''Load tags from a file.'''
 *         deref(self._hg_this).load_tagset(_bstring(filename), clear_tags)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_36load_tagset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_35load_tagset[] = "Load tags from a file.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_36load_tagset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_clear_tags = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_tagset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_clear_tags,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clear_tags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_tagset") < 0)) __PYX_ERR(1, 626, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_clear_tags = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_tagset", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 626, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.load_tagset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(1, 626, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_35load_tagset(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_filename, __pyx_v_clear_tags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_35load_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_clear_tags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_tagset", 0);

  /* "khmer/_oxli/graphs.pyx":628
 *     def load_tagset(self, str filename, clear_tags=True):
 *         '''Load tags from a file.'''
 *         deref(self._hg_this).load_tagset(_bstring(filename), clear_tags)             # <<<<<<<<<<<<<<
 * 
 *     def save_tagset(self, str filename):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_clear_tags); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L1_error)
  try {
    (*__pyx_v_self->_hg_this).load_tagset(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 628, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":626
 *             yield deref(self._hg_this).unhash_dna(st)
 * 
 *     def load_tagset(self, str filename, clear_tags=True):             # <<<<<<<<<<<<<<
 *         '''Load tags from a file.'''
 *         deref(self._hg_this).load_tagset(_bstring(filename), clear_tags)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.load_tagset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":630
 *         deref(self._hg_this).load_tagset(_bstring(filename), clear_tags)
 * 
 *     def save_tagset(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Save tags to a file.'''
 *         deref(self._hg_this).save_tagset(_bstring(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_38save_tagset(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_37save_tagset[] = "Save tags to a file.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_38save_tagset(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_tagset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(1, 630, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_37save_tagset(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_37save_tagset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_tagset", 0);

  /* "khmer/_oxli/graphs.pyx":632
 *     def save_tagset(self, str filename):
 *         '''Save tags to a file.'''
 *         deref(self._hg_this).save_tagset(_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (*__pyx_v_self->_hg_this).save_tagset(__pyx_t_2);

  /* "khmer/_oxli/graphs.pyx":630
 *         deref(self._hg_this).load_tagset(_bstring(filename), clear_tags)
 * 
 *     def save_tagset(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Save tags to a file.'''
 *         deref(self._hg_this).save_tagset(_bstring(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.save_tagset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":635
 * 
 *     @property
 *     def n_tags(self):             # <<<<<<<<<<<<<<
 *         '''Return the count of all tags.'''
 *         return deref(self._hg_this).n_tags()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_6n_tags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_6n_tags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_6n_tags___get__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_6n_tags___get__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/graphs.pyx":637
 *     def n_tags(self):
 *         '''Return the count of all tags.'''
 *         return deref(self._hg_this).n_tags()             # <<<<<<<<<<<<<<
 * 
 *     def divide_tags_into_subsets(self, int subset_size=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_hg_this).n_tags()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":635
 * 
 *     @property
 *     def n_tags(self):             # <<<<<<<<<<<<<<
 *         '''Return the count of all tags.'''
 *         return deref(self._hg_this).n_tags()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.n_tags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":639
 *         return deref(self._hg_this).n_tags()
 * 
 *     def divide_tags_into_subsets(self, int subset_size=0):             # <<<<<<<<<<<<<<
 *         '''Divide tags equally up into subsets of given size.'''
 *         cdef set[HashIntoType] divvy
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_40divide_tags_into_subsets(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_39divide_tags_into_subsets[] = "Divide tags equally up into subsets of given size.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_40divide_tags_into_subsets(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_subset_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("divide_tags_into_subsets (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_subset_size,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_subset_size);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "divide_tags_into_subsets") < 0)) __PYX_ERR(1, 639, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_subset_size = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_subset_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 639, __pyx_L3_error)
    } else {
      __pyx_v_subset_size = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("divide_tags_into_subsets", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 639, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.divide_tags_into_subsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_39divide_tags_into_subsets(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_subset_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_39divide_tags_into_subsets(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, int __pyx_v_subset_size) {
  std::set<oxli::HashIntoType>  __pyx_v_divvy;
  struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *__pyx_v_hs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("divide_tags_into_subsets", 0);

  /* "khmer/_oxli/graphs.pyx":642
 *         '''Divide tags equally up into subsets of given size.'''
 *         cdef set[HashIntoType] divvy
 *         deref(self._hg_this).divide_tags_into_subsets(subset_size, divvy)             # <<<<<<<<<<<<<<
 *         cdef HashSet hs = HashSet(self.ksize())
 *         hs.hs = divvy
 */
  (*__pyx_v_self->_hg_this).divide_tags_into_subsets(__pyx_v_subset_size, __pyx_v_divvy);

  /* "khmer/_oxli/graphs.pyx":643
 *         cdef set[HashIntoType] divvy
 *         deref(self._hg_this).divide_tags_into_subsets(subset_size, divvy)
 *         cdef HashSet hs = HashSet(self.ksize())             # <<<<<<<<<<<<<<
 *         hs.hs = divvy
 *         return hs
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ksize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7hashset_HashSet), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_hs = ((struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":644
 *         deref(self._hg_this).divide_tags_into_subsets(subset_size, divvy)
 *         cdef HashSet hs = HashSet(self.ksize())
 *         hs.hs = divvy             # <<<<<<<<<<<<<<
 *         return hs
 * 
 */
  __pyx_v_hs->hs = __pyx_v_divvy;

  /* "khmer/_oxli/graphs.pyx":645
 *         cdef HashSet hs = HashSet(self.ksize())
 *         hs.hs = divvy
 *         return hs             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_hs));
  __pyx_r = ((PyObject *)__pyx_v_hs);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":639
 *         return deref(self._hg_this).n_tags()
 * 
 *     def divide_tags_into_subsets(self, int subset_size=0):             # <<<<<<<<<<<<<<
 *         '''Divide tags equally up into subsets of given size.'''
 *         cdef set[HashIntoType] divvy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.divide_tags_into_subsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_hs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":648
 * 
 *     @property
 *     def tag_density(self):             # <<<<<<<<<<<<<<
 *         '''Get the tagging density.'''
 *         return deref(self._hg_this)._get_tag_density()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density___get__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density___get__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/graphs.pyx":650
 *     def tag_density(self):
 *         '''Get the tagging density.'''
 *         return deref(self._hg_this)._get_tag_density()             # <<<<<<<<<<<<<<
 * 
 *     @tag_density.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((*__pyx_v_self->_hg_this)._get_tag_density()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":648
 * 
 *     @property
 *     def tag_density(self):             # <<<<<<<<<<<<<<
 *         '''Get the tagging density.'''
 *         return deref(self._hg_this)._get_tag_density()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.tag_density.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":653
 * 
 *     @tag_density.setter
 *     def tag_density(self, int density):             # <<<<<<<<<<<<<<
 *         '''Set the tagging density.'''
 *         deref(self._hg_this)._set_tag_density(density)
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_density); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_density) {
  int __pyx_v_density;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_density); {
    __pyx_v_density = __Pyx_PyInt_As_int(__pyx_arg_density); if (unlikely((__pyx_v_density == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 653, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.tag_density.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_2__set__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((int)__pyx_v_density));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_2__set__(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, int __pyx_v_density) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "khmer/_oxli/graphs.pyx":655
 *     def tag_density(self, int density):
 *         '''Set the tagging density.'''
 *         deref(self._hg_this)._set_tag_density(density)             # <<<<<<<<<<<<<<
 * 
 *     def do_subset_partition(self, object start_kmer, object end_kmer,
 */
  (*__pyx_v_self->_hg_this)._set_tag_density(__pyx_v_density);

  /* "khmer/_oxli/graphs.pyx":653
 * 
 *     @tag_density.setter
 *     def tag_density(self, int density):             # <<<<<<<<<<<<<<
 *         '''Set the tagging density.'''
 *         deref(self._hg_this)._set_tag_density(density)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":657
 *         deref(self._hg_this)._set_tag_density(density)
 * 
 *     def do_subset_partition(self, object start_kmer, object end_kmer,             # <<<<<<<<<<<<<<
 *                                   bool break_on_stoptags=False,
 *                                   bool stop_big_traversals=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_42do_subset_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_41do_subset_partition[] = "Partition the graph starting from a given subset of tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_42do_subset_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start_kmer = 0;
  PyObject *__pyx_v_end_kmer = 0;
  bool __pyx_v_break_on_stoptags;
  bool __pyx_v_stop_big_traversals;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_subset_partition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_kmer,&__pyx_n_s_end_kmer,&__pyx_n_s_break_on_stoptags,&__pyx_n_s_stop_big_traversals,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_kmer)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_kmer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("do_subset_partition", 0, 2, 4, 1); __PYX_ERR(1, 657, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_break_on_stoptags);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop_big_traversals);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "do_subset_partition") < 0)) __PYX_ERR(1, 657, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start_kmer = values[0];
    __pyx_v_end_kmer = values[1];
    if (values[2]) {
      __pyx_v_break_on_stoptags = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_break_on_stoptags == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 658, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/graphs.pyx":658
 * 
 *     def do_subset_partition(self, object start_kmer, object end_kmer,
 *                                   bool break_on_stoptags=False,             # <<<<<<<<<<<<<<
 *                                   bool stop_big_traversals=False):
 *         '''Partition the graph starting from a given subset of tags.'''
 */
      __pyx_v_break_on_stoptags = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_stop_big_traversals = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_stop_big_traversals == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 659, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/graphs.pyx":659
 *     def do_subset_partition(self, object start_kmer, object end_kmer,
 *                                   bool break_on_stoptags=False,
 *                                   bool stop_big_traversals=False):             # <<<<<<<<<<<<<<
 *         '''Partition the graph starting from a given subset of tags.'''
 * 
 */
      __pyx_v_stop_big_traversals = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_subset_partition", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 657, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.do_subset_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_41do_subset_partition(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_start_kmer, __pyx_v_end_kmer, __pyx_v_break_on_stoptags, __pyx_v_stop_big_traversals);

  /* "khmer/_oxli/graphs.pyx":657
 *         deref(self._hg_this)._set_tag_density(density)
 * 
 *     def do_subset_partition(self, object start_kmer, object end_kmer,             # <<<<<<<<<<<<<<
 *                                   bool break_on_stoptags=False,
 *                                   bool stop_big_traversals=False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_41do_subset_partition(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_start_kmer, PyObject *__pyx_v_end_kmer, bool __pyx_v_break_on_stoptags, bool __pyx_v_stop_big_traversals) {
  struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *__pyx_v_subset = 0;
  oxli::SubsetPartition *__pyx_v_subset_ptr;
  oxli::HashIntoType __pyx_v_start;
  oxli::HashIntoType __pyx_v_end;
  bool __pyx_v_cbreak;
  bool __pyx_v_cstop;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  oxli::HashIntoType __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_subset_partition", 0);

  /* "khmer/_oxli/graphs.pyx":662
 *         '''Partition the graph starting from a given subset of tags.'''
 * 
 *         cdef SubsetPartition subset = SubsetPartition(self)             # <<<<<<<<<<<<<<
 *         cdef CpSubsetPartition * subset_ptr = subset._this.get()
 *         cdef HashIntoType start = self.sanitize_hash_kmer(start_kmer)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_subset = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":663
 * 
 *         cdef SubsetPartition subset = SubsetPartition(self)
 *         cdef CpSubsetPartition * subset_ptr = subset._this.get()             # <<<<<<<<<<<<<<
 *         cdef HashIntoType start = self.sanitize_hash_kmer(start_kmer)
 *         cdef HashIntoType end = self.sanitize_hash_kmer(end_kmer)
 */
  __pyx_v_subset_ptr = __pyx_v_subset->_this.get();

  /* "khmer/_oxli/graphs.pyx":664
 *         cdef SubsetPartition subset = SubsetPartition(self)
 *         cdef CpSubsetPartition * subset_ptr = subset._this.get()
 *         cdef HashIntoType start = self.sanitize_hash_kmer(start_kmer)             # <<<<<<<<<<<<<<
 *         cdef HashIntoType end = self.sanitize_hash_kmer(end_kmer)
 *         cdef bool cbreak = break_on_stoptags
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.sanitize_hash_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_start_kmer); if (unlikely(__pyx_t_2 == ((oxli::HashIntoType)-1LL))) __PYX_ERR(1, 664, __pyx_L1_error)
  __pyx_v_start = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":665
 *         cdef CpSubsetPartition * subset_ptr = subset._this.get()
 *         cdef HashIntoType start = self.sanitize_hash_kmer(start_kmer)
 *         cdef HashIntoType end = self.sanitize_hash_kmer(end_kmer)             # <<<<<<<<<<<<<<
 *         cdef bool cbreak = break_on_stoptags
 *         cdef bool cstop = stop_big_traversals
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.sanitize_hash_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_end_kmer); if (unlikely(__pyx_t_2 == ((oxli::HashIntoType)-1LL))) __PYX_ERR(1, 665, __pyx_L1_error)
  __pyx_v_end = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":666
 *         cdef HashIntoType start = self.sanitize_hash_kmer(start_kmer)
 *         cdef HashIntoType end = self.sanitize_hash_kmer(end_kmer)
 *         cdef bool cbreak = break_on_stoptags             # <<<<<<<<<<<<<<
 *         cdef bool cstop = stop_big_traversals
 * 
 */
  __pyx_v_cbreak = __pyx_v_break_on_stoptags;

  /* "khmer/_oxli/graphs.pyx":667
 *         cdef HashIntoType end = self.sanitize_hash_kmer(end_kmer)
 *         cdef bool cbreak = break_on_stoptags
 *         cdef bool cstop = stop_big_traversals             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_v_cstop = __pyx_v_stop_big_traversals;

  /* "khmer/_oxli/graphs.pyx":669
 *         cdef bool cstop = stop_big_traversals
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(subset_ptr).do_partition(start, end, cbreak, cstop)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":670
 * 
 *         with nogil:
 *             deref(subset_ptr).do_partition(start, end, cbreak, cstop)             # <<<<<<<<<<<<<<
 * 
 *         return subset
 */
        try {
          (*__pyx_v_subset_ptr).do_partition(__pyx_v_start, __pyx_v_end, __pyx_v_cbreak, __pyx_v_cstop);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 670, __pyx_L4_error)
        }
      }

      /* "khmer/_oxli/graphs.pyx":669
 *         cdef bool cstop = stop_big_traversals
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(subset_ptr).do_partition(start, end, cbreak, cstop)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":672
 *             deref(subset_ptr).do_partition(start, end, cbreak, cstop)
 * 
 *         return subset             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_subset));
  __pyx_r = ((PyObject *)__pyx_v_subset);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":657
 *         deref(self._hg_this)._set_tag_density(density)
 * 
 *     def do_subset_partition(self, object start_kmer, object end_kmer,             # <<<<<<<<<<<<<<
 *                                   bool break_on_stoptags=False,
 *                                   bool stop_big_traversals=False):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.do_subset_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_subset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":675
 * 
 * 
 *     def find_all_tags(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Starting from the given k-mer, find all closely connected tags.'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_44find_all_tags(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_43find_all_tags[] = "Starting from the given k-mer, find all closely connected tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_44find_all_tags(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_all_tags (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_43find_all_tags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_43find_all_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer) {
  oxli::Kmer __pyx_v__kmer;
  struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *__pyx_v_ppi = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::Kmer __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_all_tags", 0);

  /* "khmer/_oxli/graphs.pyx":677
 *     def find_all_tags(self, object kmer):
 *         '''Starting from the given k-mer, find all closely connected tags.'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)             # <<<<<<<<<<<<<<
 *         cdef PrePartitionInfo ppi = PrePartitionInfo.create(_kmer)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._build_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 677, __pyx_L1_error)
  __pyx_v__kmer = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":678
 *         '''Starting from the given k-mer, find all closely connected tags.'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 *         cdef PrePartitionInfo ppi = PrePartitionInfo.create(_kmer)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo->create(__pyx_v__kmer)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ppi = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":680
 *         cdef PrePartitionInfo ppi = PrePartitionInfo.create(_kmer)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(deref(self._hg_this).partition).find_all_tags(_kmer,
 *                                                                 deref(ppi._this).tagged_kmers,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":681
 * 
 *         with nogil:
 *             deref(deref(self._hg_this).partition).find_all_tags(_kmer,             # <<<<<<<<<<<<<<
 *                                                                 deref(ppi._this).tagged_kmers,
 *                                                                 deref(self._hg_this).all_tags)
 */
        try {
          (*(*__pyx_v_self->_hg_this).partition).find_all_tags(__pyx_v__kmer, (*__pyx_v_ppi->_this).tagged_kmers, (*__pyx_v_self->_hg_this).all_tags);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 681, __pyx_L4_error)
        }

        /* "khmer/_oxli/graphs.pyx":684
 *                                                                 deref(ppi._this).tagged_kmers,
 *                                                                 deref(self._hg_this).all_tags)
 *             deref(self._hg_this).add_kmer_to_tags(_kmer.kmer_u)             # <<<<<<<<<<<<<<
 * 
 *         return ppi
 */
        (*__pyx_v_self->_hg_this).add_kmer_to_tags(__pyx_v__kmer.kmer_u);
      }

      /* "khmer/_oxli/graphs.pyx":680
 *         cdef PrePartitionInfo ppi = PrePartitionInfo.create(_kmer)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(deref(self._hg_this).partition).find_all_tags(_kmer,
 *                                                                 deref(ppi._this).tagged_kmers,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":686
 *             deref(self._hg_this).add_kmer_to_tags(_kmer.kmer_u)
 * 
 *         return ppi             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ppi));
  __pyx_r = ((PyObject *)__pyx_v_ppi);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":675
 * 
 * 
 *     def find_all_tags(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Starting from the given k-mer, find all closely connected tags.'''
 *         cdef CpKmer _kmer = self._build_kmer(kmer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.find_all_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ppi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":689
 * 
 * 
 *     def assign_partition_id(self, PrePartitionInfo ppi):             # <<<<<<<<<<<<<<
 *         '''Assign a partition ID to a given tag.'''
 *         cdef cp_pre_partition_info * cppi = ppi._this.get()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_46assign_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_v_ppi); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_45assign_partition_id[] = "Assign a partition ID to a given tag.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_46assign_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_v_ppi) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assign_partition_id (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ppi), __pyx_ptype_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo, 1, "ppi", 0))) __PYX_ERR(1, 689, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_45assign_partition_id(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *)__pyx_v_ppi));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_45assign_partition_id(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo *__pyx_v_ppi) {
  struct oxli::pre_partition_info *__pyx_v_cppi;
  oxli::PartitionID __pyx_v_pi;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_partition_id", 0);

  /* "khmer/_oxli/graphs.pyx":691
 *     def assign_partition_id(self, PrePartitionInfo ppi):
 *         '''Assign a partition ID to a given tag.'''
 *         cdef cp_pre_partition_info * cppi = ppi._this.get()             # <<<<<<<<<<<<<<
 *         cdef PartitionID pi
 *         pi = deref(deref(self._hg_this).partition).assign_partition_id(deref(cppi).kmer,
 */
  __pyx_v_cppi = __pyx_v_ppi->_this.get();

  /* "khmer/_oxli/graphs.pyx":693
 *         cdef cp_pre_partition_info * cppi = ppi._this.get()
 *         cdef PartitionID pi
 *         pi = deref(deref(self._hg_this).partition).assign_partition_id(deref(cppi).kmer,             # <<<<<<<<<<<<<<
 *                                                                        deref(cppi).tagged_kmers)
 *         return pi
 */
  __pyx_v_pi = (*(*__pyx_v_self->_hg_this).partition).assign_partition_id((*__pyx_v_cppi).kmer, (*__pyx_v_cppi).tagged_kmers);

  /* "khmer/_oxli/graphs.pyx":695
 *         pi = deref(deref(self._hg_this).partition).assign_partition_id(deref(cppi).kmer,
 *                                                                        deref(cppi).tagged_kmers)
 *         return pi             # <<<<<<<<<<<<<<
 * 
 *     def output_partitions(self, str filename, str output, bool
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_PartitionID(__pyx_v_pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":689
 * 
 * 
 *     def assign_partition_id(self, PrePartitionInfo ppi):             # <<<<<<<<<<<<<<
 *         '''Assign a partition ID to a given tag.'''
 *         cdef cp_pre_partition_info * cppi = ppi._this.get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.assign_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":697
 *         return pi
 * 
 *     def output_partitions(self, str filename, str output, bool             # <<<<<<<<<<<<<<
 *                                 output_unassigned=False):
 *         '''Write out sequences in given filename to another file, annotating '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_48output_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_47output_partitions[] = "Write out sequences in given filename to another file, annotating ";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_48output_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_output = 0;
  bool __pyx_v_output_unassigned;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("output_partitions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_output,&__pyx_n_s_output_unassigned,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_partitions", 0, 2, 3, 1); __PYX_ERR(1, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output_unassigned);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "output_partitions") < 0)) __PYX_ERR(1, 697, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_output = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_output_unassigned = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_output_unassigned == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 697, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/graphs.pyx":698
 * 
 *     def output_partitions(self, str filename, str output, bool
 *                                 output_unassigned=False):             # <<<<<<<<<<<<<<
 *         '''Write out sequences in given filename to another file, annotating '''
 *         '''with partition IDs.'''
 */
      __pyx_v_output_unassigned = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("output_partitions", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 697, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.output_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(1, 697, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), (&PyString_Type), 1, "output", 1))) __PYX_ERR(1, 697, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_47output_partitions(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_filename, __pyx_v_output, __pyx_v_output_unassigned);

  /* "khmer/_oxli/graphs.pyx":697
 *         return pi
 * 
 *     def output_partitions(self, str filename, str output, bool             # <<<<<<<<<<<<<<
 *                                 output_unassigned=False):
 *         '''Write out sequences in given filename to another file, annotating '''
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_47output_partitions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_output, bool __pyx_v_output_unassigned) {
  size_t __pyx_v_n_partitions;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::string __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("output_partitions", 0);

  /* "khmer/_oxli/graphs.pyx":702
 *         '''with partition IDs.'''
 *         n_partitions = deref(deref(self._hg_this).partition).\
 *                             output_partitioned_file(_bstring(filename),             # <<<<<<<<<<<<<<
 *                                                     _bstring(output),
 *                                                     output_unassigned)
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 702, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":703
 *         n_partitions = deref(deref(self._hg_this).partition).\
 *                             output_partitioned_file(_bstring(filename),
 *                                                     _bstring(output),             # <<<<<<<<<<<<<<
 *                                                     output_unassigned)
 *         return n_partitions
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_output); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 703, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":702
 *         '''with partition IDs.'''
 *         n_partitions = deref(deref(self._hg_this).partition).\
 *                             output_partitioned_file(_bstring(filename),             # <<<<<<<<<<<<<<
 *                                                     _bstring(output),
 *                                                     output_unassigned)
 */
  try {
    __pyx_t_4 = (*(*__pyx_v_self->_hg_this).partition).output_partitioned_file(__pyx_t_2, __pyx_t_3, __pyx_v_output_unassigned);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 702, __pyx_L1_error)
  }
  __pyx_v_n_partitions = __pyx_t_4;

  /* "khmer/_oxli/graphs.pyx":705
 *                                                     _bstring(output),
 *                                                     output_unassigned)
 *         return n_partitions             # <<<<<<<<<<<<<<
 * 
 *     def load_partitionmap(self, str filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_n_partitions); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":697
 *         return pi
 * 
 *     def output_partitions(self, str filename, str output, bool             # <<<<<<<<<<<<<<
 *                                 output_unassigned=False):
 *         '''Write out sequences in given filename to another file, annotating '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.output_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":707
 *         return n_partitions
 * 
 *     def load_partitionmap(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Load a partitionmap for the master subset.'''
 *         deref(deref(self._hg_this).partition).load_partitionmap(_bstring(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_50load_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_49load_partitionmap[] = "Load a partitionmap for the master subset.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_50load_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_partitionmap (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(1, 707, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_49load_partitionmap(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_49load_partitionmap(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_partitionmap", 0);

  /* "khmer/_oxli/graphs.pyx":709
 *     def load_partitionmap(self, str filename):
 *         '''Load a partitionmap for the master subset.'''
 *         deref(deref(self._hg_this).partition).load_partitionmap(_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     def save_partitionmap(self, str filename):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    (*(*__pyx_v_self->_hg_this).partition).load_partitionmap(__pyx_t_2);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 709, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":707
 *         return n_partitions
 * 
 *     def load_partitionmap(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Load a partitionmap for the master subset.'''
 *         deref(deref(self._hg_this).partition).load_partitionmap(_bstring(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.load_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":711
 *         deref(deref(self._hg_this).partition).load_partitionmap(_bstring(filename))
 * 
 *     def save_partitionmap(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Save a partitionmap for the master subset.'''
 *         deref(deref(self._hg_this).partition).save_partitionmap(_bstring(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_52save_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_51save_partitionmap[] = "Save a partitionmap for the master subset.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_52save_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_partitionmap (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(1, 711, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_51save_partitionmap(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_51save_partitionmap(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_partitionmap", 0);

  /* "khmer/_oxli/graphs.pyx":713
 *     def save_partitionmap(self, str filename):
 *         '''Save a partitionmap for the master subset.'''
 *         deref(deref(self._hg_this).partition).save_partitionmap(_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     def _validate_partitionmap(self):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 713, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    (*(*__pyx_v_self->_hg_this).partition).save_partitionmap(__pyx_t_2);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 713, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":711
 *         deref(deref(self._hg_this).partition).load_partitionmap(_bstring(filename))
 * 
 *     def save_partitionmap(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Save a partitionmap for the master subset.'''
 *         deref(deref(self._hg_this).partition).save_partitionmap(_bstring(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.save_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":715
 *         deref(deref(self._hg_this).partition).save_partitionmap(_bstring(filename))
 * 
 *     def _validate_partitionmap(self):             # <<<<<<<<<<<<<<
 *         '''Run internal validation checks.'''
 *         deref(deref(self._hg_this).partition)._validate_pmap()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_54_validate_partitionmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_53_validate_partitionmap[] = "Run internal validation checks.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_54_validate_partitionmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_validate_partitionmap (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_53_validate_partitionmap(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_53_validate_partitionmap(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_validate_partitionmap", 0);

  /* "khmer/_oxli/graphs.pyx":717
 *     def _validate_partitionmap(self):
 *         '''Run internal validation checks.'''
 *         deref(deref(self._hg_this).partition)._validate_pmap()             # <<<<<<<<<<<<<<
 * 
 *     def consume_partitioned_fasta(self, filename):
 */
  (*(*__pyx_v_self->_hg_this).partition)._validate_pmap();

  /* "khmer/_oxli/graphs.pyx":715
 *         deref(deref(self._hg_this).partition).save_partitionmap(_bstring(filename))
 * 
 *     def _validate_partitionmap(self):             # <<<<<<<<<<<<<<
 *         '''Run internal validation checks.'''
 *         deref(deref(self._hg_this).partition)._validate_pmap()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":719
 *         deref(deref(self._hg_this).partition)._validate_pmap()
 * 
 *     def consume_partitioned_fasta(self, filename):             # <<<<<<<<<<<<<<
 *         '''Count all k-mers in a given file'''
 *         cdef unsigned long long n_consumed = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_56consume_partitioned_fasta(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_55consume_partitioned_fasta[] = "Count all k-mers in a given file";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_56consume_partitioned_fasta(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consume_partitioned_fasta (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_55consume_partitioned_fasta(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_55consume_partitioned_fasta(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  std::string __pyx_v__filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume_partitioned_fasta", 0);

  /* "khmer/_oxli/graphs.pyx":721
 *     def consume_partitioned_fasta(self, filename):
 *         '''Count all k-mers in a given file'''
 *         cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *         cdef unsigned int total_reads = 0
 *         cdef string _filename = _bstring(filename)
 */
  __pyx_v_n_consumed = 0;

  /* "khmer/_oxli/graphs.pyx":722
 *         '''Count all k-mers in a given file'''
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *         cdef string _filename = _bstring(filename)
 *         deref(self._hg_this).consume_partitioned_fasta[CpFastxReader](_filename,
 */
  __pyx_v_total_reads = 0;

  /* "khmer/_oxli/graphs.pyx":723
 *         cdef unsigned long long n_consumed = 0
 *         cdef unsigned int total_reads = 0
 *         cdef string _filename = _bstring(filename)             # <<<<<<<<<<<<<<
 *         deref(self._hg_this).consume_partitioned_fasta[CpFastxReader](_filename,
 *                                                                      total_reads,
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 723, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__filename = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":724
 *         cdef unsigned int total_reads = 0
 *         cdef string _filename = _bstring(filename)
 *         deref(self._hg_this).consume_partitioned_fasta[CpFastxReader](_filename,             # <<<<<<<<<<<<<<
 *                                                                      total_reads,
 *                                                                      n_consumed)
 */
  try {
    (*__pyx_v_self->_hg_this).consume_partitioned_fasta<oxli::read_parsers::FastxReader>(__pyx_v__filename, __pyx_v_total_reads, __pyx_v_n_consumed);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 724, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":727
 *                                                                      total_reads,
 *                                                                      n_consumed)
 *         return total_reads, n_consumed             # <<<<<<<<<<<<<<
 * 
 *     def merge_subset(self, SubsetPartition subset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_total_reads); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":719
 *         deref(deref(self._hg_this).partition)._validate_pmap()
 * 
 *     def consume_partitioned_fasta(self, filename):             # <<<<<<<<<<<<<<
 *         '''Count all k-mers in a given file'''
 *         cdef unsigned long long n_consumed = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.consume_partitioned_fasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":729
 *         return total_reads, n_consumed
 * 
 *     def merge_subset(self, SubsetPartition subset):             # <<<<<<<<<<<<<<
 *         '''Merge the given subset into this one.'''
 *         deref(deref(self._hg_this).partition).merge(subset._this.get())
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_58merge_subset(PyObject *__pyx_v_self, PyObject *__pyx_v_subset); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_57merge_subset[] = "Merge the given subset into this one.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_58merge_subset(PyObject *__pyx_v_self, PyObject *__pyx_v_subset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_subset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subset), __pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition, 1, "subset", 0))) __PYX_ERR(1, 729, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_57merge_subset(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)__pyx_v_subset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_57merge_subset(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *__pyx_v_subset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_subset", 0);

  /* "khmer/_oxli/graphs.pyx":731
 *     def merge_subset(self, SubsetPartition subset):
 *         '''Merge the given subset into this one.'''
 *         deref(deref(self._hg_this).partition).merge(subset._this.get())             # <<<<<<<<<<<<<<
 * 
 *     def merge_subset_from_disk(self, str filename):
 */
  (*(*__pyx_v_self->_hg_this).partition).merge(__pyx_v_subset->_this.get());

  /* "khmer/_oxli/graphs.pyx":729
 *         return total_reads, n_consumed
 * 
 *     def merge_subset(self, SubsetPartition subset):             # <<<<<<<<<<<<<<
 *         '''Merge the given subset into this one.'''
 *         deref(deref(self._hg_this).partition).merge(subset._this.get())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":733
 *         deref(deref(self._hg_this).partition).merge(subset._this.get())
 * 
 *     def merge_subset_from_disk(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Merge the given subset (filename) into this one.'''
 *         deref(deref(self._hg_this).partition).merge_from_disk(_bstring(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_60merge_subset_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_59merge_subset_from_disk[] = "Merge the given subset (filename) into this one.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_60merge_subset_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_subset_from_disk (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(1, 733, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_59merge_subset_from_disk(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_59merge_subset_from_disk(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge_subset_from_disk", 0);

  /* "khmer/_oxli/graphs.pyx":735
 *     def merge_subset_from_disk(self, str filename):
 *         '''Merge the given subset (filename) into this one.'''
 *         deref(deref(self._hg_this).partition).merge_from_disk(_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     def count_partitions(self):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    (*(*__pyx_v_self->_hg_this).partition).merge_from_disk(__pyx_t_2);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 735, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":733
 *         deref(deref(self._hg_this).partition).merge(subset._this.get())
 * 
 *     def merge_subset_from_disk(self, str filename):             # <<<<<<<<<<<<<<
 *         '''Merge the given subset (filename) into this one.'''
 *         deref(deref(self._hg_this).partition).merge_from_disk(_bstring(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.merge_subset_from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":737
 *         deref(deref(self._hg_this).partition).merge_from_disk(_bstring(filename))
 * 
 *     def count_partitions(self):             # <<<<<<<<<<<<<<
 *         '''Count the number of partitions in the master partitionmap.'''
 *         return self.partition.count_partitions()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_62count_partitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_61count_partitions[] = "Count the number of partitions in the master partitionmap.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_62count_partitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_partitions (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_61count_partitions(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_61count_partitions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_partitions", 0);

  /* "khmer/_oxli/graphs.pyx":739
 *     def count_partitions(self):
 *         '''Count the number of partitions in the master partitionmap.'''
 *         return self.partition.count_partitions()             # <<<<<<<<<<<<<<
 * 
 *     def set_partition_id(self, object kmer, PartitionID pid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_partition); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_count_partitions); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":737
 *         deref(deref(self._hg_this).partition).merge_from_disk(_bstring(filename))
 * 
 *     def count_partitions(self):             # <<<<<<<<<<<<<<
 *         '''Count the number of partitions in the master partitionmap.'''
 *         return self.partition.count_partitions()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.count_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":741
 *         return self.partition.count_partitions()
 * 
 *     def set_partition_id(self, object kmer, PartitionID pid):             # <<<<<<<<<<<<<<
 *         '''Set the partition ID for this tag.'''
 *         cdef string start = self.sanitize_kmer(kmer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_64set_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_63set_partition_id[] = "Set the partition ID for this tag.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_64set_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kmer = 0;
  oxli::PartitionID __pyx_v_pid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_partition_id (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kmer,&__pyx_n_s_pid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kmer)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_partition_id", 1, 2, 2, 1); __PYX_ERR(1, 741, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_partition_id") < 0)) __PYX_ERR(1, 741, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_kmer = values[0];
    __pyx_v_pid = __Pyx_PyInt_As_oxli_3a__3a_PartitionID(values[1]); if (unlikely((__pyx_v_pid == ((oxli::PartitionID)-1)) && PyErr_Occurred())) __PYX_ERR(1, 741, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_partition_id", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 741, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.set_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_63set_partition_id(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_kmer, __pyx_v_pid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_63set_partition_id(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer, oxli::PartitionID __pyx_v_pid) {
  std::string __pyx_v_start;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_partition_id", 0);

  /* "khmer/_oxli/graphs.pyx":743
 *     def set_partition_id(self, object kmer, PartitionID pid):
 *         '''Set the partition ID for this tag.'''
 *         cdef string start = self.sanitize_kmer(kmer)             # <<<<<<<<<<<<<<
 *         deref(deref(self._hg_this).partition).set_partition_id(start, pid)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.sanitize_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_start = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":744
 *         '''Set the partition ID for this tag.'''
 *         cdef string start = self.sanitize_kmer(kmer)
 *         deref(deref(self._hg_this).partition).set_partition_id(start, pid)             # <<<<<<<<<<<<<<
 * 
 *     def join_partitions(self, PartitionID p1, PartitionID p2):
 */
  (*(*__pyx_v_self->_hg_this).partition).set_partition_id(__pyx_v_start, __pyx_v_pid);

  /* "khmer/_oxli/graphs.pyx":741
 *         return self.partition.count_partitions()
 * 
 *     def set_partition_id(self, object kmer, PartitionID pid):             # <<<<<<<<<<<<<<
 *         '''Set the partition ID for this tag.'''
 *         cdef string start = self.sanitize_kmer(kmer)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.set_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":746
 *         deref(deref(self._hg_this).partition).set_partition_id(start, pid)
 * 
 *     def join_partitions(self, PartitionID p1, PartitionID p2):             # <<<<<<<<<<<<<<
 *         '''Join the partitions of these two tags.'''
 *         return deref(deref(self._hg_this).partition).join_partitions(p1, p2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_66join_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_65join_partitions[] = "Join the partitions of these two tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_66join_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  oxli::PartitionID __pyx_v_p1;
  oxli::PartitionID __pyx_v_p2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join_partitions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p1,&__pyx_n_s_p2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("join_partitions", 1, 2, 2, 1); __PYX_ERR(1, 746, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "join_partitions") < 0)) __PYX_ERR(1, 746, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_p1 = __Pyx_PyInt_As_oxli_3a__3a_PartitionID(values[0]); if (unlikely((__pyx_v_p1 == ((oxli::PartitionID)-1)) && PyErr_Occurred())) __PYX_ERR(1, 746, __pyx_L3_error)
    __pyx_v_p2 = __Pyx_PyInt_As_oxli_3a__3a_PartitionID(values[1]); if (unlikely((__pyx_v_p2 == ((oxli::PartitionID)-1)) && PyErr_Occurred())) __PYX_ERR(1, 746, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join_partitions", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 746, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.join_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_65join_partitions(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_p1, __pyx_v_p2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_65join_partitions(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, oxli::PartitionID __pyx_v_p1, oxli::PartitionID __pyx_v_p2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("join_partitions", 0);

  /* "khmer/_oxli/graphs.pyx":748
 *     def join_partitions(self, PartitionID p1, PartitionID p2):
 *         '''Join the partitions of these two tags.'''
 *         return deref(deref(self._hg_this).partition).join_partitions(p1, p2)             # <<<<<<<<<<<<<<
 * 
 *     def get_partition_id(self, object kmer):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_PartitionID((*(*__pyx_v_self->_hg_this).partition).join_partitions(__pyx_v_p1, __pyx_v_p2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":746
 *         deref(deref(self._hg_this).partition).set_partition_id(start, pid)
 * 
 *     def join_partitions(self, PartitionID p1, PartitionID p2):             # <<<<<<<<<<<<<<
 *         '''Join the partitions of these two tags.'''
 *         return deref(deref(self._hg_this).partition).join_partitions(p1, p2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.join_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":750
 *         return deref(deref(self._hg_this).partition).join_partitions(p1, p2)
 * 
 *     def get_partition_id(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Get the partition ID of this tag.'''
 *         cdef string _kmer = self.sanitize_kmer(kmer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_68get_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_67get_partition_id[] = "Get the partition ID of this tag.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_68get_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_partition_id (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_67get_partition_id(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_67get_partition_id(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer) {
  std::string __pyx_v__kmer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_partition_id", 0);

  /* "khmer/_oxli/graphs.pyx":752
 *     def get_partition_id(self, object kmer):
 *         '''Get the partition ID of this tag.'''
 *         cdef string _kmer = self.sanitize_kmer(kmer)             # <<<<<<<<<<<<<<
 *         return deref(deref(self._hg_this).partition).get_partition_id(_kmer)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.sanitize_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 752, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__kmer = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":753
 *         '''Get the partition ID of this tag.'''
 *         cdef string _kmer = self.sanitize_kmer(kmer)
 *         return deref(deref(self._hg_this).partition).get_partition_id(_kmer)             # <<<<<<<<<<<<<<
 * 
 *     def repartition_largest_partition(self, Countgraph counts not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_oxli_3a__3a_PartitionID((*(*__pyx_v_self->_hg_this).partition).get_partition_id(__pyx_v__kmer)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":750
 *         return deref(deref(self._hg_this).partition).join_partitions(p1, p2)
 * 
 *     def get_partition_id(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Get the partition ID of this tag.'''
 *         cdef string _kmer = self.sanitize_kmer(kmer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.get_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":755
 *         return deref(deref(self._hg_this).partition).get_partition_id(_kmer)
 * 
 *     def repartition_largest_partition(self, Countgraph counts not None,             # <<<<<<<<<<<<<<
 *                                             unsigned int distance,
 *                                             unsigned int threshold,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_70repartition_largest_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_69repartition_largest_partition[] = "Repartition the largest partition (in the face of stop tags).";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_70repartition_largest_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_counts = 0;
  unsigned int __pyx_v_distance;
  unsigned int __pyx_v_threshold;
  unsigned int __pyx_v_frequency;
  struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *__pyx_v_subs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("repartition_largest_partition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_counts,&__pyx_n_s_distance,&__pyx_n_s_threshold,&__pyx_n_s_frequency,&__pyx_n_s_subs,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":759
 *                                             unsigned int threshold,
 *                                             unsigned int frequency,
 *                                             SubsetPartition subs=None):             # <<<<<<<<<<<<<<
 *         '''Repartition the largest partition (in the face of stop tags).'''
 * 
 */
    values[4] = (PyObject *)((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_counts)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_distance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 0, 4, 5, 1); __PYX_ERR(1, 755, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 0, 4, 5, 2); __PYX_ERR(1, 755, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frequency)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 0, 4, 5, 3); __PYX_ERR(1, 755, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_subs);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "repartition_largest_partition") < 0)) __PYX_ERR(1, 755, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_counts = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *)values[0]);
    __pyx_v_distance = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_distance == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 756, __pyx_L3_error)
    __pyx_v_threshold = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_threshold == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 757, __pyx_L3_error)
    __pyx_v_frequency = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_frequency == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 758, __pyx_L3_error)
    __pyx_v_subs = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 755, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.repartition_largest_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_counts), __pyx_ptype_5khmer_5_oxli_6graphs_Countgraph, 0, "counts", 0))) __PYX_ERR(1, 755, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subs), __pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition, 1, "subs", 0))) __PYX_ERR(1, 759, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_69repartition_largest_partition(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_counts, __pyx_v_distance, __pyx_v_threshold, __pyx_v_frequency, __pyx_v_subs);

  /* "khmer/_oxli/graphs.pyx":755
 *         return deref(deref(self._hg_this).partition).get_partition_id(_kmer)
 * 
 *     def repartition_largest_partition(self, Countgraph counts not None,             # <<<<<<<<<<<<<<
 *                                             unsigned int distance,
 *                                             unsigned int threshold,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_69repartition_largest_partition(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_counts, unsigned int __pyx_v_distance, unsigned int __pyx_v_threshold, unsigned int __pyx_v_frequency, struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *__pyx_v_subs) {
  std::shared_ptr<oxli::SubsetPartition>  __pyx_v_subs_ptr;
  unsigned long __pyx_v_next_largest;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<oxli::SubsetPartition>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("repartition_largest_partition", 0);

  /* "khmer/_oxli/graphs.pyx":763
 * 
 *         cdef shared_ptr[CpSubsetPartition] subs_ptr
 *         if subs is None:             # <<<<<<<<<<<<<<
 *             subs_ptr = deref(self._hg_this).partition
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_subs) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":764
 *         cdef shared_ptr[CpSubsetPartition] subs_ptr
 *         if subs is None:
 *             subs_ptr = deref(self._hg_this).partition             # <<<<<<<<<<<<<<
 *         else:
 *             subs_ptr = subs._this
 */
    __pyx_t_3 = (*__pyx_v_self->_hg_this).partition;
    __pyx_v_subs_ptr = __pyx_t_3;

    /* "khmer/_oxli/graphs.pyx":763
 * 
 *         cdef shared_ptr[CpSubsetPartition] subs_ptr
 *         if subs is None:             # <<<<<<<<<<<<<<
 *             subs_ptr = deref(self._hg_this).partition
 *         else:
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/graphs.pyx":766
 *             subs_ptr = deref(self._hg_this).partition
 *         else:
 *             subs_ptr = subs._this             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned long next_largest
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_subs->_this;
    __pyx_v_subs_ptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "khmer/_oxli/graphs.pyx":770
 *         cdef unsigned long next_largest
 *         next_largest = deref(subs_ptr).\
 *                 repartition_largest_partition(distance,             # <<<<<<<<<<<<<<
 *                                               threshold,
 *                                               frequency,
 */
  __pyx_v_next_largest = (*__pyx_v_subs_ptr).repartition_largest_partition(__pyx_v_distance, __pyx_v_threshold, __pyx_v_frequency, (*__pyx_v_counts->_cg_this));

  /* "khmer/_oxli/graphs.pyx":774
 *                                               frequency,
 *                                               deref(counts._cg_this))
 *         return next_largest             # <<<<<<<<<<<<<<
 * 
 *     def load_stop_tags(self, object filename, clear_tags=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_long(__pyx_v_next_largest); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":755
 *         return deref(deref(self._hg_this).partition).get_partition_id(_kmer)
 * 
 *     def repartition_largest_partition(self, Countgraph counts not None,             # <<<<<<<<<<<<<<
 *                                             unsigned int distance,
 *                                             unsigned int threshold,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.repartition_largest_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":776
 *         return next_largest
 * 
 *     def load_stop_tags(self, object filename, clear_tags=False):             # <<<<<<<<<<<<<<
 *         '''Load the set of stop tags.'''
 *         deref(self._hg_this).load_stop_tags(_bstring(filename), clear_tags)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_72load_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_71load_stop_tags[] = "Load the set of stop tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_72load_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_clear_tags = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_stop_tags (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_clear_tags,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clear_tags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_stop_tags") < 0)) __PYX_ERR(1, 776, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_clear_tags = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_stop_tags", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 776, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.load_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_71load_stop_tags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), __pyx_v_filename, __pyx_v_clear_tags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_71load_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_clear_tags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_stop_tags", 0);

  /* "khmer/_oxli/graphs.pyx":778
 *     def load_stop_tags(self, object filename, clear_tags=False):
 *         '''Load the set of stop tags.'''
 *         deref(self._hg_this).load_stop_tags(_bstring(filename), clear_tags)             # <<<<<<<<<<<<<<
 * 
 *     def save_stop_tags(self, object filename):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_clear_tags); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 778, __pyx_L1_error)
  try {
    (*__pyx_v_self->_hg_this).load_stop_tags(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 778, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":776
 *         return next_largest
 * 
 *     def load_stop_tags(self, object filename, clear_tags=False):             # <<<<<<<<<<<<<<
 *         '''Load the set of stop tags.'''
 *         deref(self._hg_this).load_stop_tags(_bstring(filename), clear_tags)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.load_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":780
 *         deref(self._hg_this).load_stop_tags(_bstring(filename), clear_tags)
 * 
 *     def save_stop_tags(self, object filename):             # <<<<<<<<<<<<<<
 *         '''Save the set of stop tags.'''
 *         deref(self._hg_this).save_stop_tags(_bstring(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_74save_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_73save_stop_tags[] = "Save the set of stop tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_74save_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_stop_tags (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_73save_stop_tags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_73save_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_stop_tags", 0);

  /* "khmer/_oxli/graphs.pyx":782
 *     def save_stop_tags(self, object filename):
 *         '''Save the set of stop tags.'''
 *         deref(self._hg_this).save_stop_tags(_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     def print_stop_tags(self, filename):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (*__pyx_v_self->_hg_this).save_stop_tags(__pyx_t_2);

  /* "khmer/_oxli/graphs.pyx":780
 *         deref(self._hg_this).load_stop_tags(_bstring(filename), clear_tags)
 * 
 *     def save_stop_tags(self, object filename):             # <<<<<<<<<<<<<<
 *         '''Save the set of stop tags.'''
 *         deref(self._hg_this).save_stop_tags(_bstring(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.save_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":784
 *         deref(self._hg_this).save_stop_tags(_bstring(filename))
 * 
 *     def print_stop_tags(self, filename):             # <<<<<<<<<<<<<<
 *         '''Print out the set of stop tags.'''
 *         deref(self._hg_this).print_stop_tags(_bstring(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_76print_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_75print_stop_tags[] = "Print out the set of stop tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_76print_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_stop_tags (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_75print_stop_tags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_75print_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print_stop_tags", 0);

  /* "khmer/_oxli/graphs.pyx":786
 *     def print_stop_tags(self, filename):
 *         '''Print out the set of stop tags.'''
 *         deref(self._hg_this).print_stop_tags(_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     def trim_on_stoptags(self, str sequence):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (*__pyx_v_self->_hg_this).print_stop_tags(__pyx_t_2);

  /* "khmer/_oxli/graphs.pyx":784
 *         deref(self._hg_this).save_stop_tags(_bstring(filename))
 * 
 *     def print_stop_tags(self, filename):             # <<<<<<<<<<<<<<
 *         '''Print out the set of stop tags.'''
 *         deref(self._hg_this).print_stop_tags(_bstring(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.print_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":788
 *         deref(self._hg_this).print_stop_tags(_bstring(filename))
 * 
 *     def trim_on_stoptags(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Trim the reads on the given stop tags.'''
 *         cdef size_t trim_at
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_78trim_on_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_77trim_on_stoptags[] = "Trim the reads on the given stop tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_78trim_on_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trim_on_stoptags (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sequence), (&PyString_Type), 1, "sequence", 1))) __PYX_ERR(1, 788, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_77trim_on_stoptags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject*)__pyx_v_sequence));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_77trim_on_stoptags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_sequence) {
  size_t __pyx_v_trim_at;
  oxli::Hashgraph *__pyx_v_ptr;
  std::string __pyx_v_cseq;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trim_on_stoptags", 0);

  /* "khmer/_oxli/graphs.pyx":791
 *         '''Trim the reads on the given stop tags.'''
 *         cdef size_t trim_at
 *         cdef CpHashgraph * ptr = self._hg_this.get()             # <<<<<<<<<<<<<<
 *         cdef string cseq = _bstring(sequence)
 *         with nogil:
 */
  __pyx_v_ptr = __pyx_v_self->_hg_this.get();

  /* "khmer/_oxli/graphs.pyx":792
 *         cdef size_t trim_at
 *         cdef CpHashgraph * ptr = self._hg_this.get()
 *         cdef string cseq = _bstring(sequence)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             trim_at = deref(ptr).trim_on_stoptags(cseq)
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cseq = __pyx_t_2;

  /* "khmer/_oxli/graphs.pyx":793
 *         cdef CpHashgraph * ptr = self._hg_this.get()
 *         cdef string cseq = _bstring(sequence)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             trim_at = deref(ptr).trim_on_stoptags(cseq)
 *         return sequence[:trim_at], trim_at
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":794
 *         cdef string cseq = _bstring(sequence)
 *         with nogil:
 *             trim_at = deref(ptr).trim_on_stoptags(cseq)             # <<<<<<<<<<<<<<
 *         return sequence[:trim_at], trim_at
 * 
 */
        __pyx_v_trim_at = (*__pyx_v_ptr).trim_on_stoptags(__pyx_v_cseq);
      }

      /* "khmer/_oxli/graphs.pyx":793
 *         cdef CpHashgraph * ptr = self._hg_this.get()
 *         cdef string cseq = _bstring(sequence)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             trim_at = deref(ptr).trim_on_stoptags(cseq)
 *         return sequence[:trim_at], trim_at
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":795
 *         with nogil:
 *             trim_at = deref(ptr).trim_on_stoptags(cseq)
 *         return sequence[:trim_at], trim_at             # <<<<<<<<<<<<<<
 * 
 *     def add_stop_tag(self, object kmer):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_sequence == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 795, __pyx_L1_error)
  }
  __pyx_t_1 = PySequence_GetSlice(__pyx_v_sequence, 0, __pyx_v_trim_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_trim_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":788
 *         deref(self._hg_this).print_stop_tags(_bstring(filename))
 * 
 *     def trim_on_stoptags(self, str sequence):             # <<<<<<<<<<<<<<
 *         '''Trim the reads on the given stop tags.'''
 *         cdef size_t trim_at
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.trim_on_stoptags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":797
 *         return sequence[:trim_at], trim_at
 * 
 *     def add_stop_tag(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Add this k-mer as a stop tag.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_80add_stop_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_79add_stop_tag[] = "Add this k-mer as a stop tag.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_80add_stop_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_stop_tag (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_79add_stop_tag(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v_kmer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_79add_stop_tag(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, PyObject *__pyx_v_kmer) {
  oxli::HashIntoType __pyx_v__kmer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::HashIntoType __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_stop_tag", 0);

  /* "khmer/_oxli/graphs.pyx":799
 *     def add_stop_tag(self, object kmer):
 *         '''Add this k-mer as a stop tag.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)             # <<<<<<<<<<<<<<
 *         deref(self._hg_this).add_stop_tag(_kmer)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.sanitize_hash_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_kmer); if (unlikely(__pyx_t_1 == ((oxli::HashIntoType)-1LL))) __PYX_ERR(1, 799, __pyx_L1_error)
  __pyx_v__kmer = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":800
 *         '''Add this k-mer as a stop tag.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)
 *         deref(self._hg_this).add_stop_tag(_kmer)             # <<<<<<<<<<<<<<
 * 
 *     def get_stop_tags(self):
 */
  (*__pyx_v_self->_hg_this).add_stop_tag(__pyx_v__kmer);

  /* "khmer/_oxli/graphs.pyx":797
 *         return sequence[:trim_at], trim_at
 * 
 *     def add_stop_tag(self, object kmer):             # <<<<<<<<<<<<<<
 *         '''Add this k-mer as a stop tag.'''
 *         cdef HashIntoType _kmer = self.sanitize_hash_kmer(kmer)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.add_stop_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":802
 *         deref(self._hg_this).add_stop_tag(_kmer)
 * 
 *     def get_stop_tags(self):             # <<<<<<<<<<<<<<
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_82get_stop_tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_81get_stop_tags[] = "Return a DNA list of all of the stop tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_82get_stop_tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_stop_tags (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_81get_stop_tags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_81get_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  oxli::HashIntoType __pyx_v_st;
  PyObject *__pyx_v_stop_tags = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::set<oxli::HashIntoType> ::iterator __pyx_t_2;
  std::set<oxli::HashIntoType>  *__pyx_t_3;
  oxli::HashIntoType __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_stop_tags", 0);

  /* "khmer/_oxli/graphs.pyx":805
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 *         cdef list stop_tags = []             # <<<<<<<<<<<<<<
 *         for st in deref(self._hg_this).stop_tags:
 *             stop_tags.append(deref(self._hg_this).unhash_dna(st))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_stop_tags = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":806
 *         cdef HashIntoType st
 *         cdef list stop_tags = []
 *         for st in deref(self._hg_this).stop_tags:             # <<<<<<<<<<<<<<
 *             stop_tags.append(deref(self._hg_this).unhash_dna(st))
 *         return stop_tags
 */
  __pyx_t_3 = &(*__pyx_v_self->_hg_this).stop_tags;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_st = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":807
 *         cdef list stop_tags = []
 *         for st in deref(self._hg_this).stop_tags:
 *             stop_tags.append(deref(self._hg_this).unhash_dna(st))             # <<<<<<<<<<<<<<
 *         return stop_tags
 * 
 */
    try {
      __pyx_t_5 = (*__pyx_v_self->_hg_this).unhash_dna(__pyx_v_st);
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 807, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_stop_tags, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 807, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "khmer/_oxli/graphs.pyx":806
 *         cdef HashIntoType st
 *         cdef list stop_tags = []
 *         for st in deref(self._hg_this).stop_tags:             # <<<<<<<<<<<<<<
 *             stop_tags.append(deref(self._hg_this).unhash_dna(st))
 *         return stop_tags
 */
  }

  /* "khmer/_oxli/graphs.pyx":808
 *         for st in deref(self._hg_this).stop_tags:
 *             stop_tags.append(deref(self._hg_this).unhash_dna(st))
 *         return stop_tags             # <<<<<<<<<<<<<<
 * 
 *     def iter_stop_tags(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_stop_tags);
  __pyx_r = __pyx_v_stop_tags;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":802
 *         deref(self._hg_this).add_stop_tag(_kmer)
 * 
 *     def get_stop_tags(self):             # <<<<<<<<<<<<<<
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.get_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stop_tags);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_6graphs_9Hashgraph_85generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/graphs.pyx":810
 *         return stop_tags
 * 
 *     def iter_stop_tags(self):             # <<<<<<<<<<<<<<
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_84iter_stop_tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_83iter_stop_tags[] = "Return a DNA list of all of the stop tags.";
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_84iter_stop_tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_stop_tags (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_83iter_stop_tags(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_83iter_stop_tags(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_stop_tags", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *)__pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags(__pyx_ptype_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 810, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_6graphs_9Hashgraph_85generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_stop_tags, __pyx_n_s_Hashgraph_iter_stop_tags, __pyx_n_s_khmer__oxli_graphs); if (unlikely(!gen)) __PYX_ERR(1, 810, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.iter_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_6graphs_9Hashgraph_85generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::set<oxli::HashIntoType> ::iterator __pyx_t_1;
  std::set<oxli::HashIntoType>  *__pyx_t_2;
  oxli::HashIntoType __pyx_t_3;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_stop_tags", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 810, __pyx_L1_error)

  /* "khmer/_oxli/graphs.pyx":813
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 *         for st in deref(self._hg_this).stop_tags:             # <<<<<<<<<<<<<<
 *             yield deref(self._hg_this).unhash_dna(st)
 * 
 */
  __pyx_t_2 = &(*__pyx_cur_scope->__pyx_v_self->_hg_this).stop_tags;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_st = __pyx_t_3;

    /* "khmer/_oxli/graphs.pyx":814
 *         cdef HashIntoType st
 *         for st in deref(self._hg_this).stop_tags:
 *             yield deref(self._hg_this).unhash_dna(st)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_t_4 = (*__pyx_cur_scope->__pyx_v_self->_hg_this).unhash_dna(__pyx_cur_scope->__pyx_v_st);
    } catch(...) {
      oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(1, 814, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 814, __pyx_L1_error)

    /* "khmer/_oxli/graphs.pyx":813
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 *         for st in deref(self._hg_this).stop_tags:             # <<<<<<<<<<<<<<
 *             yield deref(self._hg_this).unhash_dna(st)
 * 
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "khmer/_oxli/graphs.pyx":810
 *         return stop_tags
 * 
 *     def iter_stop_tags(self):             # <<<<<<<<<<<<<<
 *         '''Return a DNA list of all of the stop tags.'''
 *         cdef HashIntoType st
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("iter_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_87__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_87__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_86__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_86__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_89__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_89__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_88__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Hashgraph_88__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Hashgraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":819
 * cdef class Countgraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_starting_size;
  int __pyx_v_n_tables;
  PyObject *__pyx_v_primes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_starting_size,&__pyx_n_s_n_tables,&__pyx_n_s_primes,0};
    PyObject* values[4] = {0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":820
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):             # <<<<<<<<<<<<<<
 *         if primes is None:
 *             primes = list()
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_starting_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 819, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 819, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 819, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 819, __pyx_L3_error)
    __pyx_v_starting_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_starting_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 819, __pyx_L3_error)
    __pyx_v_n_tables = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_tables == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 819, __pyx_L3_error)
    __pyx_v_primes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 819, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Countgraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_10Countgraph___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *)__pyx_v_self), __pyx_v_k, __pyx_v_starting_size, __pyx_v_n_tables, __pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":819
 * cdef class Countgraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_10Countgraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes) {
  std::vector<uint64_t>  __pyx_v__primes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<uint64_t>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::shared_ptr<oxli::Countgraph>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":821
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  __pyx_t_1 = (__pyx_v_primes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":822
 *                   primes=None):
 *         if primes is None:
 *             primes = list()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Countgraph:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_primes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":821
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":824
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Countgraph:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Countgraph));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":825
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Countgraph:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_primes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 825, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "khmer/_oxli/graphs.pyx":826
 *         if type(self) is Countgraph:
 *             if primes:
 *                 _primes = primes             # <<<<<<<<<<<<<<
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_v_primes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 826, __pyx_L1_error)
      __pyx_v__primes = __pyx_t_4;

      /* "khmer/_oxli/graphs.pyx":825
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Countgraph:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/graphs.pyx":828
 *                 _primes = primes
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)             # <<<<<<<<<<<<<<
 *             self._cg_this = make_shared[CpCountgraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._cg_this
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_tables); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_uint64_t(__pyx_v_starting_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v__primes = __pyx_t_4;
    }
    __pyx_L5:;

    /* "khmer/_oxli/graphs.pyx":829
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._cg_this = make_shared[CpCountgraph](k, _primes)             # <<<<<<<<<<<<<<
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._cg_this
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 */
    try {
      __pyx_t_11 = std::make_shared<oxli::Countgraph>(__pyx_v_k, __pyx_v__primes);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 829, __pyx_L1_error)
    }
    __pyx_v_self->_cg_this = __pyx_t_11;

    /* "khmer/_oxli/graphs.pyx":830
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._cg_this = make_shared[CpCountgraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._cg_this             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 */
    __pyx_v_self->__pyx_base._hg_this = ((std::shared_ptr<oxli::Hashgraph> )__pyx_v_self->_cg_this);

    /* "khmer/_oxli/graphs.pyx":831
 *             self._cg_this = make_shared[CpCountgraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._cg_this
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this             # <<<<<<<<<<<<<<
 * 
 *     def do_subset_partition_with_abundance(self, BoundedCounterType min_count,
 */
    __pyx_v_self->__pyx_base.__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->__pyx_base._hg_this);

    /* "khmer/_oxli/graphs.pyx":824
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Countgraph:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":819
 * cdef class Countgraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("khmer._oxli.graphs.Countgraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":833
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 *     def do_subset_partition_with_abundance(self, BoundedCounterType min_count,             # <<<<<<<<<<<<<<
 *                                                  BoundedCounterType max_count,
 *                                                  object start_kmer=0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_3do_subset_partition_with_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_3do_subset_partition_with_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  oxli::BoundedCounterType __pyx_v_min_count;
  oxli::BoundedCounterType __pyx_v_max_count;
  PyObject *__pyx_v_start_kmer = 0;
  PyObject *__pyx_v_end_kmer = 0;
  bool __pyx_v_break_on_stop_tags;
  bool __pyx_v_stop_big_traversals;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_subset_partition_with_abundance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_count,&__pyx_n_s_max_count,&__pyx_n_s_start_kmer,&__pyx_n_s_end_kmer,&__pyx_n_s_break_on_stop_tags,&__pyx_n_s_stop_big_traversals,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("do_subset_partition_with_abundance", 0, 2, 6, 1); __PYX_ERR(1, 833, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_kmer);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_kmer);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_break_on_stop_tags);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop_big_traversals);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "do_subset_partition_with_abundance") < 0)) __PYX_ERR(1, 833, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_min_count = __Pyx_PyInt_As_oxli_3a__3a_BoundedCounterType(values[0]); if (unlikely((__pyx_v_min_count == ((oxli::BoundedCounterType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 833, __pyx_L3_error)
    __pyx_v_max_count = __Pyx_PyInt_As_oxli_3a__3a_BoundedCounterType(values[1]); if (unlikely((__pyx_v_max_count == ((oxli::BoundedCounterType)-1)) && PyErr_Occurred())) __PYX_ERR(1, 834, __pyx_L3_error)
    __pyx_v_start_kmer = values[2];
    __pyx_v_end_kmer = values[3];
    if (values[4]) {
      __pyx_v_break_on_stop_tags = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_break_on_stop_tags == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 837, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/graphs.pyx":837
 *                                                  object start_kmer=0,
 *                                                  object end_kmer=0,
 *                                                  bool break_on_stop_tags=False,             # <<<<<<<<<<<<<<
 *                                                  bool stop_big_traversals=False):
 * 
 */
      __pyx_v_break_on_stop_tags = ((bool)0);
    }
    if (values[5]) {
      __pyx_v_stop_big_traversals = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_stop_big_traversals == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/graphs.pyx":838
 *                                                  object end_kmer=0,
 *                                                  bool break_on_stop_tags=False,
 *                                                  bool stop_big_traversals=False):             # <<<<<<<<<<<<<<
 * 
 *         cdef HashIntoType _start_kmer = self.sanitize_hash_kmer(start_kmer)
 */
      __pyx_v_stop_big_traversals = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_subset_partition_with_abundance", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 833, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Countgraph.do_subset_partition_with_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_2do_subset_partition_with_abundance(((struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *)__pyx_v_self), __pyx_v_min_count, __pyx_v_max_count, __pyx_v_start_kmer, __pyx_v_end_kmer, __pyx_v_break_on_stop_tags, __pyx_v_stop_big_traversals);

  /* "khmer/_oxli/graphs.pyx":833
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 *     def do_subset_partition_with_abundance(self, BoundedCounterType min_count,             # <<<<<<<<<<<<<<
 *                                                  BoundedCounterType max_count,
 *                                                  object start_kmer=0,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_2do_subset_partition_with_abundance(struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self, oxli::BoundedCounterType __pyx_v_min_count, oxli::BoundedCounterType __pyx_v_max_count, PyObject *__pyx_v_start_kmer, PyObject *__pyx_v_end_kmer, bool __pyx_v_break_on_stop_tags, bool __pyx_v_stop_big_traversals) {
  oxli::HashIntoType __pyx_v__start_kmer;
  oxli::HashIntoType __pyx_v__end_kmer;
  CYTHON_UNUSED bool __pyx_v__break_on_stop_tags;
  CYTHON_UNUSED bool __pyx_v__stop_big_traversals;
  struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *__pyx_v_subset = 0;
  std::shared_ptr<oxli::SubsetPartition>  __pyx_v_subset_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  oxli::HashIntoType __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::shared_ptr<oxli::SubsetPartition>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_subset_partition_with_abundance", 0);

  /* "khmer/_oxli/graphs.pyx":840
 *                                                  bool stop_big_traversals=False):
 * 
 *         cdef HashIntoType _start_kmer = self.sanitize_hash_kmer(start_kmer)             # <<<<<<<<<<<<<<
 *         cdef HashIntoType _end_kmer = self.sanitize_hash_kmer(end_kmer)
 *         cdef bool _break_on_stop_tags = break_on_stop_tags
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Countgraph *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.sanitize_hash_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_start_kmer); if (unlikely(__pyx_t_1 == ((oxli::HashIntoType)-1LL))) __PYX_ERR(1, 840, __pyx_L1_error)
  __pyx_v__start_kmer = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":841
 * 
 *         cdef HashIntoType _start_kmer = self.sanitize_hash_kmer(start_kmer)
 *         cdef HashIntoType _end_kmer = self.sanitize_hash_kmer(end_kmer)             # <<<<<<<<<<<<<<
 *         cdef bool _break_on_stop_tags = break_on_stop_tags
 *         cdef bool _stop_big_traversals = stop_big_traversals
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Countgraph *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.sanitize_hash_kmer(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_end_kmer); if (unlikely(__pyx_t_1 == ((oxli::HashIntoType)-1LL))) __PYX_ERR(1, 841, __pyx_L1_error)
  __pyx_v__end_kmer = __pyx_t_1;

  /* "khmer/_oxli/graphs.pyx":842
 *         cdef HashIntoType _start_kmer = self.sanitize_hash_kmer(start_kmer)
 *         cdef HashIntoType _end_kmer = self.sanitize_hash_kmer(end_kmer)
 *         cdef bool _break_on_stop_tags = break_on_stop_tags             # <<<<<<<<<<<<<<
 *         cdef bool _stop_big_traversals = stop_big_traversals
 *         cdef SubsetPartition subset = SubsetPartition(self)
 */
  __pyx_v__break_on_stop_tags = __pyx_v_break_on_stop_tags;

  /* "khmer/_oxli/graphs.pyx":843
 *         cdef HashIntoType _end_kmer = self.sanitize_hash_kmer(end_kmer)
 *         cdef bool _break_on_stop_tags = break_on_stop_tags
 *         cdef bool _stop_big_traversals = stop_big_traversals             # <<<<<<<<<<<<<<
 *         cdef SubsetPartition subset = SubsetPartition(self)
 *         cdef shared_ptr[CpSubsetPartition] subset_ptr = subset._this
 */
  __pyx_v__stop_big_traversals = __pyx_v_stop_big_traversals;

  /* "khmer/_oxli/graphs.pyx":844
 *         cdef bool _break_on_stop_tags = break_on_stop_tags
 *         cdef bool _stop_big_traversals = stop_big_traversals
 *         cdef SubsetPartition subset = SubsetPartition(self)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CpSubsetPartition] subset_ptr = subset._this
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_subset = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":845
 *         cdef bool _stop_big_traversals = stop_big_traversals
 *         cdef SubsetPartition subset = SubsetPartition(self)
 *         cdef shared_ptr[CpSubsetPartition] subset_ptr = subset._this             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_3 = __pyx_v_subset->_this;
  __pyx_v_subset_ptr = __pyx_t_3;

  /* "khmer/_oxli/graphs.pyx":847
 *         cdef shared_ptr[CpSubsetPartition] subset_ptr = subset._this
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(subset_ptr).do_partition_with_abundance(_start_kmer,
 *                                                           _end_kmer,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "khmer/_oxli/graphs.pyx":848
 * 
 *         with nogil:
 *             deref(subset_ptr).do_partition_with_abundance(_start_kmer,             # <<<<<<<<<<<<<<
 *                                                           _end_kmer,
 *                                                           min_count,
 */
        try {
          (*__pyx_v_subset_ptr).do_partition_with_abundance(__pyx_v__start_kmer, __pyx_v__end_kmer, __pyx_v_min_count, __pyx_v_max_count, __pyx_v_break_on_stop_tags, __pyx_v_stop_big_traversals);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(1, 848, __pyx_L4_error)
        }
      }

      /* "khmer/_oxli/graphs.pyx":847
 *         cdef shared_ptr[CpSubsetPartition] subset_ptr = subset._this
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             deref(subset_ptr).do_partition_with_abundance(_start_kmer,
 *                                                           _end_kmer,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "khmer/_oxli/graphs.pyx":855
 *                                                           stop_big_traversals)
 * 
 *         return subset             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_subset));
  __pyx_r = ((PyObject *)__pyx_v_subset);
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":833
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 *     def do_subset_partition_with_abundance(self, BoundedCounterType min_count,             # <<<<<<<<<<<<<<
 *                                                  BoundedCounterType max_count,
 *                                                  object start_kmer=0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.graphs.Countgraph.do_subset_partition_with_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_subset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_4__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Countgraph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_6__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_10Countgraph_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Countgraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":860
 * cdef class SmallCountgraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_starting_size;
  int __pyx_v_n_tables;
  PyObject *__pyx_v_primes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_starting_size,&__pyx_n_s_n_tables,&__pyx_n_s_primes,0};
    PyObject* values[4] = {0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":861
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):             # <<<<<<<<<<<<<<
 *         if primes is None:
 *             primes = list()
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_starting_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 860, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 860, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 860, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 860, __pyx_L3_error)
    __pyx_v_starting_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_starting_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 860, __pyx_L3_error)
    __pyx_v_n_tables = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_tables == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 860, __pyx_L3_error)
    __pyx_v_primes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 860, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCountgraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *)__pyx_v_self), __pyx_v_k, __pyx_v_starting_size, __pyx_v_n_tables, __pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":860
 * cdef class SmallCountgraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes) {
  std::vector<uint64_t>  __pyx_v__primes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<uint64_t>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::shared_ptr<oxli::SmallCountgraph>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":862
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  __pyx_t_1 = (__pyx_v_primes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":863
 *                   primes=None):
 *         if primes is None:
 *             primes = list()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCountgraph:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_primes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":862
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":865
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCountgraph:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCountgraph));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":866
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCountgraph:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_primes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 866, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "khmer/_oxli/graphs.pyx":867
 *         if type(self) is SmallCountgraph:
 *             if primes:
 *                 _primes = primes             # <<<<<<<<<<<<<<
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_v_primes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 867, __pyx_L1_error)
      __pyx_v__primes = __pyx_t_4;

      /* "khmer/_oxli/graphs.pyx":866
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCountgraph:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/graphs.pyx":869
 *                 _primes = primes
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)             # <<<<<<<<<<<<<<
 *             self._sg_this = make_shared[CpSmallCountgraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._sg_this
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_tables); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_uint64_t(__pyx_v_starting_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 869, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 869, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v__primes = __pyx_t_4;
    }
    __pyx_L5:;

    /* "khmer/_oxli/graphs.pyx":870
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._sg_this = make_shared[CpSmallCountgraph](k, _primes)             # <<<<<<<<<<<<<<
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._sg_this
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 */
    try {
      __pyx_t_11 = std::make_shared<oxli::SmallCountgraph>(__pyx_v_k, __pyx_v__primes);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 870, __pyx_L1_error)
    }
    __pyx_v_self->_sg_this = __pyx_t_11;

    /* "khmer/_oxli/graphs.pyx":871
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._sg_this = make_shared[CpSmallCountgraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._sg_this             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 */
    __pyx_v_self->__pyx_base._hg_this = ((std::shared_ptr<oxli::Hashgraph> )__pyx_v_self->_sg_this);

    /* "khmer/_oxli/graphs.pyx":872
 *             self._sg_this = make_shared[CpSmallCountgraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._sg_this
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this             # <<<<<<<<<<<<<<
 * 
 *     def get_raw_tables(self):
 */
    __pyx_v_self->__pyx_base.__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->__pyx_base._hg_this);

    /* "khmer/_oxli/graphs.pyx":865
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is SmallCountgraph:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":860
 * cdef class SmallCountgraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCountgraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":874
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 *     def get_raw_tables(self):             # <<<<<<<<<<<<<<
 *         cdef uint8_t ** table_ptrs = deref(self._sg_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._sg_this).get_tablesizes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_3get_raw_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_3get_raw_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_tables (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_2get_raw_tables(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_2get_raw_tables(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self) {
  uint8_t **__pyx_v_table_ptrs;
  std::vector<uint64_t>  __pyx_v_sizes;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_raw_tables", 0);

  /* "khmer/_oxli/graphs.pyx":875
 * 
 *     def get_raw_tables(self):
 *         cdef uint8_t ** table_ptrs = deref(self._sg_this).get_raw_tables()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] sizes = deref(self._sg_this).get_tablesizes()
 *         for i in range(len(sizes)):
 */
  __pyx_v_table_ptrs = (*__pyx_v_self->_sg_this).get_raw_tables();

  /* "khmer/_oxli/graphs.pyx":876
 *     def get_raw_tables(self):
 *         cdef uint8_t ** table_ptrs = deref(self._sg_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._sg_this).get_tablesizes()             # <<<<<<<<<<<<<<
 *         for i in range(len(sizes)):
 *             sizes[i] = sizes[i] // 2 + 1
 */
  __pyx_v_sizes = (*__pyx_v_self->_sg_this).get_tablesizes();

  /* "khmer/_oxli/graphs.pyx":877
 *         cdef uint8_t ** table_ptrs = deref(self._sg_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._sg_this).get_tablesizes()
 *         for i in range(len(sizes)):             # <<<<<<<<<<<<<<
 *             sizes[i] = sizes[i] // 2 + 1
 *         return self._get_raw_tables(table_ptrs, sizes)
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_uint64_t(__pyx_v_sizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "khmer/_oxli/graphs.pyx":878
 *         cdef vector[uint64_t] sizes = deref(self._sg_this).get_tablesizes()
 *         for i in range(len(sizes)):
 *             sizes[i] = sizes[i] // 2 + 1             # <<<<<<<<<<<<<<
 *         return self._get_raw_tables(table_ptrs, sizes)
 * 
 */
    (__pyx_v_sizes[__pyx_v_i]) = (((__pyx_v_sizes[__pyx_v_i]) / 2) + 1);
  }

  /* "khmer/_oxli/graphs.pyx":879
 *         for i in range(len(sizes)):
 *             sizes[i] = sizes[i] // 2 + 1
 *         return self._get_raw_tables(table_ptrs, sizes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCountgraph *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base._get_raw_tables(((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)__pyx_v_self), __pyx_v_table_ptrs, __pyx_v_sizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/graphs.pyx":874
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 *     def get_raw_tables(self):             # <<<<<<<<<<<<<<
 *         cdef uint8_t ** table_ptrs = deref(self._sg_this).get_raw_tables()
 *         cdef vector[uint64_t] sizes = deref(self._sg_this).get_tablesizes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCountgraph.get_raw_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_4__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCountgraph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_6__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_15SmallCountgraph_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.SmallCountgraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":885
 * cdef class Nodegraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_k;
  uint64_t __pyx_v_starting_size;
  int __pyx_v_n_tables;
  PyObject *__pyx_v_primes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_starting_size,&__pyx_n_s_n_tables,&__pyx_n_s_primes,0};
    PyObject* values[4] = {0,0,0,0};

    /* "khmer/_oxli/graphs.pyx":886
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):             # <<<<<<<<<<<<<<
 *         if primes is None:
 *             primes = list()
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_starting_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_primes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 885, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 885, __pyx_L3_error)
    __pyx_v_starting_size = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_starting_size == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 885, __pyx_L3_error)
    __pyx_v_n_tables = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_tables == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 885, __pyx_L3_error)
    __pyx_v_primes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 885, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodegraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph___cinit__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)__pyx_v_self), __pyx_v_k, __pyx_v_starting_size, __pyx_v_n_tables, __pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":885
 * cdef class Nodegraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph___cinit__(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self, int __pyx_v_k, uint64_t __pyx_v_starting_size, int __pyx_v_n_tables, PyObject *__pyx_v_primes) {
  std::vector<uint64_t>  __pyx_v__primes;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<uint64_t>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::shared_ptr<oxli::Nodegraph>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_primes);

  /* "khmer/_oxli/graphs.pyx":887
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  __pyx_t_1 = (__pyx_v_primes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/graphs.pyx":888
 *                   primes=None):
 *         if primes is None:
 *             primes = list()             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodegraph:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_primes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/graphs.pyx":887
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,
 *                   primes=None):
 *         if primes is None:             # <<<<<<<<<<<<<<
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":890
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodegraph:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/graphs.pyx":891
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodegraph:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_primes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 891, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "khmer/_oxli/graphs.pyx":892
 *         if type(self) is Nodegraph:
 *             if primes:
 *                 _primes = primes             # <<<<<<<<<<<<<<
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_v_primes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 892, __pyx_L1_error)
      __pyx_v__primes = __pyx_t_4;

      /* "khmer/_oxli/graphs.pyx":891
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodegraph:
 *             if primes:             # <<<<<<<<<<<<<<
 *                 _primes = primes
 *             else:
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/graphs.pyx":894
 *                 _primes = primes
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)             # <<<<<<<<<<<<<<
 *             self._ng_this = make_shared[CpNodegraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._ng_this
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_n_tables); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_uint64_t(__pyx_v_starting_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 894, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 894, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 894, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 894, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_4 = __pyx_convert_vector_from_py_uint64_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v__primes = __pyx_t_4;
    }
    __pyx_L5:;

    /* "khmer/_oxli/graphs.pyx":895
 *             else:
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._ng_this = make_shared[CpNodegraph](k, _primes)             # <<<<<<<<<<<<<<
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._ng_this
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 */
    try {
      __pyx_t_11 = std::make_shared<oxli::Nodegraph>(__pyx_v_k, __pyx_v__primes);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 895, __pyx_L1_error)
    }
    __pyx_v_self->_ng_this = __pyx_t_11;

    /* "khmer/_oxli/graphs.pyx":896
 *                 _primes = get_n_primes_near_x(n_tables, starting_size)
 *             self._ng_this = make_shared[CpNodegraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._ng_this             # <<<<<<<<<<<<<<
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 */
    __pyx_v_self->__pyx_base._hg_this = ((std::shared_ptr<oxli::Hashgraph> )__pyx_v_self->_ng_this);

    /* "khmer/_oxli/graphs.pyx":897
 *             self._ng_this = make_shared[CpNodegraph](k, _primes)
 *             self._hg_this = <shared_ptr[CpHashgraph]>self._ng_this
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this             # <<<<<<<<<<<<<<
 * 
 *     def update(self, Nodegraph other):
 */
    __pyx_v_self->__pyx_base.__pyx_base._ht_this = ((std::shared_ptr<oxli::Hashtable> )__pyx_v_self->__pyx_base._hg_this);

    /* "khmer/_oxli/graphs.pyx":890
 *             primes = list()
 *         cdef vector[uint64_t] _primes
 *         if type(self) is Nodegraph:             # <<<<<<<<<<<<<<
 *             if primes:
 *                 _primes = primes
 */
  }

  /* "khmer/_oxli/graphs.pyx":885
 * cdef class Nodegraph(Hashgraph):
 * 
 *     def __cinit__(self, int k, uint64_t starting_size, int n_tables,             # <<<<<<<<<<<<<<
 *                   primes=None):
 *         if primes is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodegraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/graphs.pyx":899
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 *     def update(self, Nodegraph other):             # <<<<<<<<<<<<<<
 *         deref(self._ng_this).update_from(deref(other._ng_this))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph, 1, "other", 0))) __PYX_ERR(1, 899, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_2update(((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)__pyx_v_self), ((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_2update(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "khmer/_oxli/graphs.pyx":900
 * 
 *     def update(self, Nodegraph other):
 *         deref(self._ng_this).update_from(deref(other._ng_this))             # <<<<<<<<<<<<<<
 */
  try {
    (*__pyx_v_self->_ng_this).update_from((*__pyx_v_other->_ng_this));
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 900, __pyx_L1_error)
  }

  /* "khmer/_oxli/graphs.pyx":899
 *             self._ht_this = <shared_ptr[CpHashtable]>self._hg_this
 * 
 *     def update(self, Nodegraph other):             # <<<<<<<<<<<<<<
 *         deref(self._ng_this).update_from(deref(other._ng_this))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodegraph.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_4__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodegraph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_6__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_6graphs_9Nodegraph_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.graphs.Nodegraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_uint64_t")
 * cdef object __pyx_convert_vector_to_py_uint64_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_uint64_t(const std::vector<uint64_t>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_uint64_t", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_uint64_t")
 * cdef object __pyx_convert_vector_to_py_uint64_t(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_uint64_t")
 * cdef object __pyx_convert_vector_to_py_uint64_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_uint64_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType(const std::vector<oxli::BoundedCounterType>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType")
 * cdef object __pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType")
 * cdef object __pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_oxli_3a__3a_BoundedCounterType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType(const std::vector<oxli::HashIntoType>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType")
 * cdef object __pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_oxli_3a__3a_HashIntoType((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType")
 * cdef object __pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_oxli_3a__3a_HashIntoType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_uint32_t(const std::vector<uint32_t>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_uint32_t", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_uint32_t")
 * cdef object __pyx_convert_vector_to_py_uint32_t(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_uint32_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_uint32_t")
 * cdef object __pyx_convert_vector_to_py_uint32_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_uint32_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_uint64_t")
 * cdef vector[X] __pyx_convert_vector_from_py_uint64_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<uint64_t>  __pyx_convert_vector_from_py_uint64_t(PyObject *__pyx_v_o) {
  std::vector<uint64_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<uint64_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_uint64_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_uint64_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((uint64_t)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_uint64_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_uint64_t")
 * cdef vector[X] __pyx_convert_vector_from_py_uint64_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_uint64_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;
  new((void*)&(p->_ht_this)) std::shared_ptr<oxli::Hashtable> ();
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_ht_this);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_Hashtable[] = {
  {"sanitize_seq_kmer", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_1sanitize_seq_kmer, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer},
  {"sanitize_kmer", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_3sanitize_kmer, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_2sanitize_kmer},
  {"_kmer_type_error", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_5_kmer_type_error, METH_O, 0},
  {"count", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_7count, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_6count},
  {"add", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_9add, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_8add},
  {"hash", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_11hash, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_10hash},
  {"reverse_hash", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_13reverse_hash, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_12reverse_hash},
  {"get", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_15get, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_14get},
  {"ksize", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_17ksize, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_16ksize},
  {"hashsizes", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_19hashsizes, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_18hashsizes},
  {"get_kmers", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_21get_kmers, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_20get_kmers},
  {"consume", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_23consume, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_22consume},
  {"get_kmer_counts", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_25get_kmer_counts, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_24get_kmer_counts},
  {"get_min_count", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_27get_min_count, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_26get_min_count},
  {"get_max_count", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_29get_max_count, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_28get_max_count},
  {"get_median_count", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_31get_median_count, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_30get_median_count},
  {"median_at_least", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_33median_at_least, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_32median_at_least},
  {"get_kmer_hashes", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_35get_kmer_hashes, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_34get_kmer_hashes},
  {"trim_on_abundance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_37trim_on_abundance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_36trim_on_abundance},
  {"trim_below_abundance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_39trim_below_abundance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_38trim_below_abundance},
  {"find_spectral_error_positions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_41find_spectral_error_positions, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_40find_spectral_error_positions},
  {"consume_seqfile", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_43consume_seqfile, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_42consume_seqfile},
  {"consume_seqfile_with_mask", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_45consume_seqfile_with_mask, METH_VARARGS|METH_KEYWORDS, 0},
  {"consume_seqfile_banding", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_47consume_seqfile_banding, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_46consume_seqfile_banding},
  {"consume_seqfile_banding_with_mask", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_49consume_seqfile_banding_with_mask, METH_VARARGS|METH_KEYWORDS, 0},
  {"abundance_distribution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_51abundance_distribution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_50abundance_distribution},
  {"save", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_53save, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_52save},
  {"load", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_55load, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_54load},
  {"n_unique_kmers", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_57n_unique_kmers, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_56n_unique_kmers},
  {"n_occupied", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_59n_occupied, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_58n_occupied},
  {"n_tables", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_61n_tables, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashtable_60n_tables},
  {"set_use_bigcount", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_63set_use_bigcount, METH_O, 0},
  {"get_use_bigcount", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_65get_use_bigcount, METH_NOARGS, 0},
  {"get_kmer_hashes_as_hashset", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_67get_kmer_hashes_as_hashset, METH_O, 0},
  {"get_raw_tables", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_69get_raw_tables, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_71__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashtable_73__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_Hashtable = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.Hashtable", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_Hashtable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_QFCounttable __pyx_vtable_5khmer_5_oxli_6graphs_QFCounttable;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_QFCounttable(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_QFCounttable;
  new((void*)&(p->_qf_this)) std::shared_ptr<oxli::QFCounttable> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_QFCounttable(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_qf_this);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_QFCounttable[] = {
  {"load", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_3load, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_12QFCounttable_2load},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_12QFCounttable_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_QFCounttable = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.QFCounttable", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_QFCounttable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_QFCounttable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Count kmers using a counting quotient filter.\n\n    The counting quotient filter (CQF) is an extension of the quotient filter\n    that supports counting in addition to simple membership testing. A CQF has\n    better cache locality compared to (Small)Counttable which increases\n    performance.\n\n    Each new k-mer uses one slot, and the number of slots used per k-mer\n    increases the more often the same k-mer is entered into the CQF. As a result\n    the CQF can be \"full\" and will stop accepting calls to `add` and `count`.\n\n    Parameters\n    ----------\n    k : integer\n        k-mer size\n\n    size : integer\n        Set the number of slots used by the counting quotient filter. This\n        determines the amount of memory used and how many k-mers can be entered\n        into the datastructure. Each slot uses roughly 1.3 bytes.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_QFCounttable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_QFCounttable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCounttable __pyx_vtable_5khmer_5_oxli_6graphs_SmallCounttable;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_SmallCounttable(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCounttable;
  new((void*)&(p->_st_this)) std::shared_ptr<oxli::SmallCounttable> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_SmallCounttable(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_st_this);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_SmallCounttable[] = {
  {"get_raw_tables", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_3get_raw_tables, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_15SmallCounttable_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_SmallCounttable = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.SmallCounttable", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCounttable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_SmallCounttable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_SmallCounttable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_SmallCounttable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Counttable __pyx_vtable_5khmer_5_oxli_6graphs_Counttable;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Counttable(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_Counttable;
  new((void*)&(p->_ct_this)) std::shared_ptr<oxli::Counttable> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_10Counttable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Counttable(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_ct_this);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_Counttable[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_10Counttable_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_10Counttable_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_Counttable = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.Counttable", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_Counttable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Counttable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_Counttable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_Counttable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_CyclicCounttable __pyx_vtable_5khmer_5_oxli_6graphs_CyclicCounttable;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_CyclicCounttable(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_CyclicCounttable;
  new((void*)&(p->_cct_this)) std::shared_ptr<oxli::CyclicCounttable> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_CyclicCounttable(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_cct_this);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_CyclicCounttable[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_16CyclicCounttable_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.CyclicCounttable", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_CyclicCounttable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_CyclicCounttable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_CyclicCounttable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_CyclicCounttable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Nodetable __pyx_vtable_5khmer_5_oxli_6graphs_Nodetable;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Nodetable(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_Nodetable;
  new((void*)&(p->_nt_this)) std::shared_ptr<oxli::Nodetable> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Nodetable(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_nt_this);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_Nodetable[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Nodetable_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_Nodetable = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.Nodetable", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodetable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Nodetable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_Nodetable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_Nodetable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashgraph __pyx_vtable_5khmer_5_oxli_6graphs_Hashgraph;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Hashgraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashtable(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashgraph;
  new((void*)&(p->_hg_this)) std::shared_ptr<oxli::Hashgraph> ();
  new((void*)&(p->partitions_ptr)) std::shared_ptr<oxli::SubsetPartition> ();
  p->partitions = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashgraph(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_hg_this);
  __Pyx_call_destructor(p->partitions_ptr);
  Py_CLEAR(p->partitions);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashtable(o);
}

static int __pyx_tp_traverse_5khmer_5_oxli_6graphs_Hashgraph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)o;
  e = ((likely(__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable)) ? ((__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable->tp_traverse) ? __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_5khmer_5_oxli_6graphs_Hashgraph)); if (e) return e;
  if (p->partitions) {
    e = (*v)(((PyObject *)p->partitions), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_6graphs_Hashgraph(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph *)o;
  if (likely(__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable)) { if (__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable->tp_clear) __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_5khmer_5_oxli_6graphs_Hashgraph);
  tmp = ((PyObject*)p->partitions);
  p->partitions = ((struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_6graphs_9Hashgraph_partition(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_9partition_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_6graphs_9Hashgraph_n_tags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_6n_tags_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_6graphs_9Hashgraph_tag_density(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_1__get__(o);
}

static int __pyx_setprop_5khmer_5_oxli_6graphs_9Hashgraph_tag_density(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11tag_density_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_Hashgraph[] = {
  {"neighbors", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_3neighbors, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_2neighbors},
  {"calc_connected_graph_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_5calc_connected_graph_size, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_4calc_connected_graph_size},
  {"kmer_degree", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_7kmer_degree, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_6kmer_degree},
  {"count_kmers_within_radius", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_9count_kmers_within_radius, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_8count_kmers_within_radius},
  {"find_high_degree_nodes", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_11find_high_degree_nodes, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_10find_high_degree_nodes},
  {"traverse_linear_path", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_13traverse_linear_path, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_12traverse_linear_path},
  {"extract_unique_paths", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_15extract_unique_paths, METH_VARARGS|METH_KEYWORDS, 0},
  {"consume_and_tag", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_17consume_and_tag, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_16consume_and_tag},
  {"get_tags_and_positions", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_19get_tags_and_positions, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_18get_tags_and_positions},
  {"get_tags_for_sequence", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_21get_tags_for_sequence, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_20get_tags_for_sequence},
  {"find_all_tags_list", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_23find_all_tags_list, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_22find_all_tags_list},
  {"consume_seqfile_and_tag", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_25consume_seqfile_and_tag, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_24consume_seqfile_and_tag},
  {"print_tagset", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_27print_tagset, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_26print_tagset},
  {"add_tag", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_29add_tag, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_28add_tag},
  {"get_tagset", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_31get_tagset, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_30get_tagset},
  {"tags", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_33tags, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_32tags},
  {"load_tagset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_36load_tagset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_35load_tagset},
  {"save_tagset", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_38save_tagset, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_37save_tagset},
  {"divide_tags_into_subsets", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_40divide_tags_into_subsets, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_39divide_tags_into_subsets},
  {"do_subset_partition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_42do_subset_partition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_41do_subset_partition},
  {"find_all_tags", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_44find_all_tags, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_43find_all_tags},
  {"assign_partition_id", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_46assign_partition_id, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_45assign_partition_id},
  {"output_partitions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_48output_partitions, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_47output_partitions},
  {"load_partitionmap", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_50load_partitionmap, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_49load_partitionmap},
  {"save_partitionmap", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_52save_partitionmap, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_51save_partitionmap},
  {"_validate_partitionmap", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_54_validate_partitionmap, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_53_validate_partitionmap},
  {"consume_partitioned_fasta", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_56consume_partitioned_fasta, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_55consume_partitioned_fasta},
  {"merge_subset", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_58merge_subset, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_57merge_subset},
  {"merge_subset_from_disk", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_60merge_subset_from_disk, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_59merge_subset_from_disk},
  {"count_partitions", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_62count_partitions, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_61count_partitions},
  {"set_partition_id", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_64set_partition_id, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_63set_partition_id},
  {"join_partitions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_66join_partitions, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_65join_partitions},
  {"get_partition_id", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_68get_partition_id, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_67get_partition_id},
  {"repartition_largest_partition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_70repartition_largest_partition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_69repartition_largest_partition},
  {"load_stop_tags", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_72load_stop_tags, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_71load_stop_tags},
  {"save_stop_tags", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_74save_stop_tags, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_73save_stop_tags},
  {"print_stop_tags", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_76print_stop_tags, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_75print_stop_tags},
  {"trim_on_stoptags", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_78trim_on_stoptags, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_77trim_on_stoptags},
  {"add_stop_tag", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_80add_stop_tag, METH_O, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_79add_stop_tag},
  {"get_stop_tags", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_82get_stop_tags, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_81get_stop_tags},
  {"iter_stop_tags", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_84iter_stop_tags, METH_NOARGS, __pyx_doc_5khmer_5_oxli_6graphs_9Hashgraph_83iter_stop_tags},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_87__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Hashgraph_89__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_6graphs_Hashgraph[] = {
  {(char *)"partition", __pyx_getprop_5khmer_5_oxli_6graphs_9Hashgraph_partition, 0, (char *)0, 0},
  {(char *)"n_tags", __pyx_getprop_5khmer_5_oxli_6graphs_9Hashgraph_n_tags, 0, (char *)"Return the count of all tags.", 0},
  {(char *)"tag_density", __pyx_getprop_5khmer_5_oxli_6graphs_9Hashgraph_tag_density, __pyx_setprop_5khmer_5_oxli_6graphs_9Hashgraph_tag_density, (char *)"Get the tagging density.", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_Hashgraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.Hashgraph", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashgraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashgraph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_6graphs_Hashgraph, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_6graphs_Hashgraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_Hashgraph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_6graphs_Hashgraph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_Hashgraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Nodegraph __pyx_vtable_5khmer_5_oxli_6graphs_Nodegraph;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Nodegraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashgraph(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_Nodegraph;
  new((void*)&(p->_ng_this)) std::shared_ptr<oxli::Nodegraph> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Nodegraph(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_ng_this);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashgraph(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_Nodegraph[] = {
  {"update", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_3update, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_9Nodegraph_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_Nodegraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.Nodegraph", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_Nodegraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Nodegraph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_6graphs_Hashgraph, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_6graphs_Hashgraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_Nodegraph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_Nodegraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Countgraph __pyx_vtable_5khmer_5_oxli_6graphs_Countgraph;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_Countgraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashgraph(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_Countgraph;
  new((void*)&(p->_cg_this)) std::shared_ptr<oxli::Countgraph> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Countgraph(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cg_this);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashgraph(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_Countgraph[] = {
  {"do_subset_partition_with_abundance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_3do_subset_partition_with_abundance, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_10Countgraph_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_Countgraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.Countgraph", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_Countgraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Countgraph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_6graphs_Hashgraph, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_6graphs_Hashgraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_Countgraph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_Countgraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_SmallCountgraph __pyx_vtable_5khmer_5_oxli_6graphs_SmallCountgraph;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs_SmallCountgraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_6graphs_Hashgraph(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_6graphs_Hashtable*)__pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCountgraph;
  new((void*)&(p->_sg_this)) std::shared_ptr<oxli::SmallCountgraph> ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs_SmallCountgraph(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *p = (struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_sg_this);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_Hashgraph(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_6graphs_SmallCountgraph[] = {
  {"get_raw_tables", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_3get_raw_tables, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_6graphs_15SmallCountgraph_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.SmallCountgraph", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs_SmallCountgraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs_SmallCountgraph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_6graphs_Hashgraph, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_6graphs_Hashgraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_6graphs_SmallCountgraph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs_SmallCountgraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *__pyx_freelist_5khmer_5_oxli_6graphs___pyx_scope_struct__tags[8];
static int __pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct__tags = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct__tags(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct__tags > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_6graphs___pyx_scope_struct__tags[--__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct__tags];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *)o);
  new((void*)&(p->__pyx_t_0)) std::set<oxli::HashIntoType> ::iterator();
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs___pyx_scope_struct__tags(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *p = (struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct__tags < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags)))) {
    __pyx_freelist_5khmer_5_oxli_6graphs___pyx_scope_struct__tags[__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct__tags++] = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_6graphs___pyx_scope_struct__tags(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *p = (struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct__tags = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.__pyx_scope_struct__tags", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct__tags), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs___pyx_scope_struct__tags, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_6graphs___pyx_scope_struct__tags, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct__tags, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *__pyx_freelist_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags[8];
static int __pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags[--__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *)o);
  new((void*)&(p->__pyx_t_0)) std::set<oxli::HashIntoType> ::iterator();
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *p = (struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags)))) {
    __pyx_freelist_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags[__pyx_freecount_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags++] = ((struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *p = (struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.graphs.__pyx_scope_struct_1_iter_stop_tags", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_graphs(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_graphs},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "graphs",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_CYTHON_TABLES, __pyx_k_CYTHON_TABLES, sizeof(__pyx_k_CYTHON_TABLES), 0, 0, 1, 1},
  {&__pyx_n_s_Countgraph, __pyx_k_Countgraph, sizeof(__pyx_k_Countgraph), 0, 0, 1, 1},
  {&__pyx_n_s_Counttable, __pyx_k_Counttable, sizeof(__pyx_k_Counttable), 0, 0, 1, 1},
  {&__pyx_n_s_CyclicCounttable, __pyx_k_CyclicCounttable, sizeof(__pyx_k_CyclicCounttable), 0, 0, 1, 1},
  {&__pyx_kp_s_Expected_k_mer_length_but_got, __pyx_k_Expected_k_mer_length_but_got, sizeof(__pyx_k_Expected_k_mer_length_but_got), 0, 0, 1, 0},
  {&__pyx_n_s_Hashgraph, __pyx_k_Hashgraph, sizeof(__pyx_k_Hashgraph), 0, 0, 1, 1},
  {&__pyx_n_s_Hashgraph_iter_stop_tags, __pyx_k_Hashgraph_iter_stop_tags, sizeof(__pyx_k_Hashgraph_iter_stop_tags), 0, 0, 1, 1},
  {&__pyx_n_s_Hashgraph_tags, __pyx_k_Hashgraph_tags, sizeof(__pyx_k_Hashgraph_tags), 0, 0, 1, 1},
  {&__pyx_n_s_Hashtable, __pyx_k_Hashtable, sizeof(__pyx_k_Hashtable), 0, 0, 1, 1},
  {&__pyx_n_s_Nodegraph, __pyx_k_Nodegraph, sizeof(__pyx_k_Nodegraph), 0, 0, 1, 1},
  {&__pyx_n_s_Nodetable, __pyx_k_Nodetable, sizeof(__pyx_k_Nodetable), 0, 0, 1, 1},
  {&__pyx_kp_s_Object_of_type_0_can_not_be_inte, __pyx_k_Object_of_type_0_can_not_be_inte, sizeof(__pyx_k_Object_of_type_0_can_not_be_inte), 0, 0, 1, 0},
  {&__pyx_n_s_QFCounttable, __pyx_k_QFCounttable, sizeof(__pyx_k_QFCounttable), 0, 0, 1, 1},
  {&__pyx_n_s_ReadParser, __pyx_k_ReadParser, sizeof(__pyx_k_ReadParser), 0, 0, 1, 1},
  {&__pyx_n_s_SmallCountgraph, __pyx_k_SmallCountgraph, sizeof(__pyx_k_SmallCountgraph), 0, 0, 1, 1},
  {&__pyx_n_s_SmallCounttable, __pyx_k_SmallCounttable, sizeof(__pyx_k_SmallCounttable), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_abundance, __pyx_k_abundance, sizeof(__pyx_k_abundance), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_s_argument_does_not_appear_to_be_a, __pyx_k_argument_does_not_appear_to_be_a, sizeof(__pyx_k_argument_does_not_appear_to_be_a), 0, 0, 1, 0},
  {&__pyx_n_s_band, __pyx_k_band, sizeof(__pyx_k_band), 0, 0, 1, 1},
  {&__pyx_n_s_break_on_circumference, __pyx_k_break_on_circumference, sizeof(__pyx_k_break_on_circumference), 0, 0, 1, 1},
  {&__pyx_n_s_break_on_stop_tags, __pyx_k_break_on_stop_tags, sizeof(__pyx_k_break_on_stop_tags), 0, 0, 1, 1},
  {&__pyx_n_s_break_on_stoptags, __pyx_k_break_on_stoptags, sizeof(__pyx_k_break_on_stoptags), 0, 0, 1, 1},
  {&__pyx_n_s_clear_tags, __pyx_k_clear_tags, sizeof(__pyx_k_clear_tags), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_consume_masked, __pyx_k_consume_masked, sizeof(__pyx_k_consume_masked), 0, 0, 1, 1},
  {&__pyx_n_s_count_partitions, __pyx_k_count_partitions, sizeof(__pyx_k_count_partitions), 0, 0, 1, 1},
  {&__pyx_n_s_counts, __pyx_k_counts, sizeof(__pyx_k_counts), 0, 0, 1, 1},
  {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
  {&__pyx_n_s_end_kmer, __pyx_k_end_kmer, sizeof(__pyx_k_end_kmer), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_frequency, __pyx_k_frequency, sizeof(__pyx_k_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_get_n_primes_near_x, __pyx_k_get_n_primes_near_x, sizeof(__pyx_k_get_n_primes_near_x), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_hash, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 0, 1, 1},
  {&__pyx_n_s_hdns, __pyx_k_hdns, sizeof(__pyx_k_hdns), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_iter_stop_tags, __pyx_k_iter_stop_tags, sizeof(__pyx_k_iter_stop_tags), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_khmer__khmer, __pyx_k_khmer__khmer, sizeof(__pyx_k_khmer__khmer), 0, 0, 1, 1},
  {&__pyx_n_s_khmer__oxli_graphs, __pyx_k_khmer__oxli_graphs, sizeof(__pyx_k_khmer__oxli_graphs), 0, 0, 1, 1},
  {&__pyx_n_s_khmer__oxli_utils, __pyx_k_khmer__oxli_utils, sizeof(__pyx_k_khmer__oxli_utils), 0, 0, 1, 1},
  {&__pyx_n_s_kmer, __pyx_k_kmer, sizeof(__pyx_k_kmer), 0, 0, 1, 1},
  {&__pyx_n_s_kmer_type_error, __pyx_k_kmer_type_error, sizeof(__pyx_k_kmer_type_error), 0, 0, 1, 1},
  {&__pyx_n_s_kmer_u, __pyx_k_kmer_u, sizeof(__pyx_k_kmer_u), 0, 0, 1, 1},
  {&__pyx_n_s_ksize, __pyx_k_ksize, sizeof(__pyx_k_ksize), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_max_count, __pyx_k_max_count, sizeof(__pyx_k_max_count), 0, 0, 1, 1},
  {&__pyx_n_s_max_size, __pyx_k_max_size, sizeof(__pyx_k_max_size), 0, 0, 1, 1},
  {&__pyx_n_s_median, __pyx_k_median, sizeof(__pyx_k_median), 0, 0, 1, 1},
  {&__pyx_n_s_min_count, __pyx_k_min_count, sizeof(__pyx_k_min_count), 0, 0, 1, 1},
  {&__pyx_n_s_min_length, __pyx_k_min_length, sizeof(__pyx_k_min_length), 0, 0, 1, 1},
  {&__pyx_n_s_min_unique_f, __pyx_k_min_unique_f, sizeof(__pyx_k_min_unique_f), 0, 0, 1, 1},
  {&__pyx_n_s_n_tables, __pyx_k_n_tables, sizeof(__pyx_k_n_tables), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_num_bands, __pyx_k_num_bands, sizeof(__pyx_k_num_bands), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_output_unassigned, __pyx_k_output_unassigned, sizeof(__pyx_k_output_unassigned), 0, 0, 1, 1},
  {&__pyx_n_s_p1, __pyx_k_p1, sizeof(__pyx_k_p1), 0, 0, 1, 1},
  {&__pyx_n_s_p2, __pyx_k_p2, sizeof(__pyx_k_p2), 0, 0, 1, 1},
  {&__pyx_n_s_parser_or_filename, __pyx_k_parser_or_filename, sizeof(__pyx_k_parser_or_filename), 0, 0, 1, 1},
  {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
  {&__pyx_n_s_pid, __pyx_k_pid, sizeof(__pyx_k_pid), 0, 0, 1, 1},
  {&__pyx_n_s_primes, __pyx_k_primes, sizeof(__pyx_k_primes), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_sanitize_kmer, __pyx_k_sanitize_kmer, sizeof(__pyx_k_sanitize_kmer), 0, 0, 1, 1},
  {&__pyx_n_s_sanitize_seq_kmer, __pyx_k_sanitize_seq_kmer, sizeof(__pyx_k_sanitize_seq_kmer), 0, 0, 1, 1},
  {&__pyx_kp_s_self__ht_this_cannot_be_converte, __pyx_k_self__ht_this_cannot_be_converte, sizeof(__pyx_k_self__ht_this_cannot_be_converte), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sequence, __pyx_k_sequence, sizeof(__pyx_k_sequence), 0, 0, 1, 1},
  {&__pyx_kp_s_sequence_length_must_the_hashtab, __pyx_k_sequence_length_must_the_hashtab, sizeof(__pyx_k_sequence_length_must_the_hashtab), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_kp_s_size_has_to_be_a_power_of_two_no, __pyx_k_size_has_to_be_a_power_of_two_no, sizeof(__pyx_k_size_has_to_be_a_power_of_two_no), 0, 0, 1, 0},
  {&__pyx_n_s_start_kmer, __pyx_k_start_kmer, sizeof(__pyx_k_start_kmer), 0, 0, 1, 1},
  {&__pyx_n_s_starting_size, __pyx_k_starting_size, sizeof(__pyx_k_starting_size), 0, 0, 1, 1},
  {&__pyx_n_s_stop_big_traversals, __pyx_k_stop_big_traversals, sizeof(__pyx_k_stop_big_traversals), 0, 0, 1, 1},
  {&__pyx_n_s_stop_filter, __pyx_k_stop_filter, sizeof(__pyx_k_stop_filter), 0, 0, 1, 1},
  {&__pyx_n_s_subs, __pyx_k_subs, sizeof(__pyx_k_subs), 0, 0, 1, 1},
  {&__pyx_n_s_subset_size, __pyx_k_subset_size, sizeof(__pyx_k_subset_size), 0, 0, 1, 1},
  {&__pyx_n_s_tags, __pyx_k_tags, sizeof(__pyx_k_tags), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tracking, __pyx_k_tracking, sizeof(__pyx_k_tracking), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 82, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 294, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "khmer/_oxli/graphs.pyx":305
 *     def load(cls, file_name):
 *         """Load the graph from the specified file."""
 *         cdef Hashtable table = cls(1, 1, 1)             # <<<<<<<<<<<<<<
 *         deref(table._ht_this).load(_bstring(file_name))
 *         return table
 */
  __pyx_tuple_ = PyTuple_Pack(3, __pyx_int_1, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self__ht_this_cannot_be_converte); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ht_this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self__ht_this_cannot_be_converte); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "khmer/_oxli/graphs.pyx":388
 *     def load(cls, file_name):
 *         """Load the graph from the specified file."""
 *         cdef QFCounttable table = cls(1, 1)             # <<<<<<<<<<<<<<
 *         deref(table._qf_this).load(_bstring(file_name))
 *         return table
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable = &__pyx_vtable_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable.sanitize_kmer = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_kmer;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable.sanitize_seq_kmer = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_seq_kmer;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable.sanitize_hash_kmer = (oxli::HashIntoType (*)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *))__pyx_f_5khmer_5_oxli_6graphs_9Hashtable_sanitize_hash_kmer;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable._valid_sequence = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *))__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__valid_sequence;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable._build_kmer = (oxli::Kmer (*)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *))__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__build_kmer;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable._get_parser = (oxli::read_parsers::FastxParserPtr (*)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, PyObject *))__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__get_parser;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashtable._get_raw_tables = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_6graphs_Hashtable *, uint8_t **, std::vector<uint64_t> ))__pyx_f_5khmer_5_oxli_6graphs_9Hashtable__get_raw_tables;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_Hashtable) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_Hashtable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_Hashtable.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_Hashtable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_Hashtable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_Hashtable.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Hashtable, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_Hashtable) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_Hashtable) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable = &__pyx_type_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_QFCounttable = &__pyx_vtable_5khmer_5_oxli_6graphs_QFCounttable;
  __pyx_vtable_5khmer_5_oxli_6graphs_QFCounttable.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_type_5khmer_5_oxli_6graphs_QFCounttable.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_QFCounttable) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_QFCounttable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_QFCounttable.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_QFCounttable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_QFCounttable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_QFCounttable.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_QFCounttable) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_QFCounttable, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_QFCounttable) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_QFCounttable) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable = &__pyx_type_5khmer_5_oxli_6graphs_QFCounttable;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCounttable = &__pyx_vtable_5khmer_5_oxli_6graphs_SmallCounttable;
  __pyx_vtable_5khmer_5_oxli_6graphs_SmallCounttable.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_type_5khmer_5_oxli_6graphs_SmallCounttable.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_SmallCounttable) < 0) __PYX_ERR(1, 424, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_SmallCounttable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_SmallCounttable.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_SmallCounttable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_SmallCounttable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_SmallCounttable.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCounttable) < 0) __PYX_ERR(1, 424, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SmallCounttable, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_SmallCounttable) < 0) __PYX_ERR(1, 424, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_SmallCounttable) < 0) __PYX_ERR(1, 424, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_SmallCounttable = &__pyx_type_5khmer_5_oxli_6graphs_SmallCounttable;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_Counttable = &__pyx_vtable_5khmer_5_oxli_6graphs_Counttable;
  __pyx_vtable_5khmer_5_oxli_6graphs_Counttable.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_type_5khmer_5_oxli_6graphs_Counttable.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_Counttable) < 0) __PYX_ERR(1, 392, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_Counttable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_Counttable.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_Counttable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_Counttable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_Counttable.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_Counttable) < 0) __PYX_ERR(1, 392, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Counttable, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_Counttable) < 0) __PYX_ERR(1, 392, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_Counttable) < 0) __PYX_ERR(1, 392, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_Counttable = &__pyx_type_5khmer_5_oxli_6graphs_Counttable;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_CyclicCounttable = &__pyx_vtable_5khmer_5_oxli_6graphs_CyclicCounttable;
  __pyx_vtable_5khmer_5_oxli_6graphs_CyclicCounttable.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable) < 0) __PYX_ERR(1, 408, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_CyclicCounttable) < 0) __PYX_ERR(1, 408, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CyclicCounttable, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable) < 0) __PYX_ERR(1, 408, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable) < 0) __PYX_ERR(1, 408, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_CyclicCounttable = &__pyx_type_5khmer_5_oxli_6graphs_CyclicCounttable;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_Nodetable = &__pyx_vtable_5khmer_5_oxli_6graphs_Nodetable;
  __pyx_vtable_5khmer_5_oxli_6graphs_Nodetable.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_type_5khmer_5_oxli_6graphs_Nodetable.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_Nodetable) < 0) __PYX_ERR(1, 447, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_Nodetable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_Nodetable.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_Nodetable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_Nodetable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_Nodetable.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_Nodetable) < 0) __PYX_ERR(1, 447, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Nodetable, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_Nodetable) < 0) __PYX_ERR(1, 447, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_Nodetable) < 0) __PYX_ERR(1, 447, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_Nodetable = &__pyx_type_5khmer_5_oxli_6graphs_Nodetable;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_Hashgraph = &__pyx_vtable_5khmer_5_oxli_6graphs_Hashgraph;
  __pyx_vtable_5khmer_5_oxli_6graphs_Hashgraph.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashtable;
  __pyx_type_5khmer_5_oxli_6graphs_Hashgraph.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashtable;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_Hashgraph) < 0) __PYX_ERR(1, 463, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_Hashgraph.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_Hashgraph.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_Hashgraph.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_Hashgraph.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_Hashgraph.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_Hashgraph) < 0) __PYX_ERR(1, 463, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Hashgraph, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_Hashgraph) < 0) __PYX_ERR(1, 463, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_Hashgraph) < 0) __PYX_ERR(1, 463, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_Hashgraph = &__pyx_type_5khmer_5_oxli_6graphs_Hashgraph;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_Nodegraph = &__pyx_vtable_5khmer_5_oxli_6graphs_Nodegraph;
  __pyx_vtable_5khmer_5_oxli_6graphs_Nodegraph.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashgraph;
  __pyx_type_5khmer_5_oxli_6graphs_Nodegraph.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashgraph;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_Nodegraph) < 0) __PYX_ERR(1, 883, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_Nodegraph.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_Nodegraph.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_Nodegraph.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_Nodegraph.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_Nodegraph.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_Nodegraph) < 0) __PYX_ERR(1, 883, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Nodegraph, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_Nodegraph) < 0) __PYX_ERR(1, 883, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_Nodegraph) < 0) __PYX_ERR(1, 883, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph = &__pyx_type_5khmer_5_oxli_6graphs_Nodegraph;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_Countgraph = &__pyx_vtable_5khmer_5_oxli_6graphs_Countgraph;
  __pyx_vtable_5khmer_5_oxli_6graphs_Countgraph.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashgraph;
  __pyx_type_5khmer_5_oxli_6graphs_Countgraph.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashgraph;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_Countgraph) < 0) __PYX_ERR(1, 817, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_Countgraph.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_Countgraph.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_Countgraph.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_Countgraph.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_Countgraph.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_Countgraph) < 0) __PYX_ERR(1, 817, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Countgraph, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_Countgraph) < 0) __PYX_ERR(1, 817, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_Countgraph) < 0) __PYX_ERR(1, 817, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_Countgraph = &__pyx_type_5khmer_5_oxli_6graphs_Countgraph;
  __pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCountgraph = &__pyx_vtable_5khmer_5_oxli_6graphs_SmallCountgraph;
  __pyx_vtable_5khmer_5_oxli_6graphs_SmallCountgraph.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_6graphs_Hashgraph;
  __pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph.tp_base = __pyx_ptype_5khmer_5_oxli_6graphs_Hashgraph;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph) < 0) __PYX_ERR(1, 858, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph.tp_dict, __pyx_vtabptr_5khmer_5_oxli_6graphs_SmallCountgraph) < 0) __PYX_ERR(1, 858, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SmallCountgraph, (PyObject *)&__pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph) < 0) __PYX_ERR(1, 858, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph) < 0) __PYX_ERR(1, 858, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_6graphs_SmallCountgraph = &__pyx_type_5khmer_5_oxli_6graphs_SmallCountgraph;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct__tags) < 0) __PYX_ERR(1, 620, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct__tags.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct__tags.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct__tags.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct__tags.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5khmer_5_oxli_6graphs___pyx_scope_struct__tags = &__pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct__tags;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags) < 0) __PYX_ERR(1, 810, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags.tp_dictoffset && __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags = &__pyx_type_5khmer_5_oxli_6graphs___pyx_scope_struct_1_iter_stop_tags;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("khmer._oxli.hashing"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5khmer_5_oxli_7hashing_Kmer = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.hashing", "Kmer", sizeof(struct __pyx_obj_5khmer_5_oxli_7hashing_Kmer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7hashing_Kmer) __PYX_ERR(3, 62, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7hashing_Kmer = (struct __pyx_vtabstruct_5khmer_5_oxli_7hashing_Kmer*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7hashing_Kmer->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7hashing_Kmer)) __PYX_ERR(3, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("khmer._oxli.parsing"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5khmer_5_oxli_7parsing_Alphabets = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.parsing", "Alphabets", sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets) __PYX_ERR(4, 109, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7parsing_Alphabets = (struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7parsing_Alphabets)) __PYX_ERR(4, 109, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_Sequence = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.parsing", "Sequence", sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7parsing_Sequence) __PYX_ERR(4, 115, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7parsing_Sequence = (struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7parsing_Sequence->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7parsing_Sequence)) __PYX_ERR(4, 115, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_ReadBundle = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.parsing", "ReadBundle", sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7parsing_ReadBundle) __PYX_ERR(4, 122, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_FastxParser = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.parsing", "FastxParser", sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7parsing_FastxParser) __PYX_ERR(4, 126, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser = (struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7parsing_FastxParser->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser)) __PYX_ERR(4, 126, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_SanitizedFastxParser = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.parsing", "SanitizedFastxParser", sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7parsing_SanitizedFastxParser) __PYX_ERR(4, 133, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7parsing_SanitizedFastxParser = (struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7parsing_SanitizedFastxParser->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7parsing_SanitizedFastxParser)) __PYX_ERR(4, 133, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_SplitPairedReader = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.parsing", "SplitPairedReader", sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7parsing_SplitPairedReader) __PYX_ERR(4, 142, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7parsing_SplitPairedReader = (struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7parsing_SplitPairedReader->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7parsing_SplitPairedReader)) __PYX_ERR(4, 142, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_BrokenPairedReader = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.parsing", "BrokenPairedReader", sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7parsing_BrokenPairedReader) __PYX_ERR(4, 152, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7parsing_BrokenPairedReader = (struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7parsing_BrokenPairedReader->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7parsing_BrokenPairedReader)) __PYX_ERR(4, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("khmer._oxli.legacy_partitioning"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.legacy_partitioning", "PrePartitionInfo", sizeof(struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo) __PYX_ERR(5, 83, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo = (struct __pyx_vtabstruct_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_19legacy_partitioning_PrePartitionInfo)) __PYX_ERR(5, 83, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.legacy_partitioning", "SubsetPartition", sizeof(struct __pyx_obj_5khmer_5_oxli_19legacy_partitioning_SubsetPartition), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_19legacy_partitioning_SubsetPartition) __PYX_ERR(5, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("khmer._oxli.hashset"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5khmer_5_oxli_7hashset_HashSet = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.hashset", "HashSet", sizeof(struct __pyx_obj_5khmer_5_oxli_7hashset_HashSet), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_7hashset_HashSet) __PYX_ERR(6, 10, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_7hashset_HashSet = (struct __pyx_vtabstruct_5khmer_5_oxli_7hashset_HashSet*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_7hashset_HashSet->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_7hashset_HashSet)) __PYX_ERR(6, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("khmer._oxli.traversal"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5khmer_5_oxli_9traversal_Traverser = __Pyx_ImportType(__pyx_t_1, "khmer._oxli.traversal", "Traverser", sizeof(struct __pyx_obj_5khmer_5_oxli_9traversal_Traverser), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5khmer_5_oxli_9traversal_Traverser) __PYX_ERR(7, 25, __pyx_L1_error)
  __pyx_vtabptr_5khmer_5_oxli_9traversal_Traverser = (struct __pyx_vtabstruct_5khmer_5_oxli_9traversal_Traverser*)__Pyx_GetVtable(__pyx_ptype_5khmer_5_oxli_9traversal_Traverser->tp_dict); if (unlikely(!__pyx_vtabptr_5khmer_5_oxli_9traversal_Traverser)) __PYX_ERR(7, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("khmer._oxli.utils"); if (!__pyx_t_1) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "_bstring", (void (**)(void))&__pyx_f_5khmer_5_oxli_5utils__bstring, "PyObject *(PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "is_str", (void (**)(void))&__pyx_f_5khmer_5_oxli_5utils_is_str, "bool (PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "is_num", (void (**)(void))&__pyx_f_5khmer_5_oxli_5utils_is_num, "bool (PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgraphs(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgraphs(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_graphs(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_graphs(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_graphs(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'graphs' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_graphs(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("graphs", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_khmer___oxli__graphs) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "khmer._oxli.graphs")) {
      if (unlikely(PyDict_SetItemString(modules, "khmer._oxli.graphs", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "khmer/_oxli/graphs.pyx":1
 * from math import log             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_log);
  __Pyx_GIVEREF(__pyx_n_s_log);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_log);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_log, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":14
 * 
 * from khmer._oxli.utils cimport _bstring, is_str, is_num
 * from khmer._oxli.utils import get_n_primes_near_x             # <<<<<<<<<<<<<<
 * from khmer._oxli.parsing cimport (CpFastxReader, CPyReadParser_Object,
 *                                   get_parser, CpReadParser, FastxParser,
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_get_n_primes_near_x);
  __Pyx_GIVEREF(__pyx_n_s_get_n_primes_near_x);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_get_n_primes_near_x);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_khmer__oxli_utils, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_get_n_primes_near_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_n_primes_near_x, __pyx_t_2) < 0) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/graphs.pyx":24
 * from khmer._oxli.traversal cimport Traverser
 * 
 * from khmer._khmer import ReadParser             # <<<<<<<<<<<<<<
 * 
 * CYTHON_TABLES = (Hashtable, Nodetable, Counttable, CyclicCounttable,
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ReadParser);
  __Pyx_GIVEREF(__pyx_n_s_ReadParser);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ReadParser);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_khmer__khmer, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ReadParser); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ReadParser, __pyx_t_1) < 0) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":26
 * from khmer._khmer import ReadParser
 * 
 * CYTHON_TABLES = (Hashtable, Nodetable, Counttable, CyclicCounttable,             # <<<<<<<<<<<<<<
 *                  SmallCounttable,
 *                  QFCounttable, Nodegraph, Countgraph, SmallCountgraph)
 */
  __pyx_t_2 = PyTuple_New(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodetable));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodetable));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodetable));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Counttable));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Counttable));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Counttable));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_CyclicCounttable));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_CyclicCounttable));
  PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_CyclicCounttable));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCounttable));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCounttable));
  PyTuple_SET_ITEM(__pyx_t_2, 4, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCounttable));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable));
  PyTuple_SET_ITEM(__pyx_t_2, 5, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph));
  PyTuple_SET_ITEM(__pyx_t_2, 6, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Nodegraph));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Countgraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Countgraph));
  PyTuple_SET_ITEM(__pyx_t_2, 7, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Countgraph));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCountgraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCountgraph));
  PyTuple_SET_ITEM(__pyx_t_2, 8, ((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_SmallCountgraph));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CYTHON_TABLES, __pyx_t_2) < 0) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "khmer/_oxli/graphs.pyx":303
 * 
 *     @classmethod
 *     def load(cls, file_name):             # <<<<<<<<<<<<<<
 *         """Load the graph from the specified file."""
 *         cdef Hashtable table = cls(1, 1, 1)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable, __pyx_n_s_load); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "khmer/_oxli/graphs.pyx":302
 *         deref(self._ht_this).save(_bstring(file_name))
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load(cls, file_name):
 *         """Load the graph from the specified file."""
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable->tp_dict, __pyx_n_s_load, __pyx_t_1) < 0) __PYX_ERR(1, 303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_6graphs_Hashtable);

  /* "khmer/_oxli/graphs.pyx":386
 * 
 *     @classmethod
 *     def load(cls, file_name):             # <<<<<<<<<<<<<<
 *         """Load the graph from the specified file."""
 *         cdef QFCounttable table = cls(1, 1)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable, __pyx_n_s_load); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "khmer/_oxli/graphs.pyx":385
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def load(cls, file_name):
 *         """Load the graph from the specified file."""
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable->tp_dict, __pyx_n_s_load, __pyx_t_2) < 0) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_6graphs_QFCounttable);

  /* "khmer/_oxli/graphs.pyx":1
 * from math import log             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_uint64_t")
 * cdef vector[X] __pyx_convert_vector_from_py_uint64_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init khmer._oxli.graphs", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init khmer._oxli.graphs");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE oxli::HashIntoType __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const oxli::HashIntoType neg_one = (oxli::HashIntoType) -1, const_zero = (oxli::HashIntoType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(oxli::HashIntoType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (oxli::HashIntoType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (oxli::HashIntoType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, digit, digits[0])
                case 2:
                    if (8 * sizeof(oxli::HashIntoType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) >= 2 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) (((((oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(oxli::HashIntoType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) >= 3 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) (((((((oxli::HashIntoType)digits[2]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(oxli::HashIntoType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) >= 4 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) (((((((((oxli::HashIntoType)digits[3]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[2]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (oxli::HashIntoType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(oxli::HashIntoType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::HashIntoType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(oxli::HashIntoType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::HashIntoType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (oxli::HashIntoType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(oxli::HashIntoType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(oxli::HashIntoType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) - 1 > 2 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) (((oxli::HashIntoType)-1)*(((((oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(oxli::HashIntoType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) - 1 > 2 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) ((((((oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(oxli::HashIntoType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) - 1 > 3 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) (((oxli::HashIntoType)-1)*(((((((oxli::HashIntoType)digits[2]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(oxli::HashIntoType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) - 1 > 3 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) ((((((((oxli::HashIntoType)digits[2]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(oxli::HashIntoType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) - 1 > 4 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) (((oxli::HashIntoType)-1)*(((((((((oxli::HashIntoType)digits[3]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[2]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(oxli::HashIntoType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::HashIntoType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::HashIntoType) - 1 > 4 * PyLong_SHIFT) {
                            return (oxli::HashIntoType) ((((((((((oxli::HashIntoType)digits[3]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[2]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[1]) << PyLong_SHIFT) | (oxli::HashIntoType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(oxli::HashIntoType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::HashIntoType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(oxli::HashIntoType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::HashIntoType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            oxli::HashIntoType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (oxli::HashIntoType) -1;
        }
    } else {
        oxli::HashIntoType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (oxli::HashIntoType) -1;
        val = __Pyx_PyInt_As_oxli_3a__3a_HashIntoType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to oxli::HashIntoType");
    return (oxli::HashIntoType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to oxli::HashIntoType");
    return (oxli::HashIntoType) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE oxli::PartitionID __Pyx_PyInt_As_oxli_3a__3a_PartitionID(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const oxli::PartitionID neg_one = (oxli::PartitionID) -1, const_zero = (oxli::PartitionID) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(oxli::PartitionID) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (oxli::PartitionID) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (oxli::PartitionID) 0;
                case  1: __PYX_VERIFY_RETURN_INT(oxli::PartitionID, digit, digits[0])
                case 2:
                    if (8 * sizeof(oxli::PartitionID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) >= 2 * PyLong_SHIFT) {
                            return (oxli::PartitionID) (((((oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(oxli::PartitionID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) >= 3 * PyLong_SHIFT) {
                            return (oxli::PartitionID) (((((((oxli::PartitionID)digits[2]) << PyLong_SHIFT) | (oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(oxli::PartitionID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) >= 4 * PyLong_SHIFT) {
                            return (oxli::PartitionID) (((((((((oxli::PartitionID)digits[3]) << PyLong_SHIFT) | (oxli::PartitionID)digits[2]) << PyLong_SHIFT) | (oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (oxli::PartitionID) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(oxli::PartitionID) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::PartitionID, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(oxli::PartitionID) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::PartitionID, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (oxli::PartitionID) 0;
                case -1: __PYX_VERIFY_RETURN_INT(oxli::PartitionID, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(oxli::PartitionID,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(oxli::PartitionID) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) - 1 > 2 * PyLong_SHIFT) {
                            return (oxli::PartitionID) (((oxli::PartitionID)-1)*(((((oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(oxli::PartitionID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) - 1 > 2 * PyLong_SHIFT) {
                            return (oxli::PartitionID) ((((((oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(oxli::PartitionID) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) - 1 > 3 * PyLong_SHIFT) {
                            return (oxli::PartitionID) (((oxli::PartitionID)-1)*(((((((oxli::PartitionID)digits[2]) << PyLong_SHIFT) | (oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(oxli::PartitionID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) - 1 > 3 * PyLong_SHIFT) {
                            return (oxli::PartitionID) ((((((((oxli::PartitionID)digits[2]) << PyLong_SHIFT) | (oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(oxli::PartitionID) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) - 1 > 4 * PyLong_SHIFT) {
                            return (oxli::PartitionID) (((oxli::PartitionID)-1)*(((((((((oxli::PartitionID)digits[3]) << PyLong_SHIFT) | (oxli::PartitionID)digits[2]) << PyLong_SHIFT) | (oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(oxli::PartitionID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::PartitionID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::PartitionID) - 1 > 4 * PyLong_SHIFT) {
                            return (oxli::PartitionID) ((((((((((oxli::PartitionID)digits[3]) << PyLong_SHIFT) | (oxli::PartitionID)digits[2]) << PyLong_SHIFT) | (oxli::PartitionID)digits[1]) << PyLong_SHIFT) | (oxli::PartitionID)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(oxli::PartitionID) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::PartitionID, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(oxli::PartitionID) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::PartitionID, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            oxli::PartitionID val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (oxli::PartitionID) -1;
        }
    } else {
        oxli::PartitionID val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (oxli::PartitionID) -1;
        val = __Pyx_PyInt_As_oxli_3a__3a_PartitionID(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to oxli::PartitionID");
    return (oxli::PartitionID) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to oxli::PartitionID");
    return (oxli::PartitionID) -1;
}

/* CIntFromPy */
static CYTHON_INLINE oxli::BoundedCounterType __Pyx_PyInt_As_oxli_3a__3a_BoundedCounterType(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const oxli::BoundedCounterType neg_one = (oxli::BoundedCounterType) -1, const_zero = (oxli::BoundedCounterType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(oxli::BoundedCounterType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (oxli::BoundedCounterType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (oxli::BoundedCounterType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, digit, digits[0])
                case 2:
                    if (8 * sizeof(oxli::BoundedCounterType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) >= 2 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) (((((oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(oxli::BoundedCounterType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) >= 3 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) (((((((oxli::BoundedCounterType)digits[2]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(oxli::BoundedCounterType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) >= 4 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) (((((((((oxli::BoundedCounterType)digits[3]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[2]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (oxli::BoundedCounterType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(oxli::BoundedCounterType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::BoundedCounterType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(oxli::BoundedCounterType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::BoundedCounterType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (oxli::BoundedCounterType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(oxli::BoundedCounterType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) - 1 > 2 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) (((oxli::BoundedCounterType)-1)*(((((oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(oxli::BoundedCounterType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) - 1 > 2 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) ((((((oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(oxli::BoundedCounterType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) - 1 > 3 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) (((oxli::BoundedCounterType)-1)*(((((((oxli::BoundedCounterType)digits[2]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(oxli::BoundedCounterType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) - 1 > 3 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) ((((((((oxli::BoundedCounterType)digits[2]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(oxli::BoundedCounterType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) - 1 > 4 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) (((oxli::BoundedCounterType)-1)*(((((((((oxli::BoundedCounterType)digits[3]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[2]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(oxli::BoundedCounterType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(oxli::BoundedCounterType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(oxli::BoundedCounterType) - 1 > 4 * PyLong_SHIFT) {
                            return (oxli::BoundedCounterType) ((((((((((oxli::BoundedCounterType)digits[3]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[2]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[1]) << PyLong_SHIFT) | (oxli::BoundedCounterType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(oxli::BoundedCounterType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::BoundedCounterType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(oxli::BoundedCounterType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(oxli::BoundedCounterType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            oxli::BoundedCounterType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (oxli::BoundedCounterType) -1;
        }
    } else {
        oxli::BoundedCounterType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (oxli::BoundedCounterType) -1;
        val = __Pyx_PyInt_As_oxli_3a__3a_BoundedCounterType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to oxli::BoundedCounterType");
    return (oxli::BoundedCounterType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to oxli::BoundedCounterType");
    return (oxli::BoundedCounterType) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_HashIntoType(oxli::HashIntoType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const oxli::HashIntoType neg_one = (oxli::HashIntoType) -1, const_zero = (oxli::HashIntoType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(oxli::HashIntoType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(oxli::HashIntoType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::HashIntoType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(oxli::HashIntoType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::HashIntoType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(oxli::HashIntoType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_BoundedCounterType(oxli::BoundedCounterType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const oxli::BoundedCounterType neg_one = (oxli::BoundedCounterType) -1, const_zero = (oxli::BoundedCounterType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(oxli::BoundedCounterType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(oxli::BoundedCounterType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::BoundedCounterType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(oxli::BoundedCounterType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::BoundedCounterType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(oxli::BoundedCounterType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_WordLength(oxli::WordLength value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const oxli::WordLength neg_one = (oxli::WordLength) -1, const_zero = (oxli::WordLength) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(oxli::WordLength) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(oxli::WordLength) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::WordLength) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(oxli::WordLength) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::WordLength) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(oxli::WordLength),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_oxli_3a__3a_PartitionID(oxli::PartitionID value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const oxli::PartitionID neg_one = (oxli::PartitionID) -1, const_zero = (oxli::PartitionID) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(oxli::PartitionID) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(oxli::PartitionID) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::PartitionID) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(oxli::PartitionID) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(oxli::PartitionID) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(oxli::PartitionID),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
