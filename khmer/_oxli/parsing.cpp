/* Generated by Cython 0.29.32 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__khmer___oxli__parsing
#define __PYX_HAVE_API__khmer___oxli__parsing
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <string.h>
#include <string>
#include <vector>
#include "oxli_exception_convert.hh"
#include "oxli/hashtable.hh"
#include <iostream>
#include <fstream>
#include "oxli/read_parsers.hh"
#include "khmer/_cpy_khmer.hh"
#include "oxli/alphabets.hh"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "khmer/_oxli/parsing.pyx",
  "stringsource",
  "khmer/_oxli/parsing.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets;
struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence;
struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle;
struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser;
struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser;
struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader;
struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader;
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers;
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__;
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__;
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__;
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__;

/* "khmer/_oxli/parsing.pxd":109
 * '''
 * 
 * cdef class Alphabets:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets *__pyx_vtab;
};


/* "khmer/_oxli/parsing.pxd":115
 * 
 * 
 * cdef class Sequence:             # <<<<<<<<<<<<<<
 *     cdef CpSequence _obj
 * 
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence *__pyx_vtab;
  oxli::read_parsers::Read _obj;
};


/* "khmer/_oxli/parsing.pxd":122
 * 
 * 
 * cdef class ReadBundle:             # <<<<<<<<<<<<<<
 *     cdef list reads
 * 
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle {
  PyObject_HEAD
  PyObject *reads;
};


/* "khmer/_oxli/parsing.pxd":126
 * 
 * 
 * cdef class FastxParser:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CpReadParser[CpFastxReader]] _this
 * 
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *__pyx_vtab;
  std::shared_ptr<oxli::read_parsers::ReadParser<oxli::read_parsers::FastxReader> >  _this;
};


/* "khmer/_oxli/parsing.pxd":133
 * 
 * 
 * cdef class SanitizedFastxParser(FastxParser):             # <<<<<<<<<<<<<<
 *     cdef readonly int n_bad
 *     cdef readonly string _alphabet
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser {
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser __pyx_base;
  int n_bad;
  std::string _alphabet;
  bool convert_n;
};


/* "khmer/_oxli/parsing.pxd":142
 * 
 * 
 * cdef class SplitPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser left_parser
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_vtab;
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *left_parser;
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *right_parser;
  int min_length;
  bool force_name_match;
};


/* "khmer/_oxli/parsing.pxd":152
 * 
 * 
 * cdef class BrokenPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     cdef FastxParser parser
 */
struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_vtab;
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *parser;
  int min_length;
  bool force_single;
  bool require_paired;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *record;
};


/* "khmer/_oxli/parsing.pyx":75
 *             raise NotImplementedError('Operator not available')
 * 
 *     def kmers(self, int K):             # <<<<<<<<<<<<<<
 *         cdef int i = 0
 *         cdef unicode sequence = self.sequence
 */
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers {
  PyObject_HEAD
  int __pyx_v_K;
  int __pyx_v_i;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self;
  PyObject *__pyx_v_sequence;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
};


/* "khmer/_oxli/parsing.pyx":202
 *         return deref(self._this).is_complete()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         while not self.is_complete():
 */
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ {
  PyObject_HEAD
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_seq;
};


/* "khmer/_oxli/parsing.pyx":234
 *             return None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         while not self.is_complete():
 */
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_seq;
};


/* "khmer/_oxli/parsing.pyx":254
 *         self.force_name_match = force_name_match
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef object err
 */
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_err;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_first;
  int __pyx_v_found;
  PyObject *__pyx_v_read_num;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_second;
  struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self;
};


/* "khmer/_oxli/parsing.pyx":322
 *         self.record = None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first
 *         cdef Sequence second
 */
struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_err;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_first;
  int __pyx_v_found;
  int __pyx_v_read_num;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_second;
  struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self;
};



/* "khmer/_oxli/parsing.pyx":14
 * 
 * 
 * cdef class Alphabets:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets {
  std::string (*_get)(std::string);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets *__pyx_vtabptr_5khmer_5_oxli_7parsing_Alphabets;


/* "khmer/_oxli/parsing.pyx":42
 * 
 * @cython.freelist(100)
 * cdef class Sequence:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, name=None, sequence=None,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *(*_wrap)(oxli::read_parsers::Read);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence *__pyx_vtabptr_5khmer_5_oxli_7parsing_Sequence;


/* "khmer/_oxli/parsing.pyx":188
 * 
 * 
 * cdef class FastxParser:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, filename, *args, **kwargs):
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser {
  bool (*is_complete)(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *, int __pyx_skip_dispatch);
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *(*_next)(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *__pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser;


/* "khmer/_oxli/parsing.pyx":209
 * 
 * 
 * cdef class SanitizedFastxParser(FastxParser):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, filename, alphabet='DNAN_SIMPLE',
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser {
  struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser __pyx_base;
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_vtabptr_5khmer_5_oxli_7parsing_SanitizedFastxParser;


/* "khmer/_oxli/parsing.pyx":242
 * 
 * 
 * cdef class SplitPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, FastxParser left_parser,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader {
  PyObject *(*_next)(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_vtabptr_5khmer_5_oxli_7parsing_SplitPairedReader;


/* "khmer/_oxli/parsing.pyx":305
 * 
 * 
 * cdef class BrokenPairedReader:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, FastxParser parser,
 */

struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader {
  PyObject *(*_next)(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *);
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_vtabptr_5khmer_5_oxli_7parsing_BrokenPairedReader;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyUnicode_Substring.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* unicode_tailmatch.proto */
static int __Pyx_PyUnicode_Tailmatch(
    PyObject* s, PyObject* substr, Py_ssize_t start, Py_ssize_t end, int direction);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static std::string __pyx_f_5khmer_5_oxli_7parsing_9Alphabets__get(std::string __pyx_v_name); /* proto*/
static struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_f_5khmer_5_oxli_7parsing_8Sequence__wrap(oxli::read_parsers::Read __pyx_v_cseq); /* proto*/
static struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_f_5khmer_5_oxli_7parsing_11FastxParser__next(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self); /* proto*/
static bool __pyx_f_5khmer_5_oxli_7parsing_11FastxParser_is_complete(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_f_5khmer_5_oxli_7parsing_20SanitizedFastxParser__next(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5khmer_5_oxli_7parsing_17SplitPairedReader__next(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5khmer_5_oxli_7parsing_18BrokenPairedReader__next(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'khmer._oxli.utils' */
static PyObject *(*__pyx_f_5khmer_5_oxli_5utils__bstring)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_5khmer_5_oxli_5utils__ustring)(PyObject *); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'khmer._oxli.parsing' */
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_Sequence = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_ReadBundle = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_FastxParser = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_SanitizedFastxParser = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_SplitPairedReader = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing_BrokenPairedReader = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ = 0;
static PyTypeObject *__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ = 0;
static PyObject *__pyx_f_5khmer_5_oxli_7parsing__split_left_right(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5khmer_5_oxli_7parsing__cppstring_split_left_right(std::string &); /*proto*/
static int __pyx_f_5khmer_5_oxli_7parsing__check_is_pair(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *, struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *); /*proto*/
static bool __pyx_f_5khmer_5_oxli_7parsing_check_is_left(PyObject *, int __pyx_skip_dispatch); /*proto*/
static bool __pyx_f_5khmer_5_oxli_7parsing_check_is_right(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE bool __pyx_f_5khmer_5_oxli_7parsing_is_valid(char const , std::string &); /*proto*/
static CYTHON_INLINE bool __pyx_f_5khmer_5_oxli_7parsing_sanitize_sequence(std::string &, std::string &, bool); /*proto*/
static PyObject *__pyx_f_5khmer_5_oxli_7parsing___pyx_unpickle_Alphabets__set_state(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "khmer._oxli.parsing"
extern int __pyx_module_is_main_khmer___oxli__parsing;
int __pyx_module_is_main_khmer___oxli__parsing = 0;

/* Implementation of 'khmer._oxli.parsing' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_print;
static const char __pyx_k_1[] = "/1";
static const char __pyx_k_2[] = "/2";
static const char __pyx_k_r1[] = "r1";
static const char __pyx_k_r2[] = "r2";
static const char __pyx_k_0_1[] = "\n\"{0}\"\n\"{1}\"";
static const char __pyx_k_1_2[] = "1:";
static const char __pyx_k_2_2[] = "2:";
static const char __pyx_k__12[] = "";
static const char __pyx_k__19[] = "/";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_seq[] = "seq";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_attr[] = "attr";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_kmers[] = "kmers";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_read1[] = "read1";
static const char __pyx_k_read2[] = "read2";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_parser[] = "parser";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_record[] = "record";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_second[] = "second";
static const char __pyx_k_stderr[] = "stderr";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_no_read[] = "<no read>";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_quality[] = "quality";
static const char __pyx_k_r1_name[] = "r1_name";
static const char __pyx_k_r2_name[] = "r2_name";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_alphabet[] = "alphabet";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_sequence[] = "sequence";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Alphabets[] = "Alphabets";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_convert_n[] = "convert_n";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ReadBundle[] = "ReadBundle";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_min_length[] = "min_length";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_DNAN_SIMPLE[] = "DNAN_SIMPLE";
static const char __pyx_k_FastxParser[] = "FastxParser";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_annotations[] = "annotations";
static const char __pyx_k_cleaned_seq[] = "cleaned_seq";
static const char __pyx_k_description[] = "description";
static const char __pyx_k_is_complete[] = "is_complete";
static const char __pyx_k_left_parser[] = "left_parser";
static const char __pyx_k_print_error[] = "print_error";
static const char __pyx_k_force_single[] = "force_single";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_right_parser[] = "right_parser";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_check_is_pair[] = "check_is_pair";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Sequence_kmers[] = "Sequence.kmers";
static const char __pyx_k_require_paired[] = "require_paired";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_force_name_match[] = "force_name_match";
static const char __pyx_k_SplitPairedReader[] = "SplitPairedReader";
static const char __pyx_k_BrokenPairedReader[] = "BrokenPairedReader";
static const char __pyx_k_FastxParser___iter[] = "FastxParser.__iter__";
static const char __pyx_k_UnpairedReadsError[] = "UnpairedReadsError";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_from_screed_record[] = "from_screed_record";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_khmer__oxli_parsing[] = "khmer._oxli.parsing";
static const char __pyx_k_SanitizedFastxParser[] = "SanitizedFastxParser";
static const char __pyx_k_Operator_not_available[] = "Operator not available";
static const char __pyx_k_pyx_unpickle_Alphabets[] = "__pyx_unpickle_Alphabets";
static const char __pyx_k_No_alphabet_with_name_0[] = "No alphabet with name {0}";
static const char __pyx_k_khmer__oxli_parsing_pyx[] = "khmer/_oxli/parsing.pyx";
static const char __pyx_k_SplitPairedReader___iter[] = "SplitPairedReader.__iter__";
static const char __pyx_k_BrokenPairedReader___iter[] = "BrokenPairedReader.__iter__";
static const char __pyx_k_UnpairedReadsError___init[] = "UnpairedReadsError.__init__";
static const char __pyx_k_Sequence_name_0_sequence_1[] = "Sequence(name=\"{0}\", sequence=\"{1}\")";
static const char __pyx_k_SanitizedFastxParser___iter[] = "SanitizedFastxParser.__iter__";
static const char __pyx_k_force_single_and_require_paired[] = "force_single and require_paired cannot both be set!";
static const char __pyx_k_records_must_be_same_type_FASTA[] = "records must be same type (FASTA or FASTQ)";
static const char __pyx_k_Differing_lengths_of_left_and_ri[] = "Differing lengths of left and right files!";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())";
static const char __pyx_k_Uneven_number_of_reads_when_requ[] = "Uneven number of reads when require_paired is set!";
static const char __pyx_k_Unpaired_reads_when_require_pair[] = "Unpaired reads when require_paired is set!";
static const char __pyx_k_ValueError_with_refs_to_the_read[] = "ValueError with refs to the read pair in question.";
static const char __pyx_k_both_records_must_be_same_type_F[] = "both records must be same type (FASTA or FASTQ)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_kp_u_0_1;
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_kp_u_1_2;
static PyObject *__pyx_kp_u_2;
static PyObject *__pyx_kp_u_2_2;
static PyObject *__pyx_n_s_Alphabets;
static PyObject *__pyx_n_s_BrokenPairedReader;
static PyObject *__pyx_n_s_BrokenPairedReader___iter;
static PyObject *__pyx_n_u_DNAN_SIMPLE;
static PyObject *__pyx_kp_u_Differing_lengths_of_left_and_ri;
static PyObject *__pyx_n_s_FastxParser;
static PyObject *__pyx_n_s_FastxParser___iter;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_u_No_alphabet_with_name_0;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_u_Operator_not_available;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_ReadBundle;
static PyObject *__pyx_n_s_SanitizedFastxParser;
static PyObject *__pyx_n_s_SanitizedFastxParser___iter;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_n_s_Sequence_kmers;
static PyObject *__pyx_kp_u_Sequence_name_0_sequence_1;
static PyObject *__pyx_n_s_SplitPairedReader;
static PyObject *__pyx_n_s_SplitPairedReader___iter;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Uneven_number_of_reads_when_requ;
static PyObject *__pyx_n_s_UnpairedReadsError;
static PyObject *__pyx_n_s_UnpairedReadsError___init;
static PyObject *__pyx_kp_u_Unpaired_reads_when_require_pair;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_ValueError_with_refs_to_the_read;
static PyObject *__pyx_kp_u__12;
static PyObject *__pyx_kp_u__19;
static PyObject *__pyx_n_s_alphabet;
static PyObject *__pyx_n_u_annotations;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_attr;
static PyObject *__pyx_kp_u_both_records_must_be_same_type_F;
static PyObject *__pyx_n_s_check_is_pair;
static PyObject *__pyx_n_s_cleaned_seq;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_convert_n;
static PyObject *__pyx_n_s_description;
static PyObject *__pyx_n_u_description;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_s_force_name_match;
static PyObject *__pyx_n_s_force_single;
static PyObject *__pyx_kp_u_force_single_and_require_paired;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_from_screed_record;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_is_complete;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_khmer__oxli_parsing;
static PyObject *__pyx_kp_s_khmer__oxli_parsing_pyx;
static PyObject *__pyx_n_s_kmers;
static PyObject *__pyx_n_s_left_parser;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min_length;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_u_no_read;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_error;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Alphabets;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quality;
static PyObject *__pyx_n_u_quality;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r1;
static PyObject *__pyx_n_s_r1_name;
static PyObject *__pyx_n_s_r2;
static PyObject *__pyx_n_s_r2_name;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read1;
static PyObject *__pyx_n_s_read2;
static PyObject *__pyx_n_s_record;
static PyObject *__pyx_kp_u_records_must_be_same_type_FASTA;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_require_paired;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_right_parser;
static PyObject *__pyx_n_s_second;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_seq;
static PyObject *__pyx_n_s_sequence;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_get(PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_2__reduce_cython__(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_4__setstate_cython__(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_7parsing_8Sequence___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_sequence, PyObject *__pyx_v_quality, PyObject *__pyx_v_description, PyObject *__pyx_v_cleaned_seq); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_2__str__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_4__repr__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_6__len__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_8__richcmp__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_10kmers(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, int __pyx_v_K); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_13__getitem__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_4name___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_8sequence___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_11description___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_7quality___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_11cleaned_seq___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_15from_screed_record(PyObject *__pyx_v_record); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_17__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_19__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self, PyObject *__pyx_v_raw_records); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_9num_reads___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_12total_length___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_print_error(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18UnpairedReadsError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg, PyObject *__pyx_v_r1, PyObject *__pyx_v_r2); /* proto */
static int __pyx_pf_5khmer_5_oxli_7parsing_11FastxParser___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self, PyObject *__pyx_v_filename, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_2is_complete(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_4__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_7__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_9__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_filename, PyObject *__pyx_v_alphabet, bool __pyx_v_convert_n); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_2__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5n_bad___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_9_alphabet___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_left_parser, struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_right_parser, int __pyx_v_min_length, bool __pyx_v_force_name_match); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_16force_name_match___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_parser, int __pyx_v_min_length, bool __pyx_v_force_single, bool __pyx_v_require_paired); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_12force_single___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_14require_paired___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_6record___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_2_split_left_right(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_4check_is_pair(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_first, PyObject *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_6check_is_left(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8check_is_right(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10__pyx_unpickle_Alphabets(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_Alphabets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_Sequence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_ReadBundle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_FastxParser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_SanitizedFastxParser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_SplitPairedReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_BrokenPairedReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_int_228825662;
static PyObject *__pyx_int_238750788;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
/* Late includes */

/* "khmer/_oxli/parsing.pyx":17
 * 
 *     @staticmethod
 *     def get(name):             # <<<<<<<<<<<<<<
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 *         if not alphabet:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_1get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_9Alphabets_get[] = "Alphabets.get(name)";
static PyMethodDef __pyx_mdef_5khmer_5_oxli_7parsing_9Alphabets_1get = {"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_1get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_7parsing_9Alphabets_get};
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_1get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 17, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 17, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.Alphabets.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_get(__pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_get(PyObject *__pyx_v_name) {
  PyObject *__pyx_v_alphabet = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "khmer/_oxli/parsing.pyx":18
 *     @staticmethod
 *     def get(name):
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))             # <<<<<<<<<<<<<<
 *         if not alphabet:
 *             raise ValueError('No alphabet with name {0}'.format(name))
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_f_5khmer_5_oxli_7parsing_9Alphabets__get(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_f_5khmer_5_oxli_5utils__ustring(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_alphabet = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/parsing.pyx":19
 *     def get(name):
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 *         if not alphabet:             # <<<<<<<<<<<<<<
 *             raise ValueError('No alphabet with name {0}'.format(name))
 *         return alphabet
 */
  __pyx_t_4 = (__pyx_v_alphabet != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_v_alphabet) != 0);
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "khmer/_oxli/parsing.pyx":20
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 *         if not alphabet:
 *             raise ValueError('No alphabet with name {0}'.format(name))             # <<<<<<<<<<<<<<
 *         return alphabet
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_No_alphabet_with_name_0, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_v_name) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_name);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 20, __pyx_L1_error)

    /* "khmer/_oxli/parsing.pyx":19
 *     def get(name):
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 *         if not alphabet:             # <<<<<<<<<<<<<<
 *             raise ValueError('No alphabet with name {0}'.format(name))
 *         return alphabet
 */
  }

  /* "khmer/_oxli/parsing.pyx":21
 *         if not alphabet:
 *             raise ValueError('No alphabet with name {0}'.format(name))
 *         return alphabet             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_alphabet);
  __pyx_r = __pyx_v_alphabet;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":17
 * 
 *     @staticmethod
 *     def get(name):             # <<<<<<<<<<<<<<
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 *         if not alphabet:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("khmer._oxli.parsing.Alphabets.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_alphabet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":24
 * 
 *     @staticmethod
 *     cdef string _get(string name):             # <<<<<<<<<<<<<<
 *         if name == b'DNA_SIMPLE':
 *             return DNA_SIMPLE
 */

static std::string __pyx_f_5khmer_5_oxli_7parsing_9Alphabets__get(std::string __pyx_v_name) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get", 0);

  /* "khmer/_oxli/parsing.pyx":25
 *     @staticmethod
 *     cdef string _get(string name):
 *         if name == b'DNA_SIMPLE':             # <<<<<<<<<<<<<<
 *             return DNA_SIMPLE
 *         elif name == b'DNAN_SIMPLE':
 */
  __pyx_t_1 = ((__pyx_v_name == ((char const *)"DNA_SIMPLE")) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":26
 *     cdef string _get(string name):
 *         if name == b'DNA_SIMPLE':
 *             return DNA_SIMPLE             # <<<<<<<<<<<<<<
 *         elif name == b'DNAN_SIMPLE':
 *             return DNAN_SIMPLE
 */
    __pyx_r = oxli::alphabets::DNA_SIMPLE;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":25
 *     @staticmethod
 *     cdef string _get(string name):
 *         if name == b'DNA_SIMPLE':             # <<<<<<<<<<<<<<
 *             return DNA_SIMPLE
 *         elif name == b'DNAN_SIMPLE':
 */
  }

  /* "khmer/_oxli/parsing.pyx":27
 *         if name == b'DNA_SIMPLE':
 *             return DNA_SIMPLE
 *         elif name == b'DNAN_SIMPLE':             # <<<<<<<<<<<<<<
 *             return DNAN_SIMPLE
 *         elif name == b'RNA_SIMPLE':
 */
  __pyx_t_1 = ((__pyx_v_name == ((char const *)"DNAN_SIMPLE")) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":28
 *             return DNA_SIMPLE
 *         elif name == b'DNAN_SIMPLE':
 *             return DNAN_SIMPLE             # <<<<<<<<<<<<<<
 *         elif name == b'RNA_SIMPLE':
 *             return RNA_SIMPLE
 */
    __pyx_r = oxli::alphabets::DNAN_SIMPLE;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":27
 *         if name == b'DNA_SIMPLE':
 *             return DNA_SIMPLE
 *         elif name == b'DNAN_SIMPLE':             # <<<<<<<<<<<<<<
 *             return DNAN_SIMPLE
 *         elif name == b'RNA_SIMPLE':
 */
  }

  /* "khmer/_oxli/parsing.pyx":29
 *         elif name == b'DNAN_SIMPLE':
 *             return DNAN_SIMPLE
 *         elif name == b'RNA_SIMPLE':             # <<<<<<<<<<<<<<
 *             return RNA_SIMPLE
 *         elif name == b'RNAN_SIMPLE':
 */
  __pyx_t_1 = ((__pyx_v_name == ((char const *)"RNA_SIMPLE")) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":30
 *             return DNAN_SIMPLE
 *         elif name == b'RNA_SIMPLE':
 *             return RNA_SIMPLE             # <<<<<<<<<<<<<<
 *         elif name == b'RNAN_SIMPLE':
 *             return RNAN_SIMPLE
 */
    __pyx_r = oxli::alphabets::RNA_SIMPLE;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":29
 *         elif name == b'DNAN_SIMPLE':
 *             return DNAN_SIMPLE
 *         elif name == b'RNA_SIMPLE':             # <<<<<<<<<<<<<<
 *             return RNA_SIMPLE
 *         elif name == b'RNAN_SIMPLE':
 */
  }

  /* "khmer/_oxli/parsing.pyx":31
 *         elif name == b'RNA_SIMPLE':
 *             return RNA_SIMPLE
 *         elif name == b'RNAN_SIMPLE':             # <<<<<<<<<<<<<<
 *             return RNAN_SIMPLE
 *         elif name == b'IUPAC_NUCL':
 */
  __pyx_t_1 = ((__pyx_v_name == ((char const *)"RNAN_SIMPLE")) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":32
 *             return RNA_SIMPLE
 *         elif name == b'RNAN_SIMPLE':
 *             return RNAN_SIMPLE             # <<<<<<<<<<<<<<
 *         elif name == b'IUPAC_NUCL':
 *             return IUPAC_NUCL
 */
    __pyx_r = oxli::alphabets::RNAN_SIMPLE;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":31
 *         elif name == b'RNA_SIMPLE':
 *             return RNA_SIMPLE
 *         elif name == b'RNAN_SIMPLE':             # <<<<<<<<<<<<<<
 *             return RNAN_SIMPLE
 *         elif name == b'IUPAC_NUCL':
 */
  }

  /* "khmer/_oxli/parsing.pyx":33
 *         elif name == b'RNAN_SIMPLE':
 *             return RNAN_SIMPLE
 *         elif name == b'IUPAC_NUCL':             # <<<<<<<<<<<<<<
 *             return IUPAC_NUCL
 *         elif name == b'IUPAC_AA':
 */
  __pyx_t_1 = ((__pyx_v_name == ((char const *)"IUPAC_NUCL")) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":34
 *             return RNAN_SIMPLE
 *         elif name == b'IUPAC_NUCL':
 *             return IUPAC_NUCL             # <<<<<<<<<<<<<<
 *         elif name == b'IUPAC_AA':
 *             return IUPAC_AA
 */
    __pyx_r = oxli::alphabets::IUPAC_NUCL;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":33
 *         elif name == b'RNAN_SIMPLE':
 *             return RNAN_SIMPLE
 *         elif name == b'IUPAC_NUCL':             # <<<<<<<<<<<<<<
 *             return IUPAC_NUCL
 *         elif name == b'IUPAC_AA':
 */
  }

  /* "khmer/_oxli/parsing.pyx":35
 *         elif name == b'IUPAC_NUCL':
 *             return IUPAC_NUCL
 *         elif name == b'IUPAC_AA':             # <<<<<<<<<<<<<<
 *             return IUPAC_AA
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_name == ((char const *)"IUPAC_AA")) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":36
 *             return IUPAC_NUCL
 *         elif name == b'IUPAC_AA':
 *             return IUPAC_AA             # <<<<<<<<<<<<<<
 *         else:
 *             return string()
 */
    __pyx_r = oxli::alphabets::IUPAC_AA;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":35
 *         elif name == b'IUPAC_NUCL':
 *             return IUPAC_NUCL
 *         elif name == b'IUPAC_AA':             # <<<<<<<<<<<<<<
 *             return IUPAC_AA
 *         else:
 */
  }

  /* "khmer/_oxli/parsing.pyx":38
 *             return IUPAC_AA
 *         else:
 *             return string()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      __pyx_t_2 = std::string();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 38, __pyx_L1_error)
    }
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;
  }

  /* "khmer/_oxli/parsing.pyx":24
 * 
 *     @staticmethod
 *     cdef string _get(string name):             # <<<<<<<<<<<<<<
 *         if name == b'DNA_SIMPLE':
 *             return DNA_SIMPLE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("khmer._oxli.parsing.Alphabets._get", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_9Alphabets_2__reduce_cython__[] = "Alphabets.__reduce_cython__(self)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_2__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_2__reduce_cython__(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Alphabets); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Alphabets__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Alphabets); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("khmer._oxli.parsing.Alphabets.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Alphabets__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_9Alphabets_4__setstate_cython__[] = "Alphabets.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_4__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_9Alphabets_4__setstate_cython__(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Alphabets__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_7parsing___pyx_unpickle_Alphabets__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Alphabets, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Alphabets__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Alphabets.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":44
 * cdef class Sequence:
 * 
 *     def __cinit__(self, name=None, sequence=None,             # <<<<<<<<<<<<<<
 *                         quality=None, description=None,
 *                         cleaned_seq=None):
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_sequence = 0;
  PyObject *__pyx_v_quality = 0;
  PyObject *__pyx_v_description = 0;
  PyObject *__pyx_v_cleaned_seq = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_sequence,&__pyx_n_s_quality,&__pyx_n_s_description,&__pyx_n_s_cleaned_seq,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);

    /* "khmer/_oxli/parsing.pyx":45
 * 
 *     def __cinit__(self, name=None, sequence=None,
 *                         quality=None, description=None,             # <<<<<<<<<<<<<<
 *                         cleaned_seq=None):
 * 
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);

    /* "khmer/_oxli/parsing.pyx":46
 *     def __cinit__(self, name=None, sequence=None,
 *                         quality=None, description=None,
 *                         cleaned_seq=None):             # <<<<<<<<<<<<<<
 * 
 *         if name is not None and sequence is not None:
 */
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sequence);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quality);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_description);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cleaned_seq);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 44, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_sequence = values[1];
    __pyx_v_quality = values[2];
    __pyx_v_description = values[3];
    __pyx_v_cleaned_seq = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 44, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence___cinit__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self), __pyx_v_name, __pyx_v_sequence, __pyx_v_quality, __pyx_v_description, __pyx_v_cleaned_seq);

  /* "khmer/_oxli/parsing.pyx":44
 * cdef class Sequence:
 * 
 *     def __cinit__(self, name=None, sequence=None,             # <<<<<<<<<<<<<<
 *                         quality=None, description=None,
 *                         cleaned_seq=None):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_7parsing_8Sequence___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_sequence, PyObject *__pyx_v_quality, PyObject *__pyx_v_description, PyObject *__pyx_v_cleaned_seq) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/parsing.pyx":48
 *                         cleaned_seq=None):
 * 
 *         if name is not None and sequence is not None:             # <<<<<<<<<<<<<<
 *             self._obj.sequence = _bstring(sequence)
 *             self._obj.name = _bstring(name)
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_sequence != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":49
 * 
 *         if name is not None and sequence is not None:
 *             self._obj.sequence = _bstring(sequence)             # <<<<<<<<<<<<<<
 *             self._obj.name = _bstring(name)
 *             if description is not None:
 */
    __pyx_t_4 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_self->_obj.sequence = __pyx_t_5;

    /* "khmer/_oxli/parsing.pyx":50
 *         if name is not None and sequence is not None:
 *             self._obj.sequence = _bstring(sequence)
 *             self._obj.name = _bstring(name)             # <<<<<<<<<<<<<<
 *             if description is not None:
 *                 self._obj.description = _bstring(description)
 */
    __pyx_t_4 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_self->_obj.name = __pyx_t_5;

    /* "khmer/_oxli/parsing.pyx":51
 *             self._obj.sequence = _bstring(sequence)
 *             self._obj.name = _bstring(name)
 *             if description is not None:             # <<<<<<<<<<<<<<
 *                 self._obj.description = _bstring(description)
 *             if quality is not None:
 */
    __pyx_t_1 = (__pyx_v_description != Py_None);
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "khmer/_oxli/parsing.pyx":52
 *             self._obj.name = _bstring(name)
 *             if description is not None:
 *                 self._obj.description = _bstring(description)             # <<<<<<<<<<<<<<
 *             if quality is not None:
 *                 self._obj.quality = _bstring(quality)
 */
      __pyx_t_4 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_description); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_obj.description = __pyx_t_5;

      /* "khmer/_oxli/parsing.pyx":51
 *             self._obj.sequence = _bstring(sequence)
 *             self._obj.name = _bstring(name)
 *             if description is not None:             # <<<<<<<<<<<<<<
 *                 self._obj.description = _bstring(description)
 *             if quality is not None:
 */
    }

    /* "khmer/_oxli/parsing.pyx":53
 *             if description is not None:
 *                 self._obj.description = _bstring(description)
 *             if quality is not None:             # <<<<<<<<<<<<<<
 *                 self._obj.quality = _bstring(quality)
 *             if cleaned_seq is not None:
 */
    __pyx_t_2 = (__pyx_v_quality != Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "khmer/_oxli/parsing.pyx":54
 *                 self._obj.description = _bstring(description)
 *             if quality is not None:
 *                 self._obj.quality = _bstring(quality)             # <<<<<<<<<<<<<<
 *             if cleaned_seq is not None:
 *                 self._obj.cleaned_seq = _bstring(cleaned_seq)
 */
      __pyx_t_4 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_quality); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_obj.quality = __pyx_t_5;

      /* "khmer/_oxli/parsing.pyx":53
 *             if description is not None:
 *                 self._obj.description = _bstring(description)
 *             if quality is not None:             # <<<<<<<<<<<<<<
 *                 self._obj.quality = _bstring(quality)
 *             if cleaned_seq is not None:
 */
    }

    /* "khmer/_oxli/parsing.pyx":55
 *             if quality is not None:
 *                 self._obj.quality = _bstring(quality)
 *             if cleaned_seq is not None:             # <<<<<<<<<<<<<<
 *                 self._obj.cleaned_seq = _bstring(cleaned_seq)
 *             else:
 */
    __pyx_t_1 = (__pyx_v_cleaned_seq != Py_None);
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "khmer/_oxli/parsing.pyx":56
 *                 self._obj.quality = _bstring(quality)
 *             if cleaned_seq is not None:
 *                 self._obj.cleaned_seq = _bstring(cleaned_seq)             # <<<<<<<<<<<<<<
 *             else:
 *                 self._obj.cleaned_seq = self._obj.sequence
 */
      __pyx_t_4 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_cleaned_seq); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_obj.cleaned_seq = __pyx_t_5;

      /* "khmer/_oxli/parsing.pyx":55
 *             if quality is not None:
 *                 self._obj.quality = _bstring(quality)
 *             if cleaned_seq is not None:             # <<<<<<<<<<<<<<
 *                 self._obj.cleaned_seq = _bstring(cleaned_seq)
 *             else:
 */
      goto __pyx_L8;
    }

    /* "khmer/_oxli/parsing.pyx":58
 *                 self._obj.cleaned_seq = _bstring(cleaned_seq)
 *             else:
 *                 self._obj.cleaned_seq = self._obj.sequence             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
    /*else*/ {
      __pyx_t_5 = __pyx_v_self->_obj.sequence;
      __pyx_v_self->_obj.cleaned_seq = __pyx_t_5;
    }
    __pyx_L8:;

    /* "khmer/_oxli/parsing.pyx":48
 *                         cleaned_seq=None):
 * 
 *         if name is not None and sequence is not None:             # <<<<<<<<<<<<<<
 *             self._obj.sequence = _bstring(sequence)
 *             self._obj.name = _bstring(name)
 */
  }

  /* "khmer/_oxli/parsing.pyx":44
 * cdef class Sequence:
 * 
 *     def __cinit__(self, name=None, sequence=None,             # <<<<<<<<<<<<<<
 *                         quality=None, description=None,
 *                         cleaned_seq=None):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":60
 *                 self._obj.cleaned_seq = self._obj.sequence
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_2__str__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_2__str__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "khmer/_oxli/parsing.pyx":61
 * 
 *     def __str__(self):
 *         return repr(self)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Repr(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":60
 *                 self._obj.cleaned_seq = self._obj.sequence
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":63
 *         return repr(self)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Sequence(name="{0}", sequence="{1}")'.format(self.name, self.sequence)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_4__repr__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_4__repr__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "khmer/_oxli/parsing.pyx":64
 * 
 *     def __repr__(self):
 *         return 'Sequence(name="{0}", sequence="{1}")'.format(self.name, self.sequence)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Sequence_name_0_sequence_1, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":63
 *         return repr(self)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Sequence(name="{0}", sequence="{1}")'.format(self.name, self.sequence)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":66
 *         return 'Sequence(name="{0}", sequence="{1}")'.format(self.name, self.sequence)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._obj.sequence.length()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_6__len__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_6__len__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "khmer/_oxli/parsing.pyx":67
 * 
 *     def __len__(self):
 *         return self._obj.sequence.length()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(x, y, op):
 */
  __pyx_r = __pyx_v_self->_obj.sequence.length();
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":66
 *         return 'Sequence(name="{0}", sequence="{1}")'.format(self.name, self.sequence)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._obj.sequence.length()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":69
 *         return self._obj.sequence.length()
 * 
 *     def __richcmp__(x, y, op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return x.name == y.name and x.sequence == y.sequence
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_9__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_9__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(0, 69, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_8__richcmp__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_x), ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_8__richcmp__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "khmer/_oxli/parsing.pyx":70
 * 
 *     def __richcmp__(x, y, op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return x.name == y.name and x.sequence == y.sequence
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "khmer/_oxli/parsing.pyx":71
 *     def __richcmp__(x, y, op):
 *         if op == 2:
 *             return x.name == y.name and x.sequence == y.sequence             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError('Operator not available')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_y, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 71, __pyx_L1_error)
    if (__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_sequence); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_y, __pyx_n_s_sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_L4_bool_binop_done:;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":70
 * 
 *     def __richcmp__(x, y, op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return x.name == y.name and x.sequence == y.sequence
 *         else:
 */
  }

  /* "khmer/_oxli/parsing.pyx":73
 *             return x.name == y.name and x.sequence == y.sequence
 *         else:
 *             raise NotImplementedError('Operator not available')             # <<<<<<<<<<<<<<
 * 
 *     def kmers(self, int K):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 73, __pyx_L1_error)
  }

  /* "khmer/_oxli/parsing.pyx":69
 *         return self._obj.sequence.length()
 * 
 *     def __richcmp__(x, y, op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return x.name == y.name and x.sequence == y.sequence
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_8Sequence_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/parsing.pyx":75
 *             raise NotImplementedError('Operator not available')
 * 
 *     def kmers(self, int K):             # <<<<<<<<<<<<<<
 *         cdef int i = 0
 *         cdef unicode sequence = self.sequence
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11kmers(PyObject *__pyx_v_self, PyObject *__pyx_arg_K); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_10kmers[] = "Sequence.kmers(self, int K)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11kmers(PyObject *__pyx_v_self, PyObject *__pyx_arg_K) {
  int __pyx_v_K;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kmers (wrapper)", 0);
  assert(__pyx_arg_K); {
    __pyx_v_K = __Pyx_PyInt_As_int(__pyx_arg_K); if (unlikely((__pyx_v_K == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.kmers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_10kmers(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self), ((int)__pyx_v_K));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_10kmers(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, int __pyx_v_K) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kmers", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *)__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers(__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 75, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_K = __pyx_v_K;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_7parsing_8Sequence_12generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_kmers, __pyx_n_s_Sequence_kmers, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!gen)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.kmers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_8Sequence_12generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kmers", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":76
 * 
 *     def kmers(self, int K):
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef unicode sequence = self.sequence
 *         for i in range(0, len(self)-K+1):
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "khmer/_oxli/parsing.pyx":77
 *     def kmers(self, int K):
 *         cdef int i = 0
 *         cdef unicode sequence = self.sequence             # <<<<<<<<<<<<<<
 *         for i in range(0, len(self)-K+1):
 *             yield sequence[i:i+K]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_sequence = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":78
 *         cdef int i = 0
 *         cdef unicode sequence = self.sequence
 *         for i in range(0, len(self)-K+1):             # <<<<<<<<<<<<<<
 *             yield sequence[i:i+K]
 * 
 */
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 - __pyx_cur_scope->__pyx_v_K) + 1);
  __pyx_t_2 = __pyx_t_3;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_4;

    /* "khmer/_oxli/parsing.pyx":79
 *         cdef unicode sequence = self.sequence
 *         for i in range(0, len(self)-K+1):
 *             yield sequence[i:i+K]             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, x):
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_sequence == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 79, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyUnicode_Substring(__pyx_cur_scope->__pyx_v_sequence, __pyx_cur_scope->__pyx_v_i, (__pyx_cur_scope->__pyx_v_i + __pyx_cur_scope->__pyx_v_K)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 79, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "khmer/_oxli/parsing.pyx":75
 *             raise NotImplementedError('Operator not available')
 * 
 *     def kmers(self, int K):             # <<<<<<<<<<<<<<
 *         cdef int i = 0
 *         cdef unicode sequence = self.sequence
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("kmers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":81
 *             yield sequence[i:i+K]
 * 
 *     def __getitem__(self, x):             # <<<<<<<<<<<<<<
 *         # Definitely optimize this.
 *         return self.sequence[x]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_14__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_14__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_13__getitem__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_13__getitem__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "khmer/_oxli/parsing.pyx":83
 *     def __getitem__(self, x):
 *         # Definitely optimize this.
 *         return self.sequence[x]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":81
 *             yield sequence[i:i+K]
 * 
 *     def __getitem__(self, x):             # <<<<<<<<<<<<<<
 *         # Definitely optimize this.
 *         return self.sequence[x]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":86
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         cdef unicode name = self._obj.name
 *         return self._obj.name if name else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_4name___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_4name___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/parsing.pyx":87
 *     @property
 *     def name(self):
 *         cdef unicode name = self._obj.name             # <<<<<<<<<<<<<<
 *         return self._obj.name if name else None
 * 
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":88
 *     def name(self):
 *         cdef unicode name = self._obj.name
 *         return self._obj.name if name else None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (__Pyx_PyUnicode_IS_TRUE(__pyx_v_name) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":86
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         cdef unicode name = self._obj.name
 *         return self._obj.name if name else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":91
 * 
 *     @property
 *     def sequence(self):             # <<<<<<<<<<<<<<
 *         cdef unicode sequence = self._obj.sequence
 *         return self._obj.sequence if sequence else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_8sequence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_8sequence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_8sequence___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_8sequence___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_v_sequence = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/parsing.pyx":92
 *     @property
 *     def sequence(self):
 *         cdef unicode sequence = self._obj.sequence             # <<<<<<<<<<<<<<
 *         return self._obj.sequence if sequence else None
 * 
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sequence = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":93
 *     def sequence(self):
 *         cdef unicode sequence = self._obj.sequence
 *         return self._obj.sequence if sequence else None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (__Pyx_PyUnicode_IS_TRUE(__pyx_v_sequence) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.sequence); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":91
 * 
 *     @property
 *     def sequence(self):             # <<<<<<<<<<<<<<
 *         cdef unicode sequence = self._obj.sequence
 *         return self._obj.sequence if sequence else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.sequence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sequence);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":96
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 *         cdef unicode description = self._obj.description
 *         return description if description else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11description_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11description_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_11description___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_11description___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_v_description = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/parsing.pyx":97
 *     @property
 *     def description(self):
 *         cdef unicode description = self._obj.description             # <<<<<<<<<<<<<<
 *         return description if description else None
 * 
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.description); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_description = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":98
 *     def description(self):
 *         cdef unicode description = self._obj.description
 *         return description if description else None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (__Pyx_PyUnicode_IS_TRUE(__pyx_v_description) != 0);
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_description);
    __pyx_t_1 = __pyx_v_description;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":96
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 *         cdef unicode description = self._obj.description
 *         return description if description else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.description.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_description);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":101
 * 
 *     @property
 *     def quality(self):             # <<<<<<<<<<<<<<
 *         cdef unicode quality = self._obj.quality
 *         return quality if quality else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_7quality_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_7quality_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_7quality___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_7quality___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_v_quality = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/parsing.pyx":102
 *     @property
 *     def quality(self):
 *         cdef unicode quality = self._obj.quality             # <<<<<<<<<<<<<<
 *         return quality if quality else None
 * 
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.quality); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quality = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":103
 *     def quality(self):
 *         cdef unicode quality = self._obj.quality
 *         return quality if quality else None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (__Pyx_PyUnicode_IS_TRUE(__pyx_v_quality) != 0);
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_quality);
    __pyx_t_1 = __pyx_v_quality;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":101
 * 
 *     @property
 *     def quality(self):             # <<<<<<<<<<<<<<
 *         cdef unicode quality = self._obj.quality
 *         return quality if quality else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.quality.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quality);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":106
 * 
 *     @property
 *     def cleaned_seq(self):             # <<<<<<<<<<<<<<
 *         cdef unicode cleaned_seq = self._obj.cleaned_seq
 *         return cleaned_seq if cleaned_seq else None
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11cleaned_seq_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11cleaned_seq_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_11cleaned_seq___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_11cleaned_seq___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_v_cleaned_seq = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/parsing.pyx":107
 *     @property
 *     def cleaned_seq(self):
 *         cdef unicode cleaned_seq = self._obj.cleaned_seq             # <<<<<<<<<<<<<<
 *         return cleaned_seq if cleaned_seq else None
 * 
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_obj.cleaned_seq); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cleaned_seq = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":108
 *     def cleaned_seq(self):
 *         cdef unicode cleaned_seq = self._obj.cleaned_seq
 *         return cleaned_seq if cleaned_seq else None             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (__Pyx_PyUnicode_IS_TRUE(__pyx_v_cleaned_seq) != 0);
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_cleaned_seq);
    __pyx_t_1 = __pyx_v_cleaned_seq;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":106
 * 
 *     @property
 *     def cleaned_seq(self):             # <<<<<<<<<<<<<<
 *         cdef unicode cleaned_seq = self._obj.cleaned_seq
 *         return cleaned_seq if cleaned_seq else None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.cleaned_seq.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cleaned_seq);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":111
 * 
 *     @staticmethod
 *     def from_screed_record(record):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence(name=record.name,
 *                                      sequence=record.sequence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_16from_screed_record(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_15from_screed_record[] = "Sequence.from_screed_record(record)";
static PyMethodDef __pyx_mdef_5khmer_5_oxli_7parsing_8Sequence_16from_screed_record = {"from_screed_record", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_16from_screed_record, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_15from_screed_record};
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_16from_screed_record(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_record = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_screed_record (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_record,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_record)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_screed_record") < 0)) __PYX_ERR(0, 111, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_record = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_screed_record", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.from_screed_record", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_15from_screed_record(__pyx_v_record);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_15from_screed_record(PyObject *__pyx_v_record) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_seq = 0;
  PyObject *__pyx_v_attr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_screed_record", 0);

  /* "khmer/_oxli/parsing.pyx":112
 *     @staticmethod
 *     def from_screed_record(record):
 *         cdef Sequence seq = Sequence(name=record.name,             # <<<<<<<<<<<<<<
 *                                      sequence=record.sequence)
 *         if hasattr(record, 'quality'):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_record, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_name, __pyx_t_2) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "khmer/_oxli/parsing.pyx":113
 *     def from_screed_record(record):
 *         cdef Sequence seq = Sequence(name=record.name,
 *                                      sequence=record.sequence)             # <<<<<<<<<<<<<<
 *         if hasattr(record, 'quality'):
 *             seq._obj.quality = _bstring(record.quality)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_record, __pyx_n_s_sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sequence, __pyx_t_2) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "khmer/_oxli/parsing.pyx":112
 *     @staticmethod
 *     def from_screed_record(record):
 *         cdef Sequence seq = Sequence(name=record.name,             # <<<<<<<<<<<<<<
 *                                      sequence=record.sequence)
 *         if hasattr(record, 'quality'):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/parsing.pyx":114
 *         cdef Sequence seq = Sequence(name=record.name,
 *                                      sequence=record.sequence)
 *         if hasattr(record, 'quality'):             # <<<<<<<<<<<<<<
 *             seq._obj.quality = _bstring(record.quality)
 * 
 */
  __pyx_t_3 = __Pyx_HasAttr(__pyx_v_record, __pyx_n_u_quality); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 114, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "khmer/_oxli/parsing.pyx":115
 *                                      sequence=record.sequence)
 *         if hasattr(record, 'quality'):
 *             seq._obj.quality = _bstring(record.quality)             # <<<<<<<<<<<<<<
 * 
 *         for attr in ('annotations', 'description'):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_record, __pyx_n_s_quality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_seq->_obj.quality = __pyx_t_5;

    /* "khmer/_oxli/parsing.pyx":114
 *         cdef Sequence seq = Sequence(name=record.name,
 *                                      sequence=record.sequence)
 *         if hasattr(record, 'quality'):             # <<<<<<<<<<<<<<
 *             seq._obj.quality = _bstring(record.quality)
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":117
 *             seq._obj.quality = _bstring(record.quality)
 * 
 *         for attr in ('annotations', 'description'):             # <<<<<<<<<<<<<<
 *             if hasattr(record, attr):
 *                 seq._obj.description = _bstring(getattr(record, attr))
 */
  __pyx_t_1 = __pyx_tuple__2; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= 2) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_attr, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":118
 * 
 *         for attr in ('annotations', 'description'):
 *             if hasattr(record, attr):             # <<<<<<<<<<<<<<
 *                 seq._obj.description = _bstring(getattr(record, attr))
 * 
 */
    __pyx_t_4 = __Pyx_HasAttr(__pyx_v_record, __pyx_v_attr); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 118, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {

      /* "khmer/_oxli/parsing.pyx":119
 *         for attr in ('annotations', 'description'):
 *             if hasattr(record, attr):
 *                 seq._obj.description = _bstring(getattr(record, attr))             # <<<<<<<<<<<<<<
 * 
 *         return seq
 */
      __pyx_t_2 = __Pyx_GetAttr(__pyx_v_record, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_seq->_obj.description = __pyx_t_5;

      /* "khmer/_oxli/parsing.pyx":118
 * 
 *         for attr in ('annotations', 'description'):
 *             if hasattr(record, attr):             # <<<<<<<<<<<<<<
 *                 seq._obj.description = _bstring(getattr(record, attr))
 * 
 */
    }

    /* "khmer/_oxli/parsing.pyx":117
 *             seq._obj.quality = _bstring(record.quality)
 * 
 *         for attr in ('annotations', 'description'):             # <<<<<<<<<<<<<<
 *             if hasattr(record, attr):
 *                 seq._obj.description = _bstring(getattr(record, attr))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":121
 *                 seq._obj.description = _bstring(getattr(record, attr))
 * 
 *         return seq             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_seq));
  __pyx_r = ((PyObject *)__pyx_v_seq);
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":111
 * 
 *     @staticmethod
 *     def from_screed_record(record):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence(name=record.name,
 *                                      sequence=record.sequence)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.from_screed_record", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_seq);
  __Pyx_XDECREF(__pyx_v_attr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":124
 * 
 *     @staticmethod
 *     cdef Sequence _wrap(CpSequence cseq):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq
 */

static struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_f_5khmer_5_oxli_7parsing_8Sequence__wrap(oxli::read_parsers::Read __pyx_v_cseq) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_seq = 0;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_wrap", 0);

  /* "khmer/_oxli/parsing.pyx":125
 *     @staticmethod
 *     cdef Sequence _wrap(CpSequence cseq):
 *         cdef Sequence seq = Sequence()             # <<<<<<<<<<<<<<
 *         seq._obj = cseq
 *         return seq
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":126
 *     cdef Sequence _wrap(CpSequence cseq):
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq             # <<<<<<<<<<<<<<
 *         return seq
 * 
 */
  __pyx_v_seq->_obj = __pyx_v_cseq;

  /* "khmer/_oxli/parsing.pyx":127
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq
 *         return seq             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_seq));
  __pyx_r = __pyx_v_seq;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":124
 * 
 *     @staticmethod
 *     cdef Sequence _wrap(CpSequence cseq):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence()
 *         seq._obj = cseq
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence._wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_seq);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_18__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_17__reduce_cython__[] = "Sequence.__reduce_cython__(self)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_18__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_17__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_17__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_20__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_19__setstate_cython__[] = "Sequence.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_20__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8Sequence_19__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8Sequence_19__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.Sequence.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":132
 * cdef class ReadBundle:
 * 
 *     def __cinit__(self, *raw_records):             # <<<<<<<<<<<<<<
 *         self.reads = [r for r in raw_records if r]
 * 
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_raw_records = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_raw_records = __pyx_args;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle___cinit__(((struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)__pyx_v_self), __pyx_v_raw_records);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_raw_records);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self, PyObject *__pyx_v_raw_records) {
  PyObject *__pyx_7genexpr__pyx_v_r = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/parsing.pyx":133
 * 
 *     def __cinit__(self, *raw_records):
 *         self.reads = [r for r in raw_records if r]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_raw_records; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 133, __pyx_L5_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_r, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_7genexpr__pyx_v_r); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 133, __pyx_L5_error)
      if (__pyx_t_5) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_r))) __PYX_ERR(0, 133, __pyx_L5_error)
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_r); __pyx_7genexpr__pyx_v_r = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_r); __pyx_7genexpr__pyx_v_r = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reads);
  __Pyx_DECREF(__pyx_v_self->reads);
  __pyx_v_self->reads = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":132
 * cdef class ReadBundle:
 * 
 *     def __cinit__(self, *raw_records):             # <<<<<<<<<<<<<<
 *         self.reads = [r for r in raw_records if r]
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.parsing.ReadBundle.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":136
 * 
 *     @property
 *     def num_reads(self):             # <<<<<<<<<<<<<<
 *         return len(self.reads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_9num_reads_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_9num_reads_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_9num_reads___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_9num_reads___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/parsing.pyx":137
 *     @property
 *     def num_reads(self):
 *         return len(self.reads)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->reads;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 137, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":136
 * 
 *     @property
 *     def num_reads(self):             # <<<<<<<<<<<<<<
 *         return len(self.reads)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.ReadBundle.num_reads.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":140
 * 
 *     @property
 *     def total_length(self):             # <<<<<<<<<<<<<<
 *         return sum([len(r.sequence) for r in self.reads])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_12total_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_12total_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_12total_length___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_12total_length___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self) {
  PyObject *__pyx_8genexpr1__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "khmer/_oxli/parsing.pyx":141
 *     @property
 *     def total_length(self):
 *         return sum([len(r.sequence) for r in self.reads])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->reads == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 141, __pyx_L5_error)
    }
    __pyx_t_2 = __pyx_v_self->reads; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 141, __pyx_L5_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_r, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_r, __pyx_n_s_sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 141, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 141, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_r); __pyx_8genexpr1__pyx_v_r = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_r); __pyx_8genexpr1__pyx_v_r = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":140
 * 
 *     @property
 *     def total_length(self):             # <<<<<<<<<<<<<<
 *         return sum([len(r.sequence) for r in self.reads])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.parsing.ReadBundle.total_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_10ReadBundle_2__reduce_cython__[] = "ReadBundle.__reduce_cython__(self)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_2__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.ReadBundle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_10ReadBundle_4__setstate_cython__[] = "ReadBundle.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_4__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10ReadBundle_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.ReadBundle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":144
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_1print_error(PyObject *__pyx_self, PyObject *__pyx_v_msg); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_print_error[] = "print_error(msg)\nPrint the given message to 'stderr'.";
static PyMethodDef __pyx_mdef_5khmer_5_oxli_7parsing_1print_error = {"print_error", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_1print_error, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_print_error};
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_1print_error(PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_error (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_print_error(__pyx_self, ((PyObject *)__pyx_v_msg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_print_error(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print_error", 0);

  /* "khmer/_oxli/parsing.pyx":147
 *     """Print the given message to 'stderr'."""
 * 
 *     print(msg, file=sys.stderr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_msg);
  __Pyx_GIVEREF(__pyx_v_msg);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_msg);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stderr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_file, __pyx_t_4) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "khmer/_oxli/parsing.pyx":144
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._oxli.parsing.print_error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":153
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18UnpairedReadsError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_18UnpairedReadsError___init__[] = "UnpairedReadsError.__init__(self, msg, r1, r2)";
static PyMethodDef __pyx_mdef_5khmer_5_oxli_7parsing_18UnpairedReadsError_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_7parsing_18UnpairedReadsError_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_7parsing_18UnpairedReadsError___init__};
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18UnpairedReadsError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_msg = 0;
  PyObject *__pyx_v_r1 = 0;
  PyObject *__pyx_v_r2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_msg,&__pyx_n_s_r1,&__pyx_n_s_r2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_msg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 153, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 153, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 153, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 153, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_msg = values[1];
    __pyx_v_r1 = values[2];
    __pyx_v_r2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 153, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.UnpairedReadsError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18UnpairedReadsError___init__(__pyx_self, __pyx_v_self, __pyx_v_msg, __pyx_v_r1, __pyx_v_r2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18UnpairedReadsError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_msg, PyObject *__pyx_v_r1, PyObject *__pyx_v_r2) {
  PyObject *__pyx_v_r1_name = NULL;
  PyObject *__pyx_v_r2_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "khmer/_oxli/parsing.pyx":154
 * 
 *     def __init__(self, msg, r1, r2):
 *         r1_name = "<no read>"             # <<<<<<<<<<<<<<
 *         r2_name = "<no read>"
 *         if r1:
 */
  __Pyx_INCREF(__pyx_kp_u_no_read);
  __pyx_v_r1_name = __pyx_kp_u_no_read;

  /* "khmer/_oxli/parsing.pyx":155
 *     def __init__(self, msg, r1, r2):
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"             # <<<<<<<<<<<<<<
 *         if r1:
 *             r1_name = r1.name
 */
  __Pyx_INCREF(__pyx_kp_u_no_read);
  __pyx_v_r2_name = __pyx_kp_u_no_read;

  /* "khmer/_oxli/parsing.pyx":156
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 *         if r1:             # <<<<<<<<<<<<<<
 *             r1_name = r1.name
 *         if r2:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_r1); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 156, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":157
 *         r2_name = "<no read>"
 *         if r1:
 *             r1_name = r1.name             # <<<<<<<<<<<<<<
 *         if r2:
 *             r2_name = r2.name
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_r1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_r1_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":156
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 *         if r1:             # <<<<<<<<<<<<<<
 *             r1_name = r1.name
 *         if r2:
 */
  }

  /* "khmer/_oxli/parsing.pyx":158
 *         if r1:
 *             r1_name = r1.name
 *         if r2:             # <<<<<<<<<<<<<<
 *             r2_name = r2.name
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_r2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":159
 *             r1_name = r1.name
 *         if r2:
 *             r2_name = r2.name             # <<<<<<<<<<<<<<
 * 
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_r2, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_r2_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":158
 *         if r1:
 *             r1_name = r1.name
 *         if r2:             # <<<<<<<<<<<<<<
 *             r2_name = r2.name
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":161
 *             r2_name = r2.name
 * 
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)             # <<<<<<<<<<<<<<
 *         ValueError.__init__(self, msg)
 *         self.read1 = r1
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_0_1, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_r1_name, __pyx_v_r2_name};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_r1_name, __pyx_v_r2_name};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_r1_name);
    __Pyx_GIVEREF(__pyx_v_r1_name);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_r1_name);
    __Pyx_INCREF(__pyx_v_r2_name);
    __Pyx_GIVEREF(__pyx_v_r2_name);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_r2_name);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_v_msg, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/parsing.pyx":162
 * 
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)
 *         ValueError.__init__(self, msg)             # <<<<<<<<<<<<<<
 *         self.read1 = r1
 *         self.read2 = r2
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_builtin_ValueError, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_self, __pyx_v_msg};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_self, __pyx_v_msg};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_msg);
    __Pyx_GIVEREF(__pyx_v_msg);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_msg);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "khmer/_oxli/parsing.pyx":163
 *         msg = msg + '\n"{0}"\n"{1}"'.format(r1_name, r2_name)
 *         ValueError.__init__(self, msg)
 *         self.read1 = r1             # <<<<<<<<<<<<<<
 *         self.read2 = r2
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_read1, __pyx_v_r1) < 0) __PYX_ERR(0, 163, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":164
 *         ValueError.__init__(self, msg)
 *         self.read1 = r1
 *         self.read2 = r2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_read2, __pyx_v_r2) < 0) __PYX_ERR(0, 164, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":153
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("khmer._oxli.parsing.UnpairedReadsError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r1_name);
  __Pyx_XDECREF(__pyx_v_r2_name);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":167
 * 
 * 
 * cdef inline bool is_valid(const char base, string& alphabet):             # <<<<<<<<<<<<<<
 *     cdef char b
 *     for b in alphabet:
 */

static CYTHON_INLINE bool __pyx_f_5khmer_5_oxli_7parsing_is_valid(char const __pyx_v_base, std::string &__pyx_v_alphabet) {
  char __pyx_v_b;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string::iterator __pyx_t_1;
  char __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("is_valid", 0);

  /* "khmer/_oxli/parsing.pyx":169
 * cdef inline bool is_valid(const char base, string& alphabet):
 *     cdef char b
 *     for b in alphabet:             # <<<<<<<<<<<<<<
 *         if b == base:
 *             return True
 */
  __pyx_t_1 = __pyx_v_alphabet.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_v_alphabet.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_b = __pyx_t_2;

    /* "khmer/_oxli/parsing.pyx":170
 *     cdef char b
 *     for b in alphabet:
 *         if b == base:             # <<<<<<<<<<<<<<
 *             return True
 *     return False
 */
    __pyx_t_3 = ((__pyx_v_b == __pyx_v_base) != 0);
    if (__pyx_t_3) {

      /* "khmer/_oxli/parsing.pyx":171
 *     for b in alphabet:
 *         if b == base:
 *             return True             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":170
 *     cdef char b
 *     for b in alphabet:
 *         if b == base:             # <<<<<<<<<<<<<<
 *             return True
 *     return False
 */
    }

    /* "khmer/_oxli/parsing.pyx":169
 * cdef inline bool is_valid(const char base, string& alphabet):
 *     cdef char b
 *     for b in alphabet:             # <<<<<<<<<<<<<<
 *         if b == base:
 *             return True
 */
  }

  /* "khmer/_oxli/parsing.pyx":172
 *         if b == base:
 *             return True
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":167
 * 
 * 
 * cdef inline bool is_valid(const char base, string& alphabet):             # <<<<<<<<<<<<<<
 *     cdef char b
 *     for b in alphabet:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":175
 * 
 * 
 * cdef inline bool sanitize_sequence(string& sequence,             # <<<<<<<<<<<<<<
 *                                    string& alphabet,
 *                                    bool convert_n):
 */

static CYTHON_INLINE bool __pyx_f_5khmer_5_oxli_7parsing_sanitize_sequence(std::string &__pyx_v_sequence, std::string &__pyx_v_alphabet, bool __pyx_v_convert_n) {
  int __pyx_v_i;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("sanitize_sequence", 0);

  /* "khmer/_oxli/parsing.pyx":178
 *                                    string& alphabet,
 *                                    bool convert_n):
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf
 */
  __pyx_v_i = 0;

  /* "khmer/_oxli/parsing.pyx":179
 *                                    bool convert_n):
 *     cdef int i = 0
 *     for i in range(sequence.length()):             # <<<<<<<<<<<<<<
 *         sequence[i] &= 0xdf
 *         if not is_valid(sequence[i], alphabet):
 */
  __pyx_t_1 = __pyx_v_sequence.length();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "khmer/_oxli/parsing.pyx":180
 *     cdef int i = 0
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf             # <<<<<<<<<<<<<<
 *         if not is_valid(sequence[i], alphabet):
 *             return False
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_sequence[__pyx_t_4]) = ((__pyx_v_sequence[__pyx_t_4]) & 0xdf);

    /* "khmer/_oxli/parsing.pyx":181
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf
 *         if not is_valid(sequence[i], alphabet):             # <<<<<<<<<<<<<<
 *             return False
 *         if convert_n and sequence[i] == b'N':
 */
    __pyx_t_5 = ((!(__pyx_f_5khmer_5_oxli_7parsing_is_valid((__pyx_v_sequence[__pyx_v_i]), __pyx_v_alphabet) != 0)) != 0);
    if (__pyx_t_5) {

      /* "khmer/_oxli/parsing.pyx":182
 *         sequence[i] &= 0xdf
 *         if not is_valid(sequence[i], alphabet):
 *             return False             # <<<<<<<<<<<<<<
 *         if convert_n and sequence[i] == b'N':
 *             sequence[i] = b'A'
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":181
 *     for i in range(sequence.length()):
 *         sequence[i] &= 0xdf
 *         if not is_valid(sequence[i], alphabet):             # <<<<<<<<<<<<<<
 *             return False
 *         if convert_n and sequence[i] == b'N':
 */
    }

    /* "khmer/_oxli/parsing.pyx":183
 *         if not is_valid(sequence[i], alphabet):
 *             return False
 *         if convert_n and sequence[i] == b'N':             # <<<<<<<<<<<<<<
 *             sequence[i] = b'A'
 *     return True
 */
    __pyx_t_6 = (__pyx_v_convert_n != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = (((__pyx_v_sequence[__pyx_v_i]) == 'N') != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_5) {

      /* "khmer/_oxli/parsing.pyx":184
 *             return False
 *         if convert_n and sequence[i] == b'N':
 *             sequence[i] = b'A'             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
      (__pyx_v_sequence[__pyx_v_i]) = 'A';

      /* "khmer/_oxli/parsing.pyx":183
 *         if not is_valid(sequence[i], alphabet):
 *             return False
 *         if convert_n and sequence[i] == b'N':             # <<<<<<<<<<<<<<
 *             sequence[i] = b'A'
 *     return True
 */
    }
  }

  /* "khmer/_oxli/parsing.pyx":185
 *         if convert_n and sequence[i] == b'N':
 *             sequence[i] = b'A'
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":175
 * 
 * 
 * cdef inline bool sanitize_sequence(string& sequence,             # <<<<<<<<<<<<<<
 *                                    string& alphabet,
 *                                    bool convert_n):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":190
 * cdef class FastxParser:
 * 
 *     def __cinit__(self, filename, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._this = get_parser[CpFastxReader](_bstring(filename))
 * 
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 190, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("khmer._oxli.parsing.FastxParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_11FastxParser___cinit__(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self), __pyx_v_filename, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_7parsing_11FastxParser___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self, PyObject *__pyx_v_filename, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::shared_ptr<oxli::read_parsers::ReadParser<oxli::read_parsers::FastxReader> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/parsing.pyx":191
 * 
 *     def __cinit__(self, filename, *args, **kwargs):
 *         self._this = get_parser[CpFastxReader](_bstring(filename))             # <<<<<<<<<<<<<<
 * 
 *     cdef Sequence _next(self):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = oxli::read_parsers::get_parser<oxli::read_parsers::FastxReader>(__pyx_t_2);
  } catch(...) {
    oxli_raise_py_error(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 191, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_3;

  /* "khmer/_oxli/parsing.pyx":190
 * cdef class FastxParser:
 * 
 *     def __cinit__(self, filename, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._this = get_parser[CpFastxReader](_bstring(filename))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.FastxParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":193
 *         self._this = get_parser[CpFastxReader](_bstring(filename))
 * 
 *     cdef Sequence _next(self):             # <<<<<<<<<<<<<<
 *         if not self.is_complete():
 *             return Sequence._wrap(deref(self._this).get_next_read())
 */

static struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_f_5khmer_5_oxli_7parsing_11FastxParser__next(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_next", 0);

  /* "khmer/_oxli/parsing.pyx":194
 * 
 *     cdef Sequence _next(self):
 *         if not self.is_complete():             # <<<<<<<<<<<<<<
 *             return Sequence._wrap(deref(self._this).get_next_read())
 *         else:
 */
  __pyx_t_1 = ((!(((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->__pyx_vtab)->is_complete(__pyx_v_self, 0) != 0)) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":195
 *     cdef Sequence _next(self):
 *         if not self.is_complete():
 *             return Sequence._wrap(deref(self._this).get_next_read())             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_2 = ((PyObject *)__pyx_f_5khmer_5_oxli_7parsing_8Sequence__wrap((*__pyx_v_self->_this).get_next_read())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":194
 * 
 *     cdef Sequence _next(self):
 *         if not self.is_complete():             # <<<<<<<<<<<<<<
 *             return Sequence._wrap(deref(self._this).get_next_read())
 *         else:
 */
  }

  /* "khmer/_oxli/parsing.pyx":197
 *             return Sequence._wrap(deref(self._this).get_next_read())
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     cpdef bool is_complete(self):
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "khmer/_oxli/parsing.pyx":193
 *         self._this = get_parser[CpFastxReader](_bstring(filename))
 * 
 *     cdef Sequence _next(self):             # <<<<<<<<<<<<<<
 *         if not self.is_complete():
 *             return Sequence._wrap(deref(self._this).get_next_read())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.parsing.FastxParser._next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":199
 *             return None
 * 
 *     cpdef bool is_complete(self):             # <<<<<<<<<<<<<<
 *         return deref(self._this).is_complete()
 * 
 */

static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_3is_complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_5khmer_5_oxli_7parsing_11FastxParser_is_complete(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_complete", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_complete); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_3is_complete)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "khmer/_oxli/parsing.pyx":200
 * 
 *     cpdef bool is_complete(self):
 *         return deref(self._this).is_complete()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_r = (*__pyx_v_self->_this).is_complete();
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":199
 *             return None
 * 
 *     cpdef bool is_complete(self):             # <<<<<<<<<<<<<<
 *         return deref(self._this).is_complete()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("khmer._oxli.parsing.FastxParser.is_complete", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_3is_complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_11FastxParser_2is_complete[] = "FastxParser.is_complete(self) -> bool";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_3is_complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_complete (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_2is_complete(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_2is_complete(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_complete", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_5khmer_5_oxli_7parsing_11FastxParser_is_complete(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.FastxParser.is_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_11FastxParser_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/parsing.pyx":202
 *         return deref(self._this).is_complete()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         while not self.is_complete():
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_4__iter__(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_4__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *)__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__(__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 202, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_7parsing_11FastxParser_6generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_FastxParser___iter, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!gen)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.FastxParser.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_11FastxParser_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 202, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":204
 *     def __iter__(self):
 *         cdef Sequence seq
 *         while not self.is_complete():             # <<<<<<<<<<<<<<
 *             seq = self._next()
 *             yield seq
 */
  while (1) {
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->is_complete(__pyx_cur_scope->__pyx_v_self, 0) != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "khmer/_oxli/parsing.pyx":205
 *         cdef Sequence seq
 *         while not self.is_complete():
 *             seq = self._next()             # <<<<<<<<<<<<<<
 *             yield seq
 * 
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_seq));
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_seq, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_2));
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":206
 *         while not self.is_complete():
 *             seq = self._next()
 *             yield seq             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_seq));
    __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_seq);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 206, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "khmer/_oxli/parsing.pyx":202
 *         return deref(self._this).is_complete()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         while not self.is_complete():
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_8__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_11FastxParser_7__reduce_cython__[] = "FastxParser.__reduce_cython__(self)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_8__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_7__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_7__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.FastxParser.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_10__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_11FastxParser_9__setstate_cython__[] = "FastxParser.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_10__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_9__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_11FastxParser_9__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.FastxParser.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":211
 * cdef class SanitizedFastxParser(FastxParser):
 * 
 *     def __cinit__(self, filename, alphabet='DNAN_SIMPLE',             # <<<<<<<<<<<<<<
 *                         bool convert_n=True):
 *         self.n_bad = 0
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_alphabet = 0;
  bool __pyx_v_convert_n;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_alphabet,&__pyx_n_s_convert_n,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_n_u_DNAN_SIMPLE);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alphabet);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_convert_n);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 211, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_alphabet = values[1];
    if (values[2]) {
      __pyx_v_convert_n = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_convert_n == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/parsing.pyx":212
 * 
 *     def __cinit__(self, filename, alphabet='DNAN_SIMPLE',
 *                         bool convert_n=True):             # <<<<<<<<<<<<<<
 *         self.n_bad = 0
 *         self.convert_n = convert_n
 */
      __pyx_v_convert_n = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 211, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser___cinit__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_v_self), __pyx_v_filename, __pyx_v_alphabet, __pyx_v_convert_n);

  /* "khmer/_oxli/parsing.pyx":211
 * cdef class SanitizedFastxParser(FastxParser):
 * 
 *     def __cinit__(self, filename, alphabet='DNAN_SIMPLE',             # <<<<<<<<<<<<<<
 *                         bool convert_n=True):
 *         self.n_bad = 0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_filename, PyObject *__pyx_v_alphabet, bool __pyx_v_convert_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/parsing.pyx":213
 *     def __cinit__(self, filename, alphabet='DNAN_SIMPLE',
 *                         bool convert_n=True):
 *         self.n_bad = 0             # <<<<<<<<<<<<<<
 *         self.convert_n = convert_n
 *         self._alphabet = Alphabets._get(_bstring(alphabet))
 */
  __pyx_v_self->n_bad = 0;

  /* "khmer/_oxli/parsing.pyx":214
 *                         bool convert_n=True):
 *         self.n_bad = 0
 *         self.convert_n = convert_n             # <<<<<<<<<<<<<<
 *         self._alphabet = Alphabets._get(_bstring(alphabet))
 * 
 */
  __pyx_v_self->convert_n = __pyx_v_convert_n;

  /* "khmer/_oxli/parsing.pyx":215
 *         self.n_bad = 0
 *         self.convert_n = convert_n
 *         self._alphabet = Alphabets._get(_bstring(alphabet))             # <<<<<<<<<<<<<<
 * 
 *     cdef Sequence _next(self):
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__bstring(__pyx_v_alphabet); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_alphabet = __pyx_f_5khmer_5_oxli_7parsing_9Alphabets__get(__pyx_t_2);

  /* "khmer/_oxli/parsing.pyx":211
 * cdef class SanitizedFastxParser(FastxParser):
 * 
 *     def __cinit__(self, filename, alphabet='DNAN_SIMPLE',             # <<<<<<<<<<<<<<
 *                         bool convert_n=True):
 *         self.n_bad = 0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":217
 *         self._alphabet = Alphabets._get(_bstring(alphabet))
 * 
 *     cdef Sequence _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         cdef bool good
 */

static struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_f_5khmer_5_oxli_7parsing_20SanitizedFastxParser__next(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_seq = 0;
  bool __pyx_v_good;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_next", 0);

  /* "khmer/_oxli/parsing.pyx":221
 *         cdef bool good
 * 
 *         if not self.is_complete():             # <<<<<<<<<<<<<<
 *             seq = FastxParser._next(self)
 *             good = sanitize_sequence(seq._obj.sequence,
 */
  __pyx_t_1 = ((!(((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.is_complete(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self), 0) != 0)) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":222
 * 
 *         if not self.is_complete():
 *             seq = FastxParser._next(self)             # <<<<<<<<<<<<<<
 *             good = sanitize_sequence(seq._obj.sequence,
 *                                      self._alphabet,
 */
    __pyx_t_2 = ((PyObject *)__pyx_f_5khmer_5_oxli_7parsing_11FastxParser__next(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_seq = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":223
 *         if not self.is_complete():
 *             seq = FastxParser._next(self)
 *             good = sanitize_sequence(seq._obj.sequence,             # <<<<<<<<<<<<<<
 *                                      self._alphabet,
 *                                      self.convert_n)
 */
    __pyx_v_good = __pyx_f_5khmer_5_oxli_7parsing_sanitize_sequence(__pyx_v_seq->_obj.sequence, __pyx_v_self->_alphabet, __pyx_v_self->convert_n);

    /* "khmer/_oxli/parsing.pyx":226
 *                                      self._alphabet,
 *                                      self.convert_n)
 *             if not good:             # <<<<<<<<<<<<<<
 *                 self.n_bad += 1
 *                 return None
 */
    __pyx_t_1 = ((!(__pyx_v_good != 0)) != 0);
    if (__pyx_t_1) {

      /* "khmer/_oxli/parsing.pyx":227
 *                                      self.convert_n)
 *             if not good:
 *                 self.n_bad += 1             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
      __pyx_v_self->n_bad = (__pyx_v_self->n_bad + 1);

      /* "khmer/_oxli/parsing.pyx":228
 *             if not good:
 *                 self.n_bad += 1
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return seq
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_r = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None); __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":226
 *                                      self._alphabet,
 *                                      self.convert_n)
 *             if not good:             # <<<<<<<<<<<<<<
 *                 self.n_bad += 1
 *                 return None
 */
    }

    /* "khmer/_oxli/parsing.pyx":230
 *                 return None
 *             else:
 *                 return seq             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    /*else*/ {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(((PyObject *)__pyx_v_seq));
      __pyx_r = __pyx_v_seq;
      goto __pyx_L0;
    }

    /* "khmer/_oxli/parsing.pyx":221
 *         cdef bool good
 * 
 *         if not self.is_complete():             # <<<<<<<<<<<<<<
 *             seq = FastxParser._next(self)
 *             good = sanitize_sequence(seq._obj.sequence,
 */
  }

  /* "khmer/_oxli/parsing.pyx":232
 *                 return seq
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "khmer/_oxli/parsing.pyx":217
 *         self._alphabet = Alphabets._get(_bstring(alphabet))
 * 
 *     cdef Sequence _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         cdef bool good
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser._next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_seq);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_20SanitizedFastxParser_4generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/parsing.pyx":234
 *             return None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         while not self.is_complete():
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_2__iter__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_2__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *)__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__(__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 234, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_7parsing_20SanitizedFastxParser_4generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_SanitizedFastxParser___iter, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!gen)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_20SanitizedFastxParser_4generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 234, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":236
 *     def __iter__(self):
 *         cdef Sequence seq
 *         while not self.is_complete():             # <<<<<<<<<<<<<<
 *             seq = self._next()
 *             if seq is not None:
 */
  while (1) {
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.is_complete(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_cur_scope->__pyx_v_self), 0) != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "khmer/_oxli/parsing.pyx":237
 *         cdef Sequence seq
 *         while not self.is_complete():
 *             seq = self._next()             # <<<<<<<<<<<<<<
 *             if seq is not None:
 *                 yield seq
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._next(((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)__pyx_cur_scope->__pyx_v_self))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_seq));
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_seq, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_2));
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":238
 *         while not self.is_complete():
 *             seq = self._next()
 *             if seq is not None:             # <<<<<<<<<<<<<<
 *                 yield seq
 * 
 */
    __pyx_t_1 = (((PyObject *)__pyx_cur_scope->__pyx_v_seq) != Py_None);
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {

      /* "khmer/_oxli/parsing.pyx":239
 *             seq = self._next()
 *             if seq is not None:
 *                 yield seq             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_seq));
      __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_seq);
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 239, __pyx_L1_error)

      /* "khmer/_oxli/parsing.pyx":238
 *         while not self.is_complete():
 *             seq = self._next()
 *             if seq is not None:             # <<<<<<<<<<<<<<
 *                 yield seq
 * 
 */
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "khmer/_oxli/parsing.pyx":234
 *             return None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq
 *         while not self.is_complete():
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":134
 * 
 * cdef class SanitizedFastxParser(FastxParser):
 *     cdef readonly int n_bad             # <<<<<<<<<<<<<<
 *     cdef readonly string _alphabet
 *     cdef bool convert_n
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5n_bad_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5n_bad_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5n_bad___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5n_bad___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->n_bad); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser.n_bad.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":135
 * cdef class SanitizedFastxParser(FastxParser):
 *     cdef readonly int n_bad
 *     cdef readonly string _alphabet             # <<<<<<<<<<<<<<
 *     cdef bool convert_n
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_9_alphabet_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_9_alphabet_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_9_alphabet___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_9_alphabet___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_alphabet); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser._alphabet.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_6__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5__reduce_cython__[] = "SanitizedFastxParser.__reduce_cython__(self)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_6__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_8__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_20SanitizedFastxParser_7__setstate_cython__[] = "SanitizedFastxParser.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_8__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_7__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_20SanitizedFastxParser_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SanitizedFastxParser.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":244
 * cdef class SplitPairedReader:
 * 
 *     def __cinit__(self, FastxParser left_parser,             # <<<<<<<<<<<<<<
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_left_parser = 0;
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_right_parser = 0;
  int __pyx_v_min_length;
  bool __pyx_v_force_name_match;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left_parser,&__pyx_n_s_right_parser,&__pyx_n_s_min_length,&__pyx_n_s_force_name_match,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_left_parser)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_right_parser)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, 1); __PYX_ERR(0, 244, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_length);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_force_name_match);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 244, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_left_parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)values[0]);
    __pyx_v_right_parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)values[1]);
    if (values[2]) {
      __pyx_v_min_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_min_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L3_error)
    } else {
      __pyx_v_min_length = ((int)-1);
    }
    if (values[3]) {
      __pyx_v_force_name_match = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_force_name_match == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/parsing.pyx":247
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 *                          bool force_name_match=False):             # <<<<<<<<<<<<<<
 * 
 *         self.left_parser = left_parser
 */
      __pyx_v_force_name_match = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 244, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.SplitPairedReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_left_parser), __pyx_ptype_5khmer_5_oxli_7parsing_FastxParser, 1, "left_parser", 0))) __PYX_ERR(0, 244, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_right_parser), __pyx_ptype_5khmer_5_oxli_7parsing_FastxParser, 1, "right_parser", 0))) __PYX_ERR(0, 245, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader___cinit__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_v_self), __pyx_v_left_parser, __pyx_v_right_parser, __pyx_v_min_length, __pyx_v_force_name_match);

  /* "khmer/_oxli/parsing.pyx":244
 * cdef class SplitPairedReader:
 * 
 *     def __cinit__(self, FastxParser left_parser,             # <<<<<<<<<<<<<<
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_left_parser, struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_right_parser, int __pyx_v_min_length, bool __pyx_v_force_name_match) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/parsing.pyx":249
 *                          bool force_name_match=False):
 * 
 *         self.left_parser = left_parser             # <<<<<<<<<<<<<<
 *         self.right_parser = right_parser
 *         self.min_length = min_length
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_left_parser));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_left_parser));
  __Pyx_GOTREF(__pyx_v_self->left_parser);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->left_parser));
  __pyx_v_self->left_parser = __pyx_v_left_parser;

  /* "khmer/_oxli/parsing.pyx":250
 * 
 *         self.left_parser = left_parser
 *         self.right_parser = right_parser             # <<<<<<<<<<<<<<
 *         self.min_length = min_length
 *         self.force_name_match = force_name_match
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_right_parser));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_right_parser));
  __Pyx_GOTREF(__pyx_v_self->right_parser);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->right_parser));
  __pyx_v_self->right_parser = __pyx_v_right_parser;

  /* "khmer/_oxli/parsing.pyx":251
 *         self.left_parser = left_parser
 *         self.right_parser = right_parser
 *         self.min_length = min_length             # <<<<<<<<<<<<<<
 *         self.force_name_match = force_name_match
 * 
 */
  __pyx_v_self->min_length = __pyx_v_min_length;

  /* "khmer/_oxli/parsing.pyx":252
 *         self.right_parser = right_parser
 *         self.min_length = min_length
 *         self.force_name_match = force_name_match             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->force_name_match = __pyx_v_force_name_match;

  /* "khmer/_oxli/parsing.pyx":244
 * cdef class SplitPairedReader:
 * 
 *     def __cinit__(self, FastxParser left_parser,             # <<<<<<<<<<<<<<
 *                          FastxParser right_parser,
 *                          int min_length=-1,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_17SplitPairedReader_4generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/parsing.pyx":254
 *         self.force_name_match = force_name_match
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef object err
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_2__iter__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *)__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__(__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 254, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_7parsing_17SplitPairedReader_4generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_SplitPairedReader___iter, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!gen)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.SplitPairedReader.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_17SplitPairedReader_4generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_yield;
    case 2: goto __pyx_L12_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 254, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":257
 *         cdef Sequence first, second
 *         cdef object err
 *         cdef read_num = 0             # <<<<<<<<<<<<<<
 *         cdef int found
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_cur_scope->__pyx_v_read_num = __pyx_int_0;

  /* "khmer/_oxli/parsing.pyx":260
 *         cdef int found
 * 
 *         found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 *         while found != 0:
 *             if err is not None:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 260, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 260, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 260, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 260, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_err = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "khmer/_oxli/parsing.pyx":261
 * 
 *         found, first, second, err = self._next()
 *         while found != 0:             # <<<<<<<<<<<<<<
 *             if err is not None:
 *                 raise err
 */
  while (1) {
    __pyx_t_7 = ((__pyx_cur_scope->__pyx_v_found != 0) != 0);
    if (!__pyx_t_7) break;

    /* "khmer/_oxli/parsing.pyx":262
 *         found, first, second, err = self._next()
 *         while found != 0:
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    __pyx_t_7 = (__pyx_cur_scope->__pyx_v_err != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (unlikely(__pyx_t_8)) {

      /* "khmer/_oxli/parsing.pyx":263
 *         while found != 0:
 *             if err is not None:
 *                 raise err             # <<<<<<<<<<<<<<
 * 
 *             if self.min_length > 0:
 */
      __Pyx_Raise(__pyx_cur_scope->__pyx_v_err, 0, 0, 0);
      __PYX_ERR(0, 263, __pyx_L1_error)

      /* "khmer/_oxli/parsing.pyx":262
 *         found, first, second, err = self._next()
 *         while found != 0:
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    }

    /* "khmer/_oxli/parsing.pyx":265
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if len(first) >= self.min_length and \
 *                    len(second) >= self.min_length:
 */
    __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_self->min_length > 0) != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/parsing.pyx":266
 * 
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length and \             # <<<<<<<<<<<<<<
 *                    len(second) >= self.min_length:
 * 
 */
      __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_first)); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 266, __pyx_L1_error)
      __pyx_t_7 = ((__pyx_t_9 >= __pyx_cur_scope->__pyx_v_self->min_length) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_8 = __pyx_t_7;
        goto __pyx_L9_bool_binop_done;
      }

      /* "khmer/_oxli/parsing.pyx":267
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length and \
 *                    len(second) >= self.min_length:             # <<<<<<<<<<<<<<
 * 
 *                     yield read_num, True, first, second
 */
      __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_second)); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 267, __pyx_L1_error)
      __pyx_t_7 = ((__pyx_t_9 >= __pyx_cur_scope->__pyx_v_self->min_length) != 0);
      __pyx_t_8 = __pyx_t_7;
      __pyx_L9_bool_binop_done:;

      /* "khmer/_oxli/parsing.pyx":266
 * 
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length and \             # <<<<<<<<<<<<<<
 *                    len(second) >= self.min_length:
 * 
 */
      if (__pyx_t_8) {

        /* "khmer/_oxli/parsing.pyx":269
 *                    len(second) >= self.min_length:
 * 
 *                     yield read_num, True, first, second             # <<<<<<<<<<<<<<
 *             else:
 *                 yield read_num, True, first, second
 */
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_read_num);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_read_num);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_read_num);
        __Pyx_INCREF(Py_True);
        __Pyx_GIVEREF(Py_True);
        PyTuple_SET_ITEM(__pyx_t_1, 1, Py_True);
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L11_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 269, __pyx_L1_error)

        /* "khmer/_oxli/parsing.pyx":266
 * 
 *             if self.min_length > 0:
 *                 if len(first) >= self.min_length and \             # <<<<<<<<<<<<<<
 *                    len(second) >= self.min_length:
 * 
 */
      }

      /* "khmer/_oxli/parsing.pyx":265
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if len(first) >= self.min_length and \
 *                    len(second) >= self.min_length:
 */
      goto __pyx_L7;
    }

    /* "khmer/_oxli/parsing.pyx":271
 *                     yield read_num, True, first, second
 *             else:
 *                 yield read_num, True, first, second             # <<<<<<<<<<<<<<
 * 
 *             read_num += found
 */
    /*else*/ {
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_read_num);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_read_num);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_read_num);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_1, 1, Py_True);
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
      PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L12_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 271, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "khmer/_oxli/parsing.pyx":273
 *                 yield read_num, True, first, second
 * 
 *             read_num += found             # <<<<<<<<<<<<<<
 *             found, first, second, err = self._next()
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_read_num, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_read_num);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_read_num, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "khmer/_oxli/parsing.pyx":274
 * 
 *             read_num += found
 *             found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self):
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (likely(__pyx_t_5 != Py_None)) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 274, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_3,&__pyx_t_2};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 274, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 274, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 274, __pyx_L1_error)
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 274, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_first, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_4));
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_second, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_err);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_err, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "khmer/_oxli/parsing.pyx":254
 *         self.force_name_match = force_name_match
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef object err
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":276
 *             found, first, second, err = self._next()
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first = self.left_parser._next()
 *         cdef bool first_complete = self.left_parser.is_complete()
 */

static PyObject *__pyx_f_5khmer_5_oxli_7parsing_17SplitPairedReader__next(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_first = 0;
  bool __pyx_v_first_complete;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_second = 0;
  bool __pyx_v_second_complete;
  PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_next", 0);

  /* "khmer/_oxli/parsing.pyx":277
 * 
 *     cdef tuple _next(self):
 *         cdef Sequence first = self.left_parser._next()             # <<<<<<<<<<<<<<
 *         cdef bool first_complete = self.left_parser.is_complete()
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->left_parser->__pyx_vtab)->_next(__pyx_v_self->left_parser)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":278
 *     cdef tuple _next(self):
 *         cdef Sequence first = self.left_parser._next()
 *         cdef bool first_complete = self.left_parser.is_complete()             # <<<<<<<<<<<<<<
 * 
 *         cdef Sequence second = self.right_parser._next()
 */
  __pyx_v_first_complete = ((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->left_parser->__pyx_vtab)->is_complete(__pyx_v_self->left_parser, 0);

  /* "khmer/_oxli/parsing.pyx":280
 *         cdef bool first_complete = self.left_parser.is_complete()
 * 
 *         cdef Sequence second = self.right_parser._next()             # <<<<<<<<<<<<<<
 *         cdef bool second_complete = self.right_parser.is_complete()
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->right_parser->__pyx_vtab)->_next(__pyx_v_self->right_parser)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":281
 * 
 *         cdef Sequence second = self.right_parser._next()
 *         cdef bool second_complete = self.right_parser.is_complete()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_second_complete = ((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->right_parser->__pyx_vtab)->is_complete(__pyx_v_self->right_parser, 0);

  /* "khmer/_oxli/parsing.pyx":284
 * 
 * 
 *         if first_complete is not second_complete:             # <<<<<<<<<<<<<<
 *             err = UnpairedReadsError('Differing lengths of left '\
 *                                      'and right files!')
 */
  __pyx_t_2 = ((__pyx_v_first_complete != __pyx_v_second_complete) != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/parsing.pyx":285
 * 
 *         if first_complete is not second_complete:
 *             err = UnpairedReadsError('Differing lengths of left '\             # <<<<<<<<<<<<<<
 *                                      'and right files!')
 *             return -1, None, None, err
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_u_Differing_lengths_of_left_and_ri) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_Differing_lengths_of_left_and_ri);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_err = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "khmer/_oxli/parsing.pyx":287
 *             err = UnpairedReadsError('Differing lengths of left '\
 *                                      'and right files!')
 *             return -1, None, None, err             # <<<<<<<<<<<<<<
 * 
 *         if first_complete:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_neg_1);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __Pyx_INCREF(__pyx_v_err);
    __Pyx_GIVEREF(__pyx_v_err);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_err);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":284
 * 
 * 
 *         if first_complete is not second_complete:             # <<<<<<<<<<<<<<
 *             err = UnpairedReadsError('Differing lengths of left '\
 *                                      'and right files!')
 */
  }

  /* "khmer/_oxli/parsing.pyx":289
 *             return -1, None, None, err
 * 
 *         if first_complete:             # <<<<<<<<<<<<<<
 *             return 0, None, None, None
 * 
 */
  __pyx_t_2 = (__pyx_v_first_complete != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/parsing.pyx":290
 * 
 *         if first_complete:
 *             return 0, None, None, None             # <<<<<<<<<<<<<<
 * 
 *         if first is None or second is None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__11);
    __pyx_r = __pyx_tuple__11;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":289
 *             return -1, None, None, err
 * 
 *         if first_complete:             # <<<<<<<<<<<<<<
 *             return 0, None, None, None
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":292
 *             return 0, None, None, None
 * 
 *         if first is None or second is None:             # <<<<<<<<<<<<<<
 *             return 1, first, second, None
 * 
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_first) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_6 = (((PyObject *)__pyx_v_second) == Py_None);
  __pyx_t_5 = (__pyx_t_6 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "khmer/_oxli/parsing.pyx":293
 * 
 *         if first is None or second is None:
 *             return 1, first, second, None             # <<<<<<<<<<<<<<
 * 
 *         if self.force_name_match:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_first));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_first));
    __Pyx_INCREF(((PyObject *)__pyx_v_second));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
    PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_second));
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":292
 *             return 0, None, None, None
 * 
 *         if first is None or second is None:             # <<<<<<<<<<<<<<
 *             return 1, first, second, None
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":295
 *             return 1, first, second, None
 * 
 *         if self.force_name_match:             # <<<<<<<<<<<<<<
 *             if _check_is_pair(first, second):
 *                 return 2, first, second, None
 */
  __pyx_t_2 = (__pyx_v_self->force_name_match != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/parsing.pyx":296
 * 
 *         if self.force_name_match:
 *             if _check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *                 return 2, first, second, None
 *             else:
 */
    __pyx_t_2 = (__pyx_f_5khmer_5_oxli_7parsing__check_is_pair(__pyx_v_first, __pyx_v_second) != 0);
    if (__pyx_t_2) {

      /* "khmer/_oxli/parsing.pyx":297
 *         if self.force_name_match:
 *             if _check_is_pair(first, second):
 *                 return 2, first, second, None             # <<<<<<<<<<<<<<
 *             else:
 *                 err =  UnpairedReadsError('', first, second)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_first));
      __Pyx_INCREF(((PyObject *)__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
      PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_second));
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None);
      __pyx_r = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":296
 * 
 *         if self.force_name_match:
 *             if _check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *                 return 2, first, second, None
 *             else:
 */
    }

    /* "khmer/_oxli/parsing.pyx":299
 *                 return 2, first, second, None
 *             else:
 *                 err =  UnpairedReadsError('', first, second)             # <<<<<<<<<<<<<<
 *                 return -1, None, None, err
 *         else:
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_kp_u__12, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_kp_u__12, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u__12);
        __Pyx_GIVEREF(__pyx_kp_u__12);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_kp_u__12);
        __Pyx_INCREF(((PyObject *)__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)__pyx_v_first));
        __Pyx_INCREF(((PyObject *)__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, ((PyObject *)__pyx_v_second));
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_err = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "khmer/_oxli/parsing.pyx":300
 *             else:
 *                 err =  UnpairedReadsError('', first, second)
 *                 return -1, None, None, err             # <<<<<<<<<<<<<<
 *         else:
 *             return 2, first, second, None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_neg_1);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
      __Pyx_INCREF(__pyx_v_err);
      __Pyx_GIVEREF(__pyx_v_err);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_err);
      __pyx_r = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }

    /* "khmer/_oxli/parsing.pyx":295
 *             return 1, first, second, None
 * 
 *         if self.force_name_match:             # <<<<<<<<<<<<<<
 *             if _check_is_pair(first, second):
 *                 return 2, first, second, None
 */
  }

  /* "khmer/_oxli/parsing.pyx":302
 *                 return -1, None, None, err
 *         else:
 *             return 2, first, second, None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_first));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_first));
    __Pyx_INCREF(((PyObject *)__pyx_v_second));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
    PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_second));
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None);
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "khmer/_oxli/parsing.pyx":276
 *             found, first, second, err = self._next()
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first = self.left_parser._next()
 *         cdef bool first_complete = self.left_parser.is_complete()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("khmer._oxli.parsing.SplitPairedReader._next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_first);
  __Pyx_XDECREF((PyObject *)__pyx_v_second);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":146
 *     cdef FastxParser left_parser
 *     cdef FastxParser right_parser
 *     cdef readonly int min_length             # <<<<<<<<<<<<<<
 *     cdef readonly bool force_name_match
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_10min_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_10min_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_10min_length___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->min_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SplitPairedReader.min_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":147
 *     cdef FastxParser right_parser
 *     cdef readonly int min_length
 *     cdef readonly bool force_name_match             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_16force_name_match_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_16force_name_match_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_16force_name_match___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_16force_name_match___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->force_name_match); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SplitPairedReader.force_name_match.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_6__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_17SplitPairedReader_5__reduce_cython__[] = "SplitPairedReader.__reduce_cython__(self)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_6__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_5__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SplitPairedReader.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_8__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_17SplitPairedReader_7__setstate_cython__[] = "SplitPairedReader.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_8__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_7__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_17SplitPairedReader_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.SplitPairedReader.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":307
 * cdef class BrokenPairedReader:
 * 
 *     def __cinit__(self, FastxParser parser,             # <<<<<<<<<<<<<<
 *                   int min_length=-1,
 *                   bool force_single=False,
 */

/* Python wrapper */
static int __pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_parser = 0;
  int __pyx_v_min_length;
  bool __pyx_v_force_single;
  bool __pyx_v_require_paired;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parser,&__pyx_n_s_min_length,&__pyx_n_s_force_single,&__pyx_n_s_require_paired,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parser)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_length);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_force_single);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_require_paired);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 307, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)values[0]);
    if (values[1]) {
      __pyx_v_min_length = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_min_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
    } else {
      __pyx_v_min_length = ((int)-1);
    }
    if (values[2]) {
      __pyx_v_force_single = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_force_single == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/parsing.pyx":309
 *     def __cinit__(self, FastxParser parser,
 *                   int min_length=-1,
 *                   bool force_single=False,             # <<<<<<<<<<<<<<
 *                   bool require_paired=False):
 * 
 */
      __pyx_v_force_single = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_require_paired = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_require_paired == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
    } else {

      /* "khmer/_oxli/parsing.pyx":310
 *                   int min_length=-1,
 *                   bool force_single=False,
 *                   bool require_paired=False):             # <<<<<<<<<<<<<<
 * 
 *         if force_single and require_paired:
 */
      __pyx_v_require_paired = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parser), __pyx_ptype_5khmer_5_oxli_7parsing_FastxParser, 1, "parser", 0))) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader___cinit__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self), __pyx_v_parser, __pyx_v_min_length, __pyx_v_force_single, __pyx_v_require_paired);

  /* "khmer/_oxli/parsing.pyx":307
 * cdef class BrokenPairedReader:
 * 
 *     def __cinit__(self, FastxParser parser,             # <<<<<<<<<<<<<<
 *                   int min_length=-1,
 *                   bool force_single=False,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader___cinit__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self, struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *__pyx_v_parser, int __pyx_v_min_length, bool __pyx_v_force_single, bool __pyx_v_require_paired) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "khmer/_oxli/parsing.pyx":312
 *                   bool require_paired=False):
 * 
 *         if force_single and require_paired:             # <<<<<<<<<<<<<<
 *             raise ValueError("force_single and require_paired cannot both be set!")
 * 
 */
  __pyx_t_2 = (__pyx_v_force_single != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_require_paired != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "khmer/_oxli/parsing.pyx":313
 * 
 *         if force_single and require_paired:
 *             raise ValueError("force_single and require_paired cannot both be set!")             # <<<<<<<<<<<<<<
 * 
 *         self.parser = parser
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 313, __pyx_L1_error)

    /* "khmer/_oxli/parsing.pyx":312
 *                   bool require_paired=False):
 * 
 *         if force_single and require_paired:             # <<<<<<<<<<<<<<
 *             raise ValueError("force_single and require_paired cannot both be set!")
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":315
 *             raise ValueError("force_single and require_paired cannot both be set!")
 * 
 *         self.parser = parser             # <<<<<<<<<<<<<<
 *         self.min_length = min_length
 *         self.force_single = force_single
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parser));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parser));
  __Pyx_GOTREF(__pyx_v_self->parser);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parser));
  __pyx_v_self->parser = __pyx_v_parser;

  /* "khmer/_oxli/parsing.pyx":316
 * 
 *         self.parser = parser
 *         self.min_length = min_length             # <<<<<<<<<<<<<<
 *         self.force_single = force_single
 *         self.require_paired = require_paired
 */
  __pyx_v_self->min_length = __pyx_v_min_length;

  /* "khmer/_oxli/parsing.pyx":317
 *         self.parser = parser
 *         self.min_length = min_length
 *         self.force_single = force_single             # <<<<<<<<<<<<<<
 *         self.require_paired = require_paired
 * 
 */
  __pyx_v_self->force_single = __pyx_v_force_single;

  /* "khmer/_oxli/parsing.pyx":318
 *         self.min_length = min_length
 *         self.force_single = force_single
 *         self.require_paired = require_paired             # <<<<<<<<<<<<<<
 * 
 *         self.record = None
 */
  __pyx_v_self->require_paired = __pyx_v_require_paired;

  /* "khmer/_oxli/parsing.pyx":320
 *         self.require_paired = require_paired
 * 
 *         self.record = None             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->record);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
  __pyx_v_self->record = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None);

  /* "khmer/_oxli/parsing.pyx":307
 * cdef class BrokenPairedReader:
 * 
 *     def __cinit__(self, FastxParser parser,             # <<<<<<<<<<<<<<
 *                   int min_length=-1,
 *                   bool force_single=False,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_18BrokenPairedReader_4generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "khmer/_oxli/parsing.pyx":322
 *         self.record = None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first
 *         cdef Sequence second
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_2__iter__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_2__iter__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *)__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__(__pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 322, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5khmer_5_oxli_7parsing_18BrokenPairedReader_4generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_BrokenPairedReader___iter, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!gen)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5khmer_5_oxli_7parsing_18BrokenPairedReader_4generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L16_resume_from_yield;
    case 2: goto __pyx_L18_resume_from_yield;
    case 3: goto __pyx_L22_resume_from_yield;
    case 4: goto __pyx_L26_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 322, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":327
 *         cdef object err
 *         cdef int found
 *         cdef int read_num = 0             # <<<<<<<<<<<<<<
 * 
 *         found, first, second, err = self._next()
 */
  __pyx_cur_scope->__pyx_v_read_num = 0;

  /* "khmer/_oxli/parsing.pyx":329
 *         cdef int read_num = 0
 * 
 *         found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 *         while (found != 0):
 *             if err is not None:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 329, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 329, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 329, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 329, __pyx_L1_error)
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_err = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "khmer/_oxli/parsing.pyx":330
 * 
 *         found, first, second, err = self._next()
 *         while (found != 0):             # <<<<<<<<<<<<<<
 *             if err is not None:
 *                 raise err
 */
  while (1) {
    __pyx_t_7 = ((__pyx_cur_scope->__pyx_v_found != 0) != 0);
    if (!__pyx_t_7) break;

    /* "khmer/_oxli/parsing.pyx":331
 *         found, first, second, err = self._next()
 *         while (found != 0):
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    __pyx_t_7 = (__pyx_cur_scope->__pyx_v_err != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (unlikely(__pyx_t_8)) {

      /* "khmer/_oxli/parsing.pyx":332
 *         while (found != 0):
 *             if err is not None:
 *                 raise err             # <<<<<<<<<<<<<<
 * 
 *             if self.min_length > 0:
 */
      __Pyx_Raise(__pyx_cur_scope->__pyx_v_err, 0, 0, 0);
      __PYX_ERR(0, 332, __pyx_L1_error)

      /* "khmer/_oxli/parsing.pyx":331
 *         found, first, second, err = self._next()
 *         while (found != 0):
 *             if err is not None:             # <<<<<<<<<<<<<<
 *                 raise err
 * 
 */
    }

    /* "khmer/_oxli/parsing.pyx":334
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if first is not None and len(first) < self.min_length:
 *                     first = None
 */
    __pyx_t_8 = ((__pyx_cur_scope->__pyx_v_self->min_length > 0) != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/parsing.pyx":335
 * 
 *             if self.min_length > 0:
 *                 if first is not None and len(first) < self.min_length:             # <<<<<<<<<<<<<<
 *                     first = None
 *                     found -= 1
 */
      __pyx_t_7 = (((PyObject *)__pyx_cur_scope->__pyx_v_first) != Py_None);
      __pyx_t_9 = (__pyx_t_7 != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_first)); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 335, __pyx_L1_error)
      __pyx_t_9 = ((__pyx_t_10 < __pyx_cur_scope->__pyx_v_self->min_length) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_8) {

        /* "khmer/_oxli/parsing.pyx":336
 *             if self.min_length > 0:
 *                 if first is not None and len(first) < self.min_length:
 *                     first = None             # <<<<<<<<<<<<<<
 *                     found -= 1
 *                 if second is not None and len(second) < self.min_length:
 */
        __Pyx_INCREF(Py_None);
        __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_first, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None));
        __Pyx_GIVEREF(Py_None);

        /* "khmer/_oxli/parsing.pyx":337
 *                 if first is not None and len(first) < self.min_length:
 *                     first = None
 *                     found -= 1             # <<<<<<<<<<<<<<
 *                 if second is not None and len(second) < self.min_length:
 *                     second = None
 */
        __pyx_cur_scope->__pyx_v_found = (__pyx_cur_scope->__pyx_v_found - 1);

        /* "khmer/_oxli/parsing.pyx":335
 * 
 *             if self.min_length > 0:
 *                 if first is not None and len(first) < self.min_length:             # <<<<<<<<<<<<<<
 *                     first = None
 *                     found -= 1
 */
      }

      /* "khmer/_oxli/parsing.pyx":338
 *                     first = None
 *                     found -= 1
 *                 if second is not None and len(second) < self.min_length:             # <<<<<<<<<<<<<<
 *                     second = None
 *                     found -= 1
 */
      __pyx_t_9 = (((PyObject *)__pyx_cur_scope->__pyx_v_second) != Py_None);
      __pyx_t_7 = (__pyx_t_9 != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_8 = __pyx_t_7;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_10 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_second)); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 338, __pyx_L1_error)
      __pyx_t_7 = ((__pyx_t_10 < __pyx_cur_scope->__pyx_v_self->min_length) != 0);
      __pyx_t_8 = __pyx_t_7;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_8) {

        /* "khmer/_oxli/parsing.pyx":339
 *                     found -= 1
 *                 if second is not None and len(second) < self.min_length:
 *                     second = None             # <<<<<<<<<<<<<<
 *                     found -= 1
 * 
 */
        __Pyx_INCREF(Py_None);
        __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_second, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None));
        __Pyx_GIVEREF(Py_None);

        /* "khmer/_oxli/parsing.pyx":340
 *                 if second is not None and len(second) < self.min_length:
 *                     second = None
 *                     found -= 1             # <<<<<<<<<<<<<<
 * 
 *             if self.force_single:
 */
        __pyx_cur_scope->__pyx_v_found = (__pyx_cur_scope->__pyx_v_found - 1);

        /* "khmer/_oxli/parsing.pyx":338
 *                     first = None
 *                     found -= 1
 *                 if second is not None and len(second) < self.min_length:             # <<<<<<<<<<<<<<
 *                     second = None
 *                     found -= 1
 */
      }

      /* "khmer/_oxli/parsing.pyx":334
 *                 raise err
 * 
 *             if self.min_length > 0:             # <<<<<<<<<<<<<<
 *                 if first is not None and len(first) < self.min_length:
 *                     first = None
 */
    }

    /* "khmer/_oxli/parsing.pyx":342
 *                     found -= 1
 * 
 *             if self.force_single:             # <<<<<<<<<<<<<<
 *                 if first is not None:
 *                     yield read_num, found == 2, first, None
 */
    __pyx_t_8 = (__pyx_cur_scope->__pyx_v_self->force_single != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/parsing.pyx":343
 * 
 *             if self.force_single:
 *                 if first is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, None
 *                     read_num += found
 */
      __pyx_t_8 = (((PyObject *)__pyx_cur_scope->__pyx_v_first) != Py_None);
      __pyx_t_7 = (__pyx_t_8 != 0);
      if (__pyx_t_7) {

        /* "khmer/_oxli/parsing.pyx":344
 *             if self.force_single:
 *                 if first is not None:
 *                     yield read_num, found == 2, first, None             # <<<<<<<<<<<<<<
 *                     read_num += found
 *                 if second is not None:
 */
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_read_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_cur_scope->__pyx_v_found == 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_4, 3, Py_None);
        __pyx_t_1 = 0;
        __pyx_t_5 = 0;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L16_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 344, __pyx_L1_error)

        /* "khmer/_oxli/parsing.pyx":345
 *                 if first is not None:
 *                     yield read_num, found == 2, first, None
 *                     read_num += found             # <<<<<<<<<<<<<<
 *                 if second is not None:
 *                     yield read_num, found == 2, second, None
 */
        __pyx_cur_scope->__pyx_v_read_num = (__pyx_cur_scope->__pyx_v_read_num + __pyx_cur_scope->__pyx_v_found);

        /* "khmer/_oxli/parsing.pyx":343
 * 
 *             if self.force_single:
 *                 if first is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, None
 *                     read_num += found
 */
      }

      /* "khmer/_oxli/parsing.pyx":346
 *                     yield read_num, found == 2, first, None
 *                     read_num += found
 *                 if second is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, second, None
 *                     read_num += found
 */
      __pyx_t_7 = (((PyObject *)__pyx_cur_scope->__pyx_v_second) != Py_None);
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {

        /* "khmer/_oxli/parsing.pyx":347
 *                     read_num += found
 *                 if second is not None:
 *                     yield read_num, found == 2, second, None             # <<<<<<<<<<<<<<
 *                     read_num += found
 *             elif self.require_paired:
 */
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_read_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_cur_scope->__pyx_v_found == 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None);
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __pyx_r;
        __pyx_L18_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 347, __pyx_L1_error)

        /* "khmer/_oxli/parsing.pyx":348
 *                 if second is not None:
 *                     yield read_num, found == 2, second, None
 *                     read_num += found             # <<<<<<<<<<<<<<
 *             elif self.require_paired:
 *                 if first is not None and second is not None:
 */
        __pyx_cur_scope->__pyx_v_read_num = (__pyx_cur_scope->__pyx_v_read_num + __pyx_cur_scope->__pyx_v_found);

        /* "khmer/_oxli/parsing.pyx":346
 *                     yield read_num, found == 2, first, None
 *                     read_num += found
 *                 if second is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, second, None
 *                     read_num += found
 */
      }

      /* "khmer/_oxli/parsing.pyx":342
 *                     found -= 1
 * 
 *             if self.force_single:             # <<<<<<<<<<<<<<
 *                 if first is not None:
 *                     yield read_num, found == 2, first, None
 */
      goto __pyx_L14;
    }

    /* "khmer/_oxli/parsing.pyx":349
 *                     yield read_num, found == 2, second, None
 *                     read_num += found
 *             elif self.require_paired:             # <<<<<<<<<<<<<<
 *                 if first is not None and second is not None:
 *                     yield read_num, found == 2, first, second
 */
    __pyx_t_8 = (__pyx_cur_scope->__pyx_v_self->require_paired != 0);
    if (__pyx_t_8) {

      /* "khmer/_oxli/parsing.pyx":350
 *                     read_num += found
 *             elif self.require_paired:
 *                 if first is not None and second is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, second
 *                     read_num += found
 */
      __pyx_t_7 = (((PyObject *)__pyx_cur_scope->__pyx_v_first) != Py_None);
      __pyx_t_9 = (__pyx_t_7 != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L20_bool_binop_done;
      }
      __pyx_t_9 = (((PyObject *)__pyx_cur_scope->__pyx_v_second) != Py_None);
      __pyx_t_7 = (__pyx_t_9 != 0);
      __pyx_t_8 = __pyx_t_7;
      __pyx_L20_bool_binop_done:;
      if (__pyx_t_8) {

        /* "khmer/_oxli/parsing.pyx":351
 *             elif self.require_paired:
 *                 if first is not None and second is not None:
 *                     yield read_num, found == 2, first, second             # <<<<<<<<<<<<<<
 *                     read_num += found
 *             else:
 */
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_read_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_cur_scope->__pyx_v_found == 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __pyx_t_1 = 0;
        __pyx_t_5 = 0;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 3;
        return __pyx_r;
        __pyx_L22_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 351, __pyx_L1_error)

        /* "khmer/_oxli/parsing.pyx":352
 *                 if first is not None and second is not None:
 *                     yield read_num, found == 2, first, second
 *                     read_num += found             # <<<<<<<<<<<<<<
 *             else:
 *                 if first is not None or second is not None:
 */
        __pyx_cur_scope->__pyx_v_read_num = (__pyx_cur_scope->__pyx_v_read_num + __pyx_cur_scope->__pyx_v_found);

        /* "khmer/_oxli/parsing.pyx":350
 *                     read_num += found
 *             elif self.require_paired:
 *                 if first is not None and second is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, second
 *                     read_num += found
 */
      }

      /* "khmer/_oxli/parsing.pyx":349
 *                     yield read_num, found == 2, second, None
 *                     read_num += found
 *             elif self.require_paired:             # <<<<<<<<<<<<<<
 *                 if first is not None and second is not None:
 *                     yield read_num, found == 2, first, second
 */
      goto __pyx_L14;
    }

    /* "khmer/_oxli/parsing.pyx":354
 *                     read_num += found
 *             else:
 *                 if first is not None or second is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, second
 *                     read_num += found
 */
    /*else*/ {
      __pyx_t_7 = (((PyObject *)__pyx_cur_scope->__pyx_v_first) != Py_None);
      __pyx_t_9 = (__pyx_t_7 != 0);
      if (!__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L24_bool_binop_done;
      }
      __pyx_t_9 = (((PyObject *)__pyx_cur_scope->__pyx_v_second) != Py_None);
      __pyx_t_7 = (__pyx_t_9 != 0);
      __pyx_t_8 = __pyx_t_7;
      __pyx_L24_bool_binop_done:;
      if (__pyx_t_8) {

        /* "khmer/_oxli/parsing.pyx":355
 *             else:
 *                 if first is not None or second is not None:
 *                     yield read_num, found == 2, first, second             # <<<<<<<<<<<<<<
 *                     read_num += found
 *             found, first, second, err = self._next()
 */
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_read_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_cur_scope->__pyx_v_found == 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_cur_scope->__pyx_v_first));
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
        PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_cur_scope->__pyx_v_second));
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 4;
        return __pyx_r;
        __pyx_L26_resume_from_yield:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 355, __pyx_L1_error)

        /* "khmer/_oxli/parsing.pyx":356
 *                 if first is not None or second is not None:
 *                     yield read_num, found == 2, first, second
 *                     read_num += found             # <<<<<<<<<<<<<<
 *             found, first, second, err = self._next()
 * 
 */
        __pyx_cur_scope->__pyx_v_read_num = (__pyx_cur_scope->__pyx_v_read_num + __pyx_cur_scope->__pyx_v_found);

        /* "khmer/_oxli/parsing.pyx":354
 *                     read_num += found
 *             else:
 *                 if first is not None or second is not None:             # <<<<<<<<<<<<<<
 *                     yield read_num, found == 2, first, second
 *                     read_num += found
 */
      }
    }
    __pyx_L14:;

    /* "khmer/_oxli/parsing.pyx":357
 *                     yield read_num, found == 2, first, second
 *                     read_num += found
 *             found, first, second, err = self._next()             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->_next(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(__pyx_t_1 != Py_None)) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 357, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_5,&__pyx_t_4,&__pyx_t_3,&__pyx_t_2};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 357, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 357, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 357, __pyx_L1_error)
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 357, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_found = __pyx_t_6;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_first));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_first, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_4));
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_second));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_second, ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_err);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_err, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "khmer/_oxli/parsing.pyx":322
 *         self.record = None
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first
 *         cdef Sequence second
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":359
 *             found, first, second, err = self._next()
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef int is_pair
 */

static PyObject *__pyx_f_5khmer_5_oxli_7parsing_18BrokenPairedReader__next(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_first = 0;
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_second = 0;
  int __pyx_v_is_pair;
  PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_next", 0);

  /* "khmer/_oxli/parsing.pyx":363
 *         cdef int is_pair
 * 
 *         if self.record is None:             # <<<<<<<<<<<<<<
 *             first = self.parser._next()
 *             if first is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->record) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/parsing.pyx":364
 * 
 *         if self.record is None:
 *             first = self.parser._next()             # <<<<<<<<<<<<<<
 *             if first is None:
 *                 if self.parser.is_complete():
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->parser->__pyx_vtab)->_next(__pyx_v_self->parser)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/parsing.pyx":365
 *         if self.record is None:
 *             first = self.parser._next()
 *             if first is None:             # <<<<<<<<<<<<<<
 *                 if self.parser.is_complete():
 *                     return 0, None, None, None
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_first) == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "khmer/_oxli/parsing.pyx":366
 *             first = self.parser._next()
 *             if first is None:
 *                 if self.parser.is_complete():             # <<<<<<<<<<<<<<
 *                     return 0, None, None, None
 *                 else:
 */
      __pyx_t_1 = (((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->parser->__pyx_vtab)->is_complete(__pyx_v_self->parser, 0) != 0);
      if (__pyx_t_1) {

        /* "khmer/_oxli/parsing.pyx":367
 *             if first is None:
 *                 if self.parser.is_complete():
 *                     return 0, None, None, None             # <<<<<<<<<<<<<<
 *                 else:
 *                     if self.require_paired:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_tuple__11);
        __pyx_r = __pyx_tuple__11;
        goto __pyx_L0;

        /* "khmer/_oxli/parsing.pyx":366
 *             first = self.parser._next()
 *             if first is None:
 *                 if self.parser.is_complete():             # <<<<<<<<<<<<<<
 *                     return 0, None, None, None
 *                 else:
 */
      }

      /* "khmer/_oxli/parsing.pyx":369
 *                     return 0, None, None, None
 *                 else:
 *                     if self.require_paired:             # <<<<<<<<<<<<<<
 *                         err = UnpairedReadsError(
 *                             "Uneven number of reads when require_paired is set!",
 */
      /*else*/ {
        __pyx_t_1 = (__pyx_v_self->require_paired != 0);
        if (__pyx_t_1) {

          /* "khmer/_oxli/parsing.pyx":370
 *                 else:
 *                     if self.require_paired:
 *                         err = UnpairedReadsError(             # <<<<<<<<<<<<<<
 *                             "Uneven number of reads when require_paired is set!",
 *                             first)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "khmer/_oxli/parsing.pyx":372
 *                         err = UnpairedReadsError(
 *                             "Uneven number of reads when require_paired is set!",
 *                             first)             # <<<<<<<<<<<<<<
 *                         return -1, None, None, err
 *                     return 1, first, None, None
 */
          __pyx_t_5 = NULL;
          __pyx_t_6 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_6 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_kp_u_Uneven_number_of_reads_when_requ, ((PyObject *)__pyx_v_first)};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_kp_u_Uneven_number_of_reads_when_requ, ((PyObject *)__pyx_v_first)};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else
          #endif
          {
            __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            if (__pyx_t_5) {
              __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
            }
            __Pyx_INCREF(__pyx_kp_u_Uneven_number_of_reads_when_requ);
            __Pyx_GIVEREF(__pyx_kp_u_Uneven_number_of_reads_when_requ);
            PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_kp_u_Uneven_number_of_reads_when_requ);
            __Pyx_INCREF(((PyObject *)__pyx_v_first));
            __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
            PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_first));
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_v_err = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "khmer/_oxli/parsing.pyx":373
 *                             "Uneven number of reads when require_paired is set!",
 *                             first)
 *                         return -1, None, None, err             # <<<<<<<<<<<<<<
 *                     return 1, first, None, None
 *         else:
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_int_neg_1);
          __Pyx_GIVEREF(__pyx_int_neg_1);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_neg_1);
          __Pyx_INCREF(Py_None);
          __Pyx_GIVEREF(Py_None);
          PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
          __Pyx_INCREF(Py_None);
          __Pyx_GIVEREF(Py_None);
          PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
          __Pyx_INCREF(__pyx_v_err);
          __Pyx_GIVEREF(__pyx_v_err);
          PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_err);
          __pyx_r = ((PyObject*)__pyx_t_3);
          __pyx_t_3 = 0;
          goto __pyx_L0;

          /* "khmer/_oxli/parsing.pyx":369
 *                     return 0, None, None, None
 *                 else:
 *                     if self.require_paired:             # <<<<<<<<<<<<<<
 *                         err = UnpairedReadsError(
 *                             "Uneven number of reads when require_paired is set!",
 */
        }

        /* "khmer/_oxli/parsing.pyx":374
 *                             first)
 *                         return -1, None, None, err
 *                     return 1, first, None, None             # <<<<<<<<<<<<<<
 *         else:
 *             first = self.record
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_int_1);
        __Pyx_GIVEREF(__pyx_int_1);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
        __Pyx_INCREF(((PyObject *)__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_first));
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_3, 3, Py_None);
        __pyx_r = ((PyObject*)__pyx_t_3);
        __pyx_t_3 = 0;
        goto __pyx_L0;
      }

      /* "khmer/_oxli/parsing.pyx":365
 *         if self.record is None:
 *             first = self.parser._next()
 *             if first is None:             # <<<<<<<<<<<<<<
 *                 if self.parser.is_complete():
 *                     return 0, None, None, None
 */
    }

    /* "khmer/_oxli/parsing.pyx":363
 *         cdef int is_pair
 * 
 *         if self.record is None:             # <<<<<<<<<<<<<<
 *             first = self.parser._next()
 *             if first is None:
 */
    goto __pyx_L3;
  }

  /* "khmer/_oxli/parsing.pyx":376
 *                     return 1, first, None, None
 *         else:
 *             first = self.record             # <<<<<<<<<<<<<<
 * 
 *         second = self.parser._next()
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_self->record);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_first = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "khmer/_oxli/parsing.pyx":378
 *             first = self.record
 * 
 *         second = self.parser._next()             # <<<<<<<<<<<<<<
 * 
 *         # check if paired
 */
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->parser->__pyx_vtab)->_next(__pyx_v_self->parser)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_second = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/parsing.pyx":381
 * 
 *         # check if paired
 *         if second is not None and first is not None:             # <<<<<<<<<<<<<<
 *             is_pair = _check_is_pair(first, second)
 *             if is_pair == -1:
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_second) != Py_None);
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_1 = __pyx_t_8;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_8 = (((PyObject *)__pyx_v_first) != Py_None);
  __pyx_t_2 = (__pyx_t_8 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":382
 *         # check if paired
 *         if second is not None and first is not None:
 *             is_pair = _check_is_pair(first, second)             # <<<<<<<<<<<<<<
 *             if is_pair == -1:
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")
 */
    __pyx_v_is_pair = __pyx_f_5khmer_5_oxli_7parsing__check_is_pair(__pyx_v_first, __pyx_v_second);

    /* "khmer/_oxli/parsing.pyx":383
 *         if second is not None and first is not None:
 *             is_pair = _check_is_pair(first, second)
 *             if is_pair == -1:             # <<<<<<<<<<<<<<
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")
 *                 return -1, None, None, err
 */
    __pyx_t_1 = ((__pyx_v_is_pair == -1L) != 0);
    if (__pyx_t_1) {

      /* "khmer/_oxli/parsing.pyx":384
 *             is_pair = _check_is_pair(first, second)
 *             if is_pair == -1:
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")             # <<<<<<<<<<<<<<
 *                 return -1, None, None, err
 *             if is_pair and not self.force_single:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_err = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "khmer/_oxli/parsing.pyx":385
 *             if is_pair == -1:
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")
 *                 return -1, None, None, err             # <<<<<<<<<<<<<<
 *             if is_pair and not self.force_single:
 *                 self.record = None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_neg_1);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
      __Pyx_INCREF(__pyx_v_err);
      __Pyx_GIVEREF(__pyx_v_err);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_err);
      __pyx_r = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":383
 *         if second is not None and first is not None:
 *             is_pair = _check_is_pair(first, second)
 *             if is_pair == -1:             # <<<<<<<<<<<<<<
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")
 *                 return -1, None, None, err
 */
    }

    /* "khmer/_oxli/parsing.pyx":386
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")
 *                 return -1, None, None, err
 *             if is_pair and not self.force_single:             # <<<<<<<<<<<<<<
 *                 self.record = None
 *                 return 2, first, second, None    # found 2 proper records
 */
    __pyx_t_2 = (__pyx_v_is_pair != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_self->force_single != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_1) {

      /* "khmer/_oxli/parsing.pyx":387
 *                 return -1, None, None, err
 *             if is_pair and not self.force_single:
 *                 self.record = None             # <<<<<<<<<<<<<<
 *                 return 2, first, second, None    # found 2 proper records
 *             else:   # orphan.
 */
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      __Pyx_GOTREF(__pyx_v_self->record);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
      __pyx_v_self->record = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None);

      /* "khmer/_oxli/parsing.pyx":388
 *             if is_pair and not self.force_single:
 *                 self.record = None
 *                 return 2, first, second, None    # found 2 proper records             # <<<<<<<<<<<<<<
 *             else:   # orphan.
 *                 if self.require_paired:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_first));
      __Pyx_INCREF(((PyObject *)__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
      PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_second));
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 3, Py_None);
      __pyx_r = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":386
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")
 *                 return -1, None, None, err
 *             if is_pair and not self.force_single:             # <<<<<<<<<<<<<<
 *                 self.record = None
 *                 return 2, first, second, None    # found 2 proper records
 */
    }

    /* "khmer/_oxli/parsing.pyx":390
 *                 return 2, first, second, None    # found 2 proper records
 *             else:   # orphan.
 *                 if self.require_paired:             # <<<<<<<<<<<<<<
 *                     err = UnpairedReadsError(
 *                         "Unpaired reads when require_paired is set!",
 */
    /*else*/ {
      __pyx_t_1 = (__pyx_v_self->require_paired != 0);
      if (__pyx_t_1) {

        /* "khmer/_oxli/parsing.pyx":391
 *             else:   # orphan.
 *                 if self.require_paired:
 *                     err = UnpairedReadsError(             # <<<<<<<<<<<<<<
 *                         "Unpaired reads when require_paired is set!",
 *                         first, second)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 391, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "khmer/_oxli/parsing.pyx":393
 *                     err = UnpairedReadsError(
 *                         "Unpaired reads when require_paired is set!",
 *                         first, second)             # <<<<<<<<<<<<<<
 *                     return -1, None, None, err
 *                 self.record = second
 */
        __pyx_t_7 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_kp_u_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_kp_u_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second)};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(__pyx_kp_u_Unpaired_reads_when_require_pair);
          __Pyx_GIVEREF(__pyx_kp_u_Unpaired_reads_when_require_pair);
          PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_kp_u_Unpaired_reads_when_require_pair);
          __Pyx_INCREF(((PyObject *)__pyx_v_first));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
          PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, ((PyObject *)__pyx_v_first));
          __Pyx_INCREF(((PyObject *)__pyx_v_second));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
          PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, ((PyObject *)__pyx_v_second));
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_err = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "khmer/_oxli/parsing.pyx":394
 *                         "Unpaired reads when require_paired is set!",
 *                         first, second)
 *                     return -1, None, None, err             # <<<<<<<<<<<<<<
 *                 self.record = second
 *                 return 1, first, None, None
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_int_neg_1);
        __Pyx_GIVEREF(__pyx_int_neg_1);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_neg_1);
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
        __Pyx_INCREF(__pyx_v_err);
        __Pyx_GIVEREF(__pyx_v_err);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_err);
        __pyx_r = ((PyObject*)__pyx_t_3);
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "khmer/_oxli/parsing.pyx":390
 *                 return 2, first, second, None    # found 2 proper records
 *             else:   # orphan.
 *                 if self.require_paired:             # <<<<<<<<<<<<<<
 *                     err = UnpairedReadsError(
 *                         "Unpaired reads when require_paired is set!",
 */
      }

      /* "khmer/_oxli/parsing.pyx":395
 *                         first, second)
 *                     return -1, None, None, err
 *                 self.record = second             # <<<<<<<<<<<<<<
 *                 return 1, first, None, None
 *         elif self.parser.is_complete():
 */
      __Pyx_INCREF(((PyObject *)__pyx_v_second));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
      __Pyx_GOTREF(__pyx_v_self->record);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
      __pyx_v_self->record = __pyx_v_second;

      /* "khmer/_oxli/parsing.pyx":396
 *                     return -1, None, None, err
 *                 self.record = second
 *                 return 1, first, None, None             # <<<<<<<<<<<<<<
 *         elif self.parser.is_complete():
 *             # ran out of reads getting second, handle last record
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
      __Pyx_INCREF(((PyObject *)__pyx_v_first));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_first));
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 3, Py_None);
      __pyx_r = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }

    /* "khmer/_oxli/parsing.pyx":381
 * 
 *         # check if paired
 *         if second is not None and first is not None:             # <<<<<<<<<<<<<<
 *             is_pair = _check_is_pair(first, second)
 *             if is_pair == -1:
 */
  }

  /* "khmer/_oxli/parsing.pyx":397
 *                 self.record = second
 *                 return 1, first, None, None
 *         elif self.parser.is_complete():             # <<<<<<<<<<<<<<
 *             # ran out of reads getting second, handle last record
 *             if self.require_paired:
 */
  __pyx_t_1 = (((struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser *)__pyx_v_self->parser->__pyx_vtab)->is_complete(__pyx_v_self->parser, 0) != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":399
 *         elif self.parser.is_complete():
 *             # ran out of reads getting second, handle last record
 *             if self.require_paired:             # <<<<<<<<<<<<<<
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)
 */
    __pyx_t_1 = (__pyx_v_self->require_paired != 0);
    if (__pyx_t_1) {

      /* "khmer/_oxli/parsing.pyx":400
 *             # ran out of reads getting second, handle last record
 *             if self.require_paired:
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "             # <<<<<<<<<<<<<<
 *                                           "is set!", first, None)
 *                 return -1, None, None, err
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UnpairedReadsError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "khmer/_oxli/parsing.pyx":401
 *             if self.require_paired:
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)             # <<<<<<<<<<<<<<
 *                 return -1, None, None, err
 *             self.record = None
 */
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_kp_u_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), Py_None};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_kp_u_Unpaired_reads_when_require_pair, ((PyObject *)__pyx_v_first), Py_None};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_u_Unpaired_reads_when_require_pair);
        __Pyx_GIVEREF(__pyx_kp_u_Unpaired_reads_when_require_pair);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_kp_u_Unpaired_reads_when_require_pair);
        __Pyx_INCREF(((PyObject *)__pyx_v_first));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_first));
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, Py_None);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_err = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "khmer/_oxli/parsing.pyx":402
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)
 *                 return -1, None, None, err             # <<<<<<<<<<<<<<
 *             self.record = None
 *             return 1, first, second, None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_neg_1);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
      __Pyx_INCREF(__pyx_v_err);
      __Pyx_GIVEREF(__pyx_v_err);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_err);
      __pyx_r = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":399
 *         elif self.parser.is_complete():
 *             # ran out of reads getting second, handle last record
 *             if self.require_paired:             # <<<<<<<<<<<<<<
 *                 err =  UnpairedReadsError("Unpaired reads when require_paired "
 *                                           "is set!", first, None)
 */
    }

    /* "khmer/_oxli/parsing.pyx":403
 *                                           "is set!", first, None)
 *                 return -1, None, None, err
 *             self.record = None             # <<<<<<<<<<<<<<
 *             return 1, first, second, None
 *         else: # one read was invalid, but that doesn't mean they were unpaired
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->record);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->record));
    __pyx_v_self->record = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None);

    /* "khmer/_oxli/parsing.pyx":404
 *                 return -1, None, None, err
 *             self.record = None
 *             return 1, first, second, None             # <<<<<<<<<<<<<<
 *         else: # one read was invalid, but that doesn't mean they were unpaired
 *             return 1, first, second, None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_first));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_first));
    __Pyx_INCREF(((PyObject *)__pyx_v_second));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_second));
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 3, Py_None);
    __pyx_r = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":397
 *                 self.record = second
 *                 return 1, first, None, None
 *         elif self.parser.is_complete():             # <<<<<<<<<<<<<<
 *             # ran out of reads getting second, handle last record
 *             if self.require_paired:
 */
  }

  /* "khmer/_oxli/parsing.pyx":406
 *             return 1, first, second, None
 *         else: # one read was invalid, but that doesn't mean they were unpaired
 *             return 1, first, second, None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_first));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_first));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_first));
    __Pyx_INCREF(((PyObject *)__pyx_v_second));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_second));
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_second));
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 3, Py_None);
    __pyx_r = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "khmer/_oxli/parsing.pyx":359
 *             found, first, second, err = self._next()
 * 
 *     cdef tuple _next(self):             # <<<<<<<<<<<<<<
 *         cdef Sequence first, second
 *         cdef int is_pair
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader._next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_first);
  __Pyx_XDECREF((PyObject *)__pyx_v_second);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":155
 * 
 *     cdef FastxParser parser
 *     cdef readonly int min_length             # <<<<<<<<<<<<<<
 *     cdef readonly bool force_single
 *     cdef readonly bool require_paired
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_10min_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_10min_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_10min_length___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_10min_length___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->min_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.min_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":156
 *     cdef FastxParser parser
 *     cdef readonly int min_length
 *     cdef readonly bool force_single             # <<<<<<<<<<<<<<
 *     cdef readonly bool require_paired
 *     cdef readonly Sequence record
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_12force_single_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_12force_single_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_12force_single___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_12force_single___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->force_single); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.force_single.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":157
 *     cdef readonly int min_length
 *     cdef readonly bool force_single
 *     cdef readonly bool require_paired             # <<<<<<<<<<<<<<
 *     cdef readonly Sequence record
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_14require_paired_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_14require_paired_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_14require_paired___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_14require_paired___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->require_paired); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.require_paired.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pxd":158
 *     cdef readonly bool force_single
 *     cdef readonly bool require_paired
 *     cdef readonly Sequence record             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple _next(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_6record_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_6record_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_6record___get__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_6record___get__(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->record));
  __pyx_r = ((PyObject *)__pyx_v_self->record);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_6__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_18BrokenPairedReader_5__reduce_cython__[] = "BrokenPairedReader.__reduce_cython__(self)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_6__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_5__reduce_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_8__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_18BrokenPairedReader_7__setstate_cython__[] = "BrokenPairedReader.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_8__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_7__setstate_cython__(((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_18BrokenPairedReader_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.BrokenPairedReader.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":409
 * 
 * 
 * cpdef tuple _split_left_right(unicode s):             # <<<<<<<<<<<<<<
 *     cdef string cppstr = s.encode('UTF-8')
 *     return _cppstring_split_left_right(cppstr)
 */

static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_3_split_left_right(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_f_5khmer_5_oxli_7parsing__split_left_right(PyObject *__pyx_v_s, CYTHON_UNUSED int __pyx_skip_dispatch) {
  std::string __pyx_v_cppstr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_split_left_right", 0);

  /* "khmer/_oxli/parsing.pyx":410
 * 
 * cpdef tuple _split_left_right(unicode s):
 *     cdef string cppstr = s.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return _cppstring_split_left_right(cppstr)
 * 
 */
  if (unlikely(__pyx_v_s == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 410, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cppstr = __pyx_t_2;

  /* "khmer/_oxli/parsing.pyx":411
 * cpdef tuple _split_left_right(unicode s):
 *     cdef string cppstr = s.encode('UTF-8')
 *     return _cppstring_split_left_right(cppstr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_7parsing__cppstring_split_left_right(__pyx_v_cppstr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":409
 * 
 * 
 * cpdef tuple _split_left_right(unicode s):             # <<<<<<<<<<<<<<
 *     cdef string cppstr = s.encode('UTF-8')
 *     return _cppstring_split_left_right(cppstr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing._split_left_right", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_3_split_left_right(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_2_split_left_right[] = "_split_left_right(unicode s) -> tuple";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_3_split_left_right(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_split_left_right (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 1, "s", 1))) __PYX_ERR(0, 409, __pyx_L1_error)
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_2_split_left_right(__pyx_self, ((PyObject*)__pyx_v_s));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_2_split_left_right(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_split_left_right", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_7parsing__split_left_right(__pyx_v_s, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing._split_left_right", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":414
 * 
 * 
 * cdef tuple _cppstring_split_left_right(string& s):             # <<<<<<<<<<<<<<
 *     """Split record name at the first whitespace and return both parts.
 * 
 */

static PyObject *__pyx_f_5khmer_5_oxli_7parsing__cppstring_split_left_right(std::string &__pyx_v_s) {
  unsigned int __pyx_v_i;
  char const *__pyx_v_c_str;
  PyObject *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cppstring_split_left_right", 0);

  /* "khmer/_oxli/parsing.pyx":420
 *     """
 *     cdef unsigned int i
 *     cdef const char * c_str = s.c_str()             # <<<<<<<<<<<<<<
 *     cdef unicode lhs, rhs
 *     lhs = u''
 */
  __pyx_v_c_str = __pyx_v_s.c_str();

  /* "khmer/_oxli/parsing.pyx":422
 *     cdef const char * c_str = s.c_str()
 *     cdef unicode lhs, rhs
 *     lhs = u''             # <<<<<<<<<<<<<<
 *     rhs = u''
 *     for i in range(len(s)):
 */
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_v_lhs = __pyx_kp_u__12;

  /* "khmer/_oxli/parsing.pyx":423
 *     cdef unicode lhs, rhs
 *     lhs = u''
 *     rhs = u''             # <<<<<<<<<<<<<<
 *     for i in range(len(s)):
 *         if lhs == u'':
 */
  __Pyx_INCREF(__pyx_kp_u__12);
  __pyx_v_rhs = __pyx_kp_u__12;

  /* "khmer/_oxli/parsing.pyx":424
 *     lhs = u''
 *     rhs = u''
 *     for i in range(len(s)):             # <<<<<<<<<<<<<<
 *         if lhs == u'':
 *             if (c_str[i] == b' ' or c_str[i] == b'\t'):
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "khmer/_oxli/parsing.pyx":425
 *     rhs = u''
 *     for i in range(len(s)):
 *         if lhs == u'':             # <<<<<<<<<<<<<<
 *             if (c_str[i] == b' ' or c_str[i] == b'\t'):
 *                 lhs = _ustring(c_str[0:i])
 */
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_lhs, __pyx_kp_u__12, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 425, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "khmer/_oxli/parsing.pyx":426
 *     for i in range(len(s)):
 *         if lhs == u'':
 *             if (c_str[i] == b' ' or c_str[i] == b'\t'):             # <<<<<<<<<<<<<<
 *                 lhs = _ustring(c_str[0:i])
 *         else:
 */
      __pyx_t_5 = (((__pyx_v_c_str[__pyx_v_i]) == ' ') != 0);
      if (!__pyx_t_5) {
      } else {
        __pyx_t_6 = __pyx_t_5;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_5 = (((__pyx_v_c_str[__pyx_v_i]) == '\t') != 0);
      __pyx_t_6 = __pyx_t_5;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_6) {

        /* "khmer/_oxli/parsing.pyx":427
 *         if lhs == u'':
 *             if (c_str[i] == b' ' or c_str[i] == b'\t'):
 *                 lhs = _ustring(c_str[0:i])             # <<<<<<<<<<<<<<
 *         else:
 *             if c_str[i] != b' ' or c_str[i] != b'\t':
 */
        __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_c_str + 0, __pyx_v_i - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __pyx_f_5khmer_5_oxli_5utils__ustring(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 427, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF_SET(__pyx_v_lhs, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;

        /* "khmer/_oxli/parsing.pyx":426
 *     for i in range(len(s)):
 *         if lhs == u'':
 *             if (c_str[i] == b' ' or c_str[i] == b'\t'):             # <<<<<<<<<<<<<<
 *                 lhs = _ustring(c_str[0:i])
 *         else:
 */
      }

      /* "khmer/_oxli/parsing.pyx":425
 *     rhs = u''
 *     for i in range(len(s)):
 *         if lhs == u'':             # <<<<<<<<<<<<<<
 *             if (c_str[i] == b' ' or c_str[i] == b'\t'):
 *                 lhs = _ustring(c_str[0:i])
 */
      goto __pyx_L5;
    }

    /* "khmer/_oxli/parsing.pyx":429
 *                 lhs = _ustring(c_str[0:i])
 *         else:
 *             if c_str[i] != b' ' or c_str[i] != b'\t':             # <<<<<<<<<<<<<<
 *                 rhs = _ustring(c_str[i:len(s)])
 *                 break
 */
    /*else*/ {
      __pyx_t_5 = (((__pyx_v_c_str[__pyx_v_i]) != ' ') != 0);
      if (!__pyx_t_5) {
      } else {
        __pyx_t_6 = __pyx_t_5;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_5 = (((__pyx_v_c_str[__pyx_v_i]) != '\t') != 0);
      __pyx_t_6 = __pyx_t_5;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_6) {

        /* "khmer/_oxli/parsing.pyx":430
 *         else:
 *             if c_str[i] != b' ' or c_str[i] != b'\t':
 *                 rhs = _ustring(c_str[i:len(s)])             # <<<<<<<<<<<<<<
 *                 break
 *     lhs = _ustring(c_str[0:len(s)])  if lhs == u'' else lhs
 */
        __pyx_t_7 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_s); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 430, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_c_str + __pyx_v_i, __pyx_t_8 - __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__ustring(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_rhs, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "khmer/_oxli/parsing.pyx":431
 *             if c_str[i] != b' ' or c_str[i] != b'\t':
 *                 rhs = _ustring(c_str[i:len(s)])
 *                 break             # <<<<<<<<<<<<<<
 *     lhs = _ustring(c_str[0:len(s)])  if lhs == u'' else lhs
 *     return lhs, rhs
 */
        goto __pyx_L4_break;

        /* "khmer/_oxli/parsing.pyx":429
 *                 lhs = _ustring(c_str[0:i])
 *         else:
 *             if c_str[i] != b' ' or c_str[i] != b'\t':             # <<<<<<<<<<<<<<
 *                 rhs = _ustring(c_str[i:len(s)])
 *                 break
 */
      }
    }
    __pyx_L5:;
  }
  __pyx_L4_break:;

  /* "khmer/_oxli/parsing.pyx":432
 *                 rhs = _ustring(c_str[i:len(s)])
 *                 break
 *     lhs = _ustring(c_str[0:len(s)])  if lhs == u'' else lhs             # <<<<<<<<<<<<<<
 *     return lhs, rhs
 * 
 */
  __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_lhs, __pyx_kp_u__12, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
  if ((__pyx_t_6 != 0)) {
    __pyx_t_7 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_s); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_c_str + 0, __pyx_t_2 - 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __pyx_f_5khmer_5_oxli_5utils__ustring(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __pyx_t_9;
    __pyx_t_9 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_lhs);
    __pyx_t_1 = __pyx_v_lhs;
  }
  __Pyx_DECREF_SET(__pyx_v_lhs, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":433
 *                 break
 *     lhs = _ustring(c_str[0:len(s)])  if lhs == u'' else lhs
 *     return lhs, rhs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_lhs);
  __Pyx_GIVEREF(__pyx_v_lhs);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_lhs);
  __Pyx_INCREF(__pyx_v_rhs);
  __Pyx_GIVEREF(__pyx_v_rhs);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_rhs);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":414
 * 
 * 
 * cdef tuple _cppstring_split_left_right(string& s):             # <<<<<<<<<<<<<<
 *     """Split record name at the first whitespace and return both parts.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("khmer._oxli.parsing._cppstring_split_left_right", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":436
 * 
 * 
 * cdef int _check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     """Check if the two sequence records belong to the same fragment.
 * 
 */

static int __pyx_f_5khmer_5_oxli_7parsing__check_is_pair(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_first, struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_v_second) {
  PyObject *__pyx_v_lhs1 = 0;
  PyObject *__pyx_v_rhs1 = 0;
  PyObject *__pyx_v_lhs2 = 0;
  PyObject *__pyx_v_rhs2 = 0;
  PyObject *__pyx_v_subpart1 = 0;
  PyObject *__pyx_v_subpart2 = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_is_pair", 0);

  /* "khmer/_oxli/parsing.pyx":448
 *     'Accession seq/1'
 *     """
 *     if first.quality is None or second.quality is None:             # <<<<<<<<<<<<<<
 *         if first.quality is not second.quality:
 *             return -1
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_first), __pyx_n_s_quality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 == Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_second), __pyx_n_s_quality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_t_2 == Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":449
 *     """
 *     if first.quality is None or second.quality is None:
 *         if first.quality is not second.quality:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_first), __pyx_n_s_quality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_second), __pyx_n_s_quality); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = (__pyx_t_2 != __pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {

      /* "khmer/_oxli/parsing.pyx":450
 *     if first.quality is None or second.quality is None:
 *         if first.quality is not second.quality:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *     cdef unicode lhs1, rhs1, lhs2, rhs2
 */
      __pyx_r = -1;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":449
 *     """
 *     if first.quality is None or second.quality is None:
 *         if first.quality is not second.quality:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "khmer/_oxli/parsing.pyx":448
 *     'Accession seq/1'
 *     """
 *     if first.quality is None or second.quality is None:             # <<<<<<<<<<<<<<
 *         if first.quality is not second.quality:
 *             return -1
 */
  }

  /* "khmer/_oxli/parsing.pyx":453
 * 
 *     cdef unicode lhs1, rhs1, lhs2, rhs2
 *     lhs1, rhs1 = _cppstring_split_left_right(first._obj.name)             # <<<<<<<<<<<<<<
 *     lhs2, rhs2 = _cppstring_split_left_right(second._obj.name)
 * 
 */
  __pyx_t_5 = __pyx_f_5khmer_5_oxli_7parsing__cppstring_split_left_right(__pyx_v_first->_obj.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(__pyx_t_5 != Py_None)) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 453, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_6);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 453, __pyx_L1_error)
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 453, __pyx_L1_error)
  if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_v_lhs1 = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs1 = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "khmer/_oxli/parsing.pyx":454
 *     cdef unicode lhs1, rhs1, lhs2, rhs2
 *     lhs1, rhs1 = _cppstring_split_left_right(first._obj.name)
 *     lhs2, rhs2 = _cppstring_split_left_right(second._obj.name)             # <<<<<<<<<<<<<<
 * 
 *     # handle 'name/1'
 */
  __pyx_t_5 = __pyx_f_5khmer_5_oxli_7parsing__cppstring_split_left_right(__pyx_v_second->_obj.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(__pyx_t_5 != Py_None)) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 454, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 454, __pyx_L1_error)
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 454, __pyx_L1_error)
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_v_lhs2 = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_v_rhs2 = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "khmer/_oxli/parsing.pyx":458
 *     # handle 'name/1'
 *     cdef unicode subpart1, subpart2
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = lhs1.split('/', 1)[0]
 *         subpart2 = lhs2.split('/', 1)[0]
 */
  if (unlikely(__pyx_v_lhs1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 458, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_Tailmatch(__pyx_v_lhs1, __pyx_kp_u_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 458, __pyx_L1_error)
  if ((__pyx_t_1 != 0)) {
  } else {
    __pyx_t_3 = (__pyx_t_1 != 0);
    goto __pyx_L8_bool_binop_done;
  }
  if (unlikely(__pyx_v_lhs2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 458, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_Tailmatch(__pyx_v_lhs2, __pyx_kp_u_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 458, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != 0);
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_3) {

    /* "khmer/_oxli/parsing.pyx":459
 *     cdef unicode subpart1, subpart2
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):
 *         subpart1 = lhs1.split('/', 1)[0]             # <<<<<<<<<<<<<<
 *         subpart2 = lhs2.split('/', 1)[0]
 * 
 */
    if (unlikely(__pyx_v_lhs1 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
      __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __pyx_t_5 = PyUnicode_Split(__pyx_v_lhs1, __pyx_kp_u__19, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 459, __pyx_L1_error)
    __pyx_v_subpart1 = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":460
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):
 *         subpart1 = lhs1.split('/', 1)[0]
 *         subpart2 = lhs2.split('/', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *         if subpart1 and subpart1 == subpart2:
 */
    if (unlikely(__pyx_v_lhs2 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
      __PYX_ERR(0, 460, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_Split(__pyx_v_lhs2, __pyx_kp_u__19, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 460, __pyx_L1_error)
    __pyx_v_subpart2 = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "khmer/_oxli/parsing.pyx":462
 *         subpart2 = lhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
    __pyx_t_1 = (__pyx_v_subpart1 != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_v_subpart1) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_3 = __pyx_t_1;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_subpart1, __pyx_v_subpart2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 462, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_1 != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_3) {

      /* "khmer/_oxli/parsing.pyx":463
 * 
 *         if subpart1 and subpart1 == subpart2:
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *     # handle '@name 1:rst'
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":462
 *         subpart2 = lhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
    }

    /* "khmer/_oxli/parsing.pyx":458
 *     # handle 'name/1'
 *     cdef unicode subpart1, subpart2
 *     if lhs1.endswith('/1') and lhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = lhs1.split('/', 1)[0]
 *         subpart2 = lhs2.split('/', 1)[0]
 */
    goto __pyx_L7;
  }

  /* "khmer/_oxli/parsing.pyx":466
 * 
 *     # handle '@name 1:rst'
 *     elif lhs1 == lhs2 and rhs1.startswith('1:') and rhs2.startswith('2:'):             # <<<<<<<<<<<<<<
 *         return 1
 * 
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_lhs1, __pyx_v_lhs2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L13_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "startswith");
    __PYX_ERR(0, 466, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs1, __pyx_kp_u_1_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 466, __pyx_L1_error)
  if ((__pyx_t_1 != 0)) {
  } else {
    __pyx_t_3 = (__pyx_t_1 != 0);
    goto __pyx_L13_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "startswith");
    __PYX_ERR(0, 466, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs2, __pyx_kp_u_2_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != 0);
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_3) {

    /* "khmer/_oxli/parsing.pyx":467
 *     # handle '@name 1:rst'
 *     elif lhs1 == lhs2 and rhs1.startswith('1:') and rhs2.startswith('2:'):
 *         return 1             # <<<<<<<<<<<<<<
 * 
 *     # handle @name seq/1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":466
 * 
 *     # handle '@name 1:rst'
 *     elif lhs1 == lhs2 and rhs1.startswith('1:') and rhs2.startswith('2:'):             # <<<<<<<<<<<<<<
 *         return 1
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":470
 * 
 *     # handle @name seq/1
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = rhs1.split('/', 1)[0]
 *         subpart2 = rhs2.split('/', 1)[0]
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_lhs1, __pyx_v_lhs2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 470, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L16_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 470, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs1, __pyx_kp_u_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 470, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {
  } else {
    __pyx_t_3 = (__pyx_t_4 != 0);
    goto __pyx_L16_bool_binop_done;
  }
  if (unlikely(__pyx_v_rhs2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 470, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs2, __pyx_kp_u_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 470, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_3) {

    /* "khmer/_oxli/parsing.pyx":471
 *     # handle @name seq/1
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):
 *         subpart1 = rhs1.split('/', 1)[0]             # <<<<<<<<<<<<<<
 *         subpart2 = rhs2.split('/', 1)[0]
 * 
 */
    if (unlikely(__pyx_v_rhs1 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
      __PYX_ERR(0, 471, __pyx_L1_error)
    }
    __pyx_t_5 = PyUnicode_Split(__pyx_v_rhs1, __pyx_kp_u__19, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 471, __pyx_L1_error)
    __pyx_v_subpart1 = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "khmer/_oxli/parsing.pyx":472
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):
 *         subpart1 = rhs1.split('/', 1)[0]
 *         subpart2 = rhs2.split('/', 1)[0]             # <<<<<<<<<<<<<<
 * 
 *         if subpart1 and subpart1 == subpart2:
 */
    if (unlikely(__pyx_v_rhs2 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
      __PYX_ERR(0, 472, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_Split(__pyx_v_rhs2, __pyx_kp_u__19, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 472, __pyx_L1_error)
    __pyx_v_subpart2 = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "khmer/_oxli/parsing.pyx":474
 *         subpart2 = rhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
    __pyx_t_4 = (__pyx_v_subpart1 != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_v_subpart1) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_subpart1, __pyx_v_subpart2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_4 != 0);
    __pyx_t_3 = __pyx_t_1;
    __pyx_L20_bool_binop_done:;
    if (__pyx_t_3) {

      /* "khmer/_oxli/parsing.pyx":475
 * 
 *         if subpart1 and subpart1 == subpart2:
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "khmer/_oxli/parsing.pyx":474
 *         subpart2 = rhs2.split('/', 1)[0]
 * 
 *         if subpart1 and subpart1 == subpart2:             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
    }

    /* "khmer/_oxli/parsing.pyx":470
 * 
 *     # handle @name seq/1
 *     elif lhs1 == lhs2 and rhs1.endswith('/1') and rhs2.endswith('/2'):             # <<<<<<<<<<<<<<
 *         subpart1 = rhs1.split('/', 1)[0]
 *         subpart2 = rhs2.split('/', 1)[0]
 */
  }
  __pyx_L7:;

  /* "khmer/_oxli/parsing.pyx":477
 *             return 1
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":436
 * 
 * 
 * cdef int _check_is_pair(Sequence first, Sequence second):             # <<<<<<<<<<<<<<
 *     """Check if the two sequence records belong to the same fragment.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("khmer._oxli.parsing._check_is_pair", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs1);
  __Pyx_XDECREF(__pyx_v_rhs1);
  __Pyx_XDECREF(__pyx_v_lhs2);
  __Pyx_XDECREF(__pyx_v_rhs2);
  __Pyx_XDECREF(__pyx_v_subpart1);
  __Pyx_XDECREF(__pyx_v_subpart2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":480
 * 
 * 
 * def check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *     if type(first) is not Sequence:
 *         first = Sequence.from_screed_record(first)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_5check_is_pair(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_4check_is_pair[] = "check_is_pair(first, second)";
static PyMethodDef __pyx_mdef_5khmer_5_oxli_7parsing_5check_is_pair = {"check_is_pair", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_7parsing_5check_is_pair, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_7parsing_4check_is_pair};
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_5check_is_pair(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_first = 0;
  PyObject *__pyx_v_second = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_is_pair (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_first,&__pyx_n_s_second,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_first)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_second)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_is_pair", 1, 2, 2, 1); __PYX_ERR(0, 480, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_is_pair") < 0)) __PYX_ERR(0, 480, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_first = values[0];
    __pyx_v_second = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_is_pair", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 480, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.check_is_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_4check_is_pair(__pyx_self, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_4check_is_pair(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_is_pair", 0);
  __Pyx_INCREF(__pyx_v_first);
  __Pyx_INCREF(__pyx_v_second);

  /* "khmer/_oxli/parsing.pyx":481
 * 
 * def check_is_pair(first, second):
 *     if type(first) is not Sequence:             # <<<<<<<<<<<<<<
 *         first = Sequence.from_screed_record(first)
 *     if type(second) is not Sequence:
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_first)) != ((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "khmer/_oxli/parsing.pyx":482
 * def check_is_pair(first, second):
 *     if type(first) is not Sequence:
 *         first = Sequence.from_screed_record(first)             # <<<<<<<<<<<<<<
 *     if type(second) is not Sequence:
 *         second = Sequence.from_screed_record(second)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence), __pyx_n_s_from_screed_record); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_first) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_first);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_first, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/parsing.pyx":481
 * 
 * def check_is_pair(first, second):
 *     if type(first) is not Sequence:             # <<<<<<<<<<<<<<
 *         first = Sequence.from_screed_record(first)
 *     if type(second) is not Sequence:
 */
  }

  /* "khmer/_oxli/parsing.pyx":483
 *     if type(first) is not Sequence:
 *         first = Sequence.from_screed_record(first)
 *     if type(second) is not Sequence:             # <<<<<<<<<<<<<<
 *         second = Sequence.from_screed_record(second)
 *     cdef int ret = _check_is_pair(first, second)
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_second)) != ((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "khmer/_oxli/parsing.pyx":484
 *         first = Sequence.from_screed_record(first)
 *     if type(second) is not Sequence:
 *         second = Sequence.from_screed_record(second)             # <<<<<<<<<<<<<<
 *     cdef int ret = _check_is_pair(first, second)
 *     if ret == -1:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence), __pyx_n_s_from_screed_record); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_second) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_second);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_second, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "khmer/_oxli/parsing.pyx":483
 *     if type(first) is not Sequence:
 *         first = Sequence.from_screed_record(first)
 *     if type(second) is not Sequence:             # <<<<<<<<<<<<<<
 *         second = Sequence.from_screed_record(second)
 *     cdef int ret = _check_is_pair(first, second)
 */
  }

  /* "khmer/_oxli/parsing.pyx":485
 *     if type(second) is not Sequence:
 *         second = Sequence.from_screed_record(second)
 *     cdef int ret = _check_is_pair(first, second)             # <<<<<<<<<<<<<<
 *     if ret == -1:
 *         raise ValueError("both records must be same type (FASTA or FASTQ)")
 */
  if (!(likely(((__pyx_v_first) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_first, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 485, __pyx_L1_error)
  if (!(likely(((__pyx_v_second) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_second, __pyx_ptype_5khmer_5_oxli_7parsing_Sequence))))) __PYX_ERR(0, 485, __pyx_L1_error)
  __pyx_v_ret = __pyx_f_5khmer_5_oxli_7parsing__check_is_pair(((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_first), ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)__pyx_v_second));

  /* "khmer/_oxli/parsing.pyx":486
 *         second = Sequence.from_screed_record(second)
 *     cdef int ret = _check_is_pair(first, second)
 *     if ret == -1:             # <<<<<<<<<<<<<<
 *         raise ValueError("both records must be same type (FASTA or FASTQ)")
 *     return ret == 1
 */
  __pyx_t_1 = ((__pyx_v_ret == -1L) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "khmer/_oxli/parsing.pyx":487
 *     cdef int ret = _check_is_pair(first, second)
 *     if ret == -1:
 *         raise ValueError("both records must be same type (FASTA or FASTQ)")             # <<<<<<<<<<<<<<
 *     return ret == 1
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 487, __pyx_L1_error)

    /* "khmer/_oxli/parsing.pyx":486
 *         second = Sequence.from_screed_record(second)
 *     cdef int ret = _check_is_pair(first, second)
 *     if ret == -1:             # <<<<<<<<<<<<<<
 *         raise ValueError("both records must be same type (FASTA or FASTQ)")
 *     return ret == 1
 */
  }

  /* "khmer/_oxli/parsing.pyx":488
 *     if ret == -1:
 *         raise ValueError("both records must be same type (FASTA or FASTQ)")
 *     return ret == 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_ret == 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":480
 * 
 * 
 * def check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *     if type(first) is not Sequence:
 *         first = Sequence.from_screed_record(first)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("khmer._oxli.parsing.check_is_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_first);
  __Pyx_XDECREF(__pyx_v_second);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":491
 * 
 * 
 * cpdef bool check_is_left(s):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'left' sequence (/1).
 * 
 */

static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_7check_is_left(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static bool __pyx_f_5khmer_5_oxli_7parsing_check_is_left(PyObject *__pyx_v_s, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = 0;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_is_left", 0);

  /* "khmer/_oxli/parsing.pyx":499
 *     """
 *     cdef unicode lhs, rhs
 *     lhs, rhs = _split_left_right(_ustring(s))             # <<<<<<<<<<<<<<
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__ustring(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5khmer_5_oxli_7parsing__split_left_right(((PyObject*)__pyx_t_1), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 499, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 499, __pyx_L1_error)
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 499, __pyx_L1_error)
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_v_lhs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_rhs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/parsing.pyx":500
 *     cdef unicode lhs, rhs
 *     lhs, rhs = _split_left_right(_ustring(s))
 *     if lhs.endswith('/1'):              # handle 'name/1'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 */
  if (unlikely(__pyx_v_lhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 500, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_lhs, __pyx_kp_u_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 500, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/parsing.pyx":501
 *     lhs, rhs = _split_left_right(_ustring(s))
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True             # <<<<<<<<<<<<<<
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":500
 *     cdef unicode lhs, rhs
 *     lhs, rhs = _split_left_right(_ustring(s))
 *     if lhs.endswith('/1'):              # handle 'name/1'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 */
  }

  /* "khmer/_oxli/parsing.pyx":502
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "startswith");
    __PYX_ERR(0, 502, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs, __pyx_kp_u_1_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 502, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/parsing.pyx":503
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":502
 *     if lhs.endswith('/1'):              # handle 'name/1'
 *         return True
 *     elif rhs.startswith('1:'):          # handle '@name 1:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":505
 *         return True
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 505, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs, __pyx_kp_u_1, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 505, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/parsing.pyx":506
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":505
 *         return True
 * 
 *     elif rhs.endswith('/1'):            # handles '@name seq/1'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":508
 *         return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":491
 * 
 * 
 * cpdef bool check_is_left(s):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'left' sequence (/1).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("khmer._oxli.parsing.check_is_left", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_7check_is_left(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_6check_is_left[] = "check_is_left(s) -> bool\nCheck if the name belongs to a 'left' sequence (/1).\n\n    Returns True or False.\n\n    Handles both Casava formats: seq/1 and 'seq::... 1::...'\n    ";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_7check_is_left(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_is_left (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_6check_is_left(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_6check_is_left(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_is_left", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_5khmer_5_oxli_7parsing_check_is_left(__pyx_v_s, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.check_is_left", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "khmer/_oxli/parsing.pyx":511
 * 
 * 
 * cpdef bool check_is_right(s):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'right' sequence (/2).
 * 
 */

static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9check_is_right(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static bool __pyx_f_5khmer_5_oxli_7parsing_check_is_right(PyObject *__pyx_v_s, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = 0;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_is_right", 0);

  /* "khmer/_oxli/parsing.pyx":519
 *     """
 *     cdef unicode lhs, rhs
 *     lhs, rhs = _split_left_right(_ustring(s))             # <<<<<<<<<<<<<<
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True
 */
  __pyx_t_1 = __pyx_f_5khmer_5_oxli_5utils__ustring(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5khmer_5_oxli_7parsing__split_left_right(((PyObject*)__pyx_t_1), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 519, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 519, __pyx_L1_error)
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 519, __pyx_L1_error)
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 519, __pyx_L1_error)
  __pyx_v_lhs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_rhs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "khmer/_oxli/parsing.pyx":520
 *     cdef unicode lhs, rhs
 *     lhs, rhs = _split_left_right(_ustring(s))
 *     if lhs.endswith('/2'):              # handle 'name/2'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 */
  if (unlikely(__pyx_v_lhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 520, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_lhs, __pyx_kp_u_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 520, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/parsing.pyx":521
 *     lhs, rhs = _split_left_right(_ustring(s))
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True             # <<<<<<<<<<<<<<
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":520
 *     cdef unicode lhs, rhs
 *     lhs, rhs = _split_left_right(_ustring(s))
 *     if lhs.endswith('/2'):              # handle 'name/2'             # <<<<<<<<<<<<<<
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 */
  }

  /* "khmer/_oxli/parsing.pyx":522
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "startswith");
    __PYX_ERR(0, 522, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs, __pyx_kp_u_2_2, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 522, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/parsing.pyx":523
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":522
 *     if lhs.endswith('/2'):              # handle 'name/2'
 *         return True
 *     elif rhs.startswith('2:'):          # handle '@name 2:rst'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":525
 *         return True
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  if (unlikely(__pyx_v_rhs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "endswith");
    __PYX_ERR(0, 525, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_Tailmatch(__pyx_v_rhs, __pyx_kp_u_2, 0, PY_SSIZE_T_MAX, 1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 525, __pyx_L1_error)
  if ((__pyx_t_4 != 0)) {

    /* "khmer/_oxli/parsing.pyx":526
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "khmer/_oxli/parsing.pyx":525
 *         return True
 * 
 *     elif rhs.endswith('/2'):            # handles '@name seq/2'             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "khmer/_oxli/parsing.pyx":528
 *         return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "khmer/_oxli/parsing.pyx":511
 * 
 * 
 * cpdef bool check_is_right(s):             # <<<<<<<<<<<<<<
 *     """Check if the name belongs to a 'right' sequence (/2).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("khmer._oxli.parsing.check_is_right", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9check_is_right(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_8check_is_right[] = "check_is_right(s) -> bool\nCheck if the name belongs to a 'right' sequence (/2).\n\n    Returns True or False.\n\n    Handles both Casava formats: seq/2 and 'seq::... 2::...'\n    ";
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_9check_is_right(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_is_right (wrapper)", 0);
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_8check_is_right(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_8check_is_right(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_is_right", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_5khmer_5_oxli_7parsing_check_is_right(__pyx_v_s, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._oxli.parsing.check_is_right", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Alphabets(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11__pyx_unpickle_Alphabets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5khmer_5_oxli_7parsing_10__pyx_unpickle_Alphabets[] = "__pyx_unpickle_Alphabets(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_5khmer_5_oxli_7parsing_11__pyx_unpickle_Alphabets = {"__pyx_unpickle_Alphabets", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_7parsing_11__pyx_unpickle_Alphabets, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_7parsing_10__pyx_unpickle_Alphabets};
static PyObject *__pyx_pw_5khmer_5_oxli_7parsing_11__pyx_unpickle_Alphabets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Alphabets (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Alphabets", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Alphabets", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Alphabets") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Alphabets", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._oxli.parsing.__pyx_unpickle_Alphabets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5khmer_5_oxli_7parsing_10__pyx_unpickle_Alphabets(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5khmer_5_oxli_7parsing_10__pyx_unpickle_Alphabets(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Alphabets", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__21, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Alphabets.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Alphabets.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Alphabets.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Alphabets__set_state(<Alphabets> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Alphabets.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Alphabets__set_state(<Alphabets> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Alphabets.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Alphabets__set_state(<Alphabets> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Alphabets__set_state(Alphabets __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_5khmer_5_oxli_7parsing___pyx_unpickle_Alphabets__set_state(((struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Alphabets.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Alphabets__set_state(<Alphabets> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Alphabets__set_state(<Alphabets> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Alphabets__set_state(Alphabets __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Alphabets(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("khmer._oxli.parsing.__pyx_unpickle_Alphabets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Alphabets__set_state(<Alphabets> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Alphabets__set_state(Alphabets __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_5khmer_5_oxli_7parsing___pyx_unpickle_Alphabets__set_state(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Alphabets__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Alphabets__set_state(Alphabets __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Alphabets__set_state(Alphabets __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Alphabets__set_state(Alphabets __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Alphabets__set_state(<Alphabets> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Alphabets__set_state(Alphabets __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("khmer._oxli.parsing.__pyx_unpickle_Alphabets__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Alphabets __pyx_vtable_5khmer_5_oxli_7parsing_Alphabets;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_Alphabets(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_7parsing_Alphabets;
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing_Alphabets(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_7parsing_Alphabets[] = {
  {"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_1get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_7parsing_9Alphabets_get},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_3__reduce_cython__, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_9Alphabets_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_9Alphabets_5__setstate_cython__, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_9Alphabets_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing_Alphabets = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.Alphabets", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_Alphabets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_Alphabets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_7parsing_Alphabets, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing_Alphabets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_Sequence __pyx_vtable_5khmer_5_oxli_7parsing_Sequence;

static struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *__pyx_freelist_5khmer_5_oxli_7parsing_Sequence[100];
static int __pyx_freecount_5khmer_5_oxli_7parsing_Sequence = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_Sequence(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_7parsing_Sequence > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence)) & ((t->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)) == 0))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_7parsing_Sequence[--__pyx_freecount_5khmer_5_oxli_7parsing_Sequence];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence));
    (void) PyObject_INIT(o, t);
  } else {
    if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
      o = (*t->tp_alloc)(t, 0);
    } else {
      o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
    }
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_7parsing_Sequence;
  new((void*)&(p->_obj)) oxli::read_parsers::Read();
  if (unlikely(__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing_Sequence(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_obj);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_7parsing_Sequence < 100) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence)) & ((Py_TYPE(o)->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)) == 0))) {
    __pyx_freelist_5khmer_5_oxli_7parsing_Sequence[__pyx_freecount_5khmer_5_oxli_7parsing_Sequence++] = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
static PyObject *__pyx_sq_item_5khmer_5_oxli_7parsing_Sequence(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_4name_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_sequence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_8sequence_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_description(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11description_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_quality(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_7quality_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_cleaned_seq(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11cleaned_seq_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_7parsing_Sequence[] = {
  {"kmers", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_11kmers, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_10kmers},
  {"from_screed_record", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_16from_screed_record, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_15from_screed_record},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_18__reduce_cython__, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_17__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_8Sequence_20__setstate_cython__, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_8Sequence_19__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_7parsing_Sequence[] = {
  {(char *)"name", __pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_name, 0, (char *)0, 0},
  {(char *)"sequence", __pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_sequence, 0, (char *)0, 0},
  {(char *)"description", __pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_description, 0, (char *)0, 0},
  {(char *)"quality", __pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_quality, 0, (char *)0, 0},
  {(char *)"cleaned_seq", __pyx_getprop_5khmer_5_oxli_7parsing_8Sequence_cleaned_seq, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Sequence = {
  __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5khmer_5_oxli_7parsing_Sequence, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Sequence = {
  __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_7__len__, /*mp_length*/
  __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_14__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing_Sequence = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.Sequence", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_Sequence, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Sequence, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Sequence, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_5khmer_5_oxli_7parsing_8Sequence_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_7parsing_Sequence, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_7parsing_Sequence, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing_Sequence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_ReadBundle(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)o);
  p->reads = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing_ReadBundle(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->reads);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing_ReadBundle(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)o;
  if (p->reads) {
    e = (*v)(p->reads, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_7parsing_ReadBundle(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle *)o;
  tmp = ((PyObject*)p->reads);
  p->reads = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_10ReadBundle_num_reads(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_9num_reads_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_10ReadBundle_total_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_12total_length_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_7parsing_ReadBundle[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_3__reduce_cython__, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_10ReadBundle_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_10ReadBundle_5__setstate_cython__, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_10ReadBundle_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_7parsing_ReadBundle[] = {
  {(char *)"num_reads", __pyx_getprop_5khmer_5_oxli_7parsing_10ReadBundle_num_reads, 0, (char *)0, 0},
  {(char *)"total_length", __pyx_getprop_5khmer_5_oxli_7parsing_10ReadBundle_total_length, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing_ReadBundle = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.ReadBundle", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_ReadBundle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_ReadBundle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing_ReadBundle, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_7parsing_ReadBundle, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_7parsing_ReadBundle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_7parsing_ReadBundle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing_ReadBundle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser __pyx_vtable_5khmer_5_oxli_7parsing_FastxParser;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_FastxParser(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser;
  new((void*)&(p->_this)) std::shared_ptr<oxli::read_parsers::ReadParser<oxli::read_parsers::FastxReader> > ();
  if (unlikely(__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing_FastxParser(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_this);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_7parsing_FastxParser[] = {
  {"is_complete", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_3is_complete, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_11FastxParser_2is_complete},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_8__reduce_cython__, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_11FastxParser_7__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_10__setstate_cython__, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_11FastxParser_9__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing_FastxParser = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.FastxParser", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_FastxParser, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5khmer_5_oxli_7parsing_11FastxParser_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_7parsing_FastxParser, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing_FastxParser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SanitizedFastxParser __pyx_vtable_5khmer_5_oxli_7parsing_SanitizedFastxParser;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_SanitizedFastxParser(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *p;
  PyObject *o = __pyx_tp_new_5khmer_5_oxli_7parsing_FastxParser(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_FastxParser*)__pyx_vtabptr_5khmer_5_oxli_7parsing_SanitizedFastxParser;
  new((void*)&(p->_alphabet)) std::string();
  if (unlikely(__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing_SanitizedFastxParser(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_alphabet);
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_FastxParser(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_20SanitizedFastxParser_n_bad(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5n_bad_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_20SanitizedFastxParser__alphabet(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_9_alphabet_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_7parsing_SanitizedFastxParser[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_6__reduce_cython__, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_20SanitizedFastxParser_5__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_8__setstate_cython__, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_20SanitizedFastxParser_7__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_7parsing_SanitizedFastxParser[] = {
  {(char *)"n_bad", __pyx_getprop_5khmer_5_oxli_7parsing_20SanitizedFastxParser_n_bad, 0, (char *)0, 0},
  {(char *)"_alphabet", __pyx_getprop_5khmer_5_oxli_7parsing_20SanitizedFastxParser__alphabet, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.SanitizedFastxParser", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_SanitizedFastxParser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_SanitizedFastxParser, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5khmer_5_oxli_7parsing_20SanitizedFastxParser_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_7parsing_SanitizedFastxParser, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_7parsing_SanitizedFastxParser, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing_SanitizedFastxParser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_SplitPairedReader __pyx_vtable_5khmer_5_oxli_7parsing_SplitPairedReader;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_SplitPairedReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_7parsing_SplitPairedReader;
  p->left_parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)Py_None); Py_INCREF(Py_None);
  p->right_parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing_SplitPairedReader(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->left_parser);
  Py_CLEAR(p->right_parser);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing_SplitPairedReader(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)o;
  if (p->left_parser) {
    e = (*v)(((PyObject *)p->left_parser), a); if (e) return e;
  }
  if (p->right_parser) {
    e = (*v)(((PyObject *)p->right_parser), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_7parsing_SplitPairedReader(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *)o;
  tmp = ((PyObject*)p->left_parser);
  p->left_parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->right_parser);
  p->right_parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_17SplitPairedReader_min_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_10min_length_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_17SplitPairedReader_force_name_match(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_16force_name_match_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_7parsing_SplitPairedReader[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_6__reduce_cython__, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_17SplitPairedReader_5__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_8__setstate_cython__, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_17SplitPairedReader_7__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_7parsing_SplitPairedReader[] = {
  {(char *)"min_length", __pyx_getprop_5khmer_5_oxli_7parsing_17SplitPairedReader_min_length, 0, (char *)0, 0},
  {(char *)"force_name_match", __pyx_getprop_5khmer_5_oxli_7parsing_17SplitPairedReader_force_name_match, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.SplitPairedReader", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_SplitPairedReader, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing_SplitPairedReader, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_7parsing_SplitPairedReader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5khmer_5_oxli_7parsing_17SplitPairedReader_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_7parsing_SplitPairedReader, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_7parsing_SplitPairedReader, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing_SplitPairedReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_5khmer_5_oxli_7parsing_BrokenPairedReader __pyx_vtable_5khmer_5_oxli_7parsing_BrokenPairedReader;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing_BrokenPairedReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)o);
  p->__pyx_vtab = __pyx_vtabptr_5khmer_5_oxli_7parsing_BrokenPairedReader;
  p->parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)Py_None); Py_INCREF(Py_None);
  p->record = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing_BrokenPairedReader(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parser);
  Py_CLEAR(p->record);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing_BrokenPairedReader(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)o;
  if (p->parser) {
    e = (*v)(((PyObject *)p->parser), a); if (e) return e;
  }
  if (p->record) {
    e = (*v)(((PyObject *)p->record), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5khmer_5_oxli_7parsing_BrokenPairedReader(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *p = (struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *)o;
  tmp = ((PyObject*)p->parser);
  p->parser = ((struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->record);
  p->record = ((struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_min_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_10min_length_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_force_single(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_12force_single_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_require_paired(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_14require_paired_1__get__(o);
}

static PyObject *__pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_record(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_6record_1__get__(o);
}

static PyMethodDef __pyx_methods_5khmer_5_oxli_7parsing_BrokenPairedReader[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_6__reduce_cython__, METH_NOARGS, __pyx_doc_5khmer_5_oxli_7parsing_18BrokenPairedReader_5__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_8__setstate_cython__, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_18BrokenPairedReader_7__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5khmer_5_oxli_7parsing_BrokenPairedReader[] = {
  {(char *)"min_length", __pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_min_length, 0, (char *)0, 0},
  {(char *)"force_single", __pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_force_single, 0, (char *)0, 0},
  {(char *)"require_paired", __pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_require_paired, 0, (char *)0, 0},
  {(char *)"record", __pyx_getprop_5khmer_5_oxli_7parsing_18BrokenPairedReader_record, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.BrokenPairedReader", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing_BrokenPairedReader, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing_BrokenPairedReader, /*tp_traverse*/
  __pyx_tp_clear_5khmer_5_oxli_7parsing_BrokenPairedReader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5khmer_5_oxli_7parsing_18BrokenPairedReader_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_5_oxli_7parsing_BrokenPairedReader, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5khmer_5_oxli_7parsing_BrokenPairedReader, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing_BrokenPairedReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers[8];
static int __pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers[--__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_sequence);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers)))) {
    __pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers[__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers++] = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.__pyx_scope_struct__kmers", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__[8];
static int __pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__[--__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_seq);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__)))) {
    __pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__[__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__++] = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_seq) {
    e = (*v)(((PyObject *)p->__pyx_v_seq), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.__pyx_scope_struct_1___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__[--__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_seq);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__)))) {
    __pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__[__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_seq) {
    e = (*v)(((PyObject *)p->__pyx_v_seq), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.__pyx_scope_struct_2___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__[8];
static int __pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__[--__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_err);
  Py_CLEAR(p->__pyx_v_first);
  Py_CLEAR(p->__pyx_v_read_num);
  Py_CLEAR(p->__pyx_v_second);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__)))) {
    __pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__[__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__++] = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ *)o;
  if (p->__pyx_v_err) {
    e = (*v)(p->__pyx_v_err, a); if (e) return e;
  }
  if (p->__pyx_v_first) {
    e = (*v)(((PyObject *)p->__pyx_v_first), a); if (e) return e;
  }
  if (p->__pyx_v_read_num) {
    e = (*v)(p->__pyx_v_read_num, a); if (e) return e;
  }
  if (p->__pyx_v_second) {
    e = (*v)(((PyObject *)p->__pyx_v_second), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.__pyx_scope_struct_3___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__[8];
static int __pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ = 0;

static PyObject *__pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__)))) {
    o = (PyObject*)__pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__[--__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__(PyObject *o) {
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_err);
  Py_CLEAR(p->__pyx_v_first);
  Py_CLEAR(p->__pyx_v_second);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__)))) {
    __pyx_freelist_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__[__pyx_freecount_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__++] = ((struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ *)o;
  if (p->__pyx_v_err) {
    e = (*v)(p->__pyx_v_err, a); if (e) return e;
  }
  if (p->__pyx_v_first) {
    e = (*v)(((PyObject *)p->__pyx_v_first), a); if (e) return e;
  }
  if (p->__pyx_v_second) {
    e = (*v)(((PyObject *)p->__pyx_v_second), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "khmer._oxli.parsing.__pyx_scope_struct_4___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"_split_left_right", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_3_split_left_right, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_2_split_left_right},
  {"check_is_left", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_7check_is_left, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_6check_is_left},
  {"check_is_right", (PyCFunction)__pyx_pw_5khmer_5_oxli_7parsing_9check_is_right, METH_O, __pyx_doc_5khmer_5_oxli_7parsing_8check_is_right},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_parsing(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_parsing},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "parsing",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_0_1, __pyx_k_0_1, sizeof(__pyx_k_0_1), 0, 1, 0, 0},
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_kp_u_1_2, __pyx_k_1_2, sizeof(__pyx_k_1_2), 0, 1, 0, 0},
  {&__pyx_kp_u_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0, 0},
  {&__pyx_kp_u_2_2, __pyx_k_2_2, sizeof(__pyx_k_2_2), 0, 1, 0, 0},
  {&__pyx_n_s_Alphabets, __pyx_k_Alphabets, sizeof(__pyx_k_Alphabets), 0, 0, 1, 1},
  {&__pyx_n_s_BrokenPairedReader, __pyx_k_BrokenPairedReader, sizeof(__pyx_k_BrokenPairedReader), 0, 0, 1, 1},
  {&__pyx_n_s_BrokenPairedReader___iter, __pyx_k_BrokenPairedReader___iter, sizeof(__pyx_k_BrokenPairedReader___iter), 0, 0, 1, 1},
  {&__pyx_n_u_DNAN_SIMPLE, __pyx_k_DNAN_SIMPLE, sizeof(__pyx_k_DNAN_SIMPLE), 0, 1, 0, 1},
  {&__pyx_kp_u_Differing_lengths_of_left_and_ri, __pyx_k_Differing_lengths_of_left_and_ri, sizeof(__pyx_k_Differing_lengths_of_left_and_ri), 0, 1, 0, 0},
  {&__pyx_n_s_FastxParser, __pyx_k_FastxParser, sizeof(__pyx_k_FastxParser), 0, 0, 1, 1},
  {&__pyx_n_s_FastxParser___iter, __pyx_k_FastxParser___iter, sizeof(__pyx_k_FastxParser___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_u_No_alphabet_with_name_0, __pyx_k_No_alphabet_with_name_0, sizeof(__pyx_k_No_alphabet_with_name_0), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_u_Operator_not_available, __pyx_k_Operator_not_available, sizeof(__pyx_k_Operator_not_available), 0, 1, 0, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_ReadBundle, __pyx_k_ReadBundle, sizeof(__pyx_k_ReadBundle), 0, 0, 1, 1},
  {&__pyx_n_s_SanitizedFastxParser, __pyx_k_SanitizedFastxParser, sizeof(__pyx_k_SanitizedFastxParser), 0, 0, 1, 1},
  {&__pyx_n_s_SanitizedFastxParser___iter, __pyx_k_SanitizedFastxParser___iter, sizeof(__pyx_k_SanitizedFastxParser___iter), 0, 0, 1, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_n_s_Sequence_kmers, __pyx_k_Sequence_kmers, sizeof(__pyx_k_Sequence_kmers), 0, 0, 1, 1},
  {&__pyx_kp_u_Sequence_name_0_sequence_1, __pyx_k_Sequence_name_0_sequence_1, sizeof(__pyx_k_Sequence_name_0_sequence_1), 0, 1, 0, 0},
  {&__pyx_n_s_SplitPairedReader, __pyx_k_SplitPairedReader, sizeof(__pyx_k_SplitPairedReader), 0, 0, 1, 1},
  {&__pyx_n_s_SplitPairedReader___iter, __pyx_k_SplitPairedReader___iter, sizeof(__pyx_k_SplitPairedReader___iter), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Uneven_number_of_reads_when_requ, __pyx_k_Uneven_number_of_reads_when_requ, sizeof(__pyx_k_Uneven_number_of_reads_when_requ), 0, 1, 0, 0},
  {&__pyx_n_s_UnpairedReadsError, __pyx_k_UnpairedReadsError, sizeof(__pyx_k_UnpairedReadsError), 0, 0, 1, 1},
  {&__pyx_n_s_UnpairedReadsError___init, __pyx_k_UnpairedReadsError___init, sizeof(__pyx_k_UnpairedReadsError___init), 0, 0, 1, 1},
  {&__pyx_kp_u_Unpaired_reads_when_require_pair, __pyx_k_Unpaired_reads_when_require_pair, sizeof(__pyx_k_Unpaired_reads_when_require_pair), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_ValueError_with_refs_to_the_read, __pyx_k_ValueError_with_refs_to_the_read, sizeof(__pyx_k_ValueError_with_refs_to_the_read), 0, 0, 1, 0},
  {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
  {&__pyx_n_s_alphabet, __pyx_k_alphabet, sizeof(__pyx_k_alphabet), 0, 0, 1, 1},
  {&__pyx_n_u_annotations, __pyx_k_annotations, sizeof(__pyx_k_annotations), 0, 1, 0, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_attr, __pyx_k_attr, sizeof(__pyx_k_attr), 0, 0, 1, 1},
  {&__pyx_kp_u_both_records_must_be_same_type_F, __pyx_k_both_records_must_be_same_type_F, sizeof(__pyx_k_both_records_must_be_same_type_F), 0, 1, 0, 0},
  {&__pyx_n_s_check_is_pair, __pyx_k_check_is_pair, sizeof(__pyx_k_check_is_pair), 0, 0, 1, 1},
  {&__pyx_n_s_cleaned_seq, __pyx_k_cleaned_seq, sizeof(__pyx_k_cleaned_seq), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_convert_n, __pyx_k_convert_n, sizeof(__pyx_k_convert_n), 0, 0, 1, 1},
  {&__pyx_n_s_description, __pyx_k_description, sizeof(__pyx_k_description), 0, 0, 1, 1},
  {&__pyx_n_u_description, __pyx_k_description, sizeof(__pyx_k_description), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_s_force_name_match, __pyx_k_force_name_match, sizeof(__pyx_k_force_name_match), 0, 0, 1, 1},
  {&__pyx_n_s_force_single, __pyx_k_force_single, sizeof(__pyx_k_force_single), 0, 0, 1, 1},
  {&__pyx_kp_u_force_single_and_require_paired, __pyx_k_force_single_and_require_paired, sizeof(__pyx_k_force_single_and_require_paired), 0, 1, 0, 0},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_from_screed_record, __pyx_k_from_screed_record, sizeof(__pyx_k_from_screed_record), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_is_complete, __pyx_k_is_complete, sizeof(__pyx_k_is_complete), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_khmer__oxli_parsing, __pyx_k_khmer__oxli_parsing, sizeof(__pyx_k_khmer__oxli_parsing), 0, 0, 1, 1},
  {&__pyx_kp_s_khmer__oxli_parsing_pyx, __pyx_k_khmer__oxli_parsing_pyx, sizeof(__pyx_k_khmer__oxli_parsing_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_kmers, __pyx_k_kmers, sizeof(__pyx_k_kmers), 0, 0, 1, 1},
  {&__pyx_n_s_left_parser, __pyx_k_left_parser, sizeof(__pyx_k_left_parser), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min_length, __pyx_k_min_length, sizeof(__pyx_k_min_length), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_kp_u_no_read, __pyx_k_no_read, sizeof(__pyx_k_no_read), 0, 1, 0, 0},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_error, __pyx_k_print_error, sizeof(__pyx_k_print_error), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Alphabets, __pyx_k_pyx_unpickle_Alphabets, sizeof(__pyx_k_pyx_unpickle_Alphabets), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quality, __pyx_k_quality, sizeof(__pyx_k_quality), 0, 0, 1, 1},
  {&__pyx_n_u_quality, __pyx_k_quality, sizeof(__pyx_k_quality), 0, 1, 0, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r1, __pyx_k_r1, sizeof(__pyx_k_r1), 0, 0, 1, 1},
  {&__pyx_n_s_r1_name, __pyx_k_r1_name, sizeof(__pyx_k_r1_name), 0, 0, 1, 1},
  {&__pyx_n_s_r2, __pyx_k_r2, sizeof(__pyx_k_r2), 0, 0, 1, 1},
  {&__pyx_n_s_r2_name, __pyx_k_r2_name, sizeof(__pyx_k_r2_name), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read1, __pyx_k_read1, sizeof(__pyx_k_read1), 0, 0, 1, 1},
  {&__pyx_n_s_read2, __pyx_k_read2, sizeof(__pyx_k_read2), 0, 0, 1, 1},
  {&__pyx_n_s_record, __pyx_k_record, sizeof(__pyx_k_record), 0, 0, 1, 1},
  {&__pyx_kp_u_records_must_be_same_type_FASTA, __pyx_k_records_must_be_same_type_FASTA, sizeof(__pyx_k_records_must_be_same_type_FASTA), 0, 1, 0, 0},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_require_paired, __pyx_k_require_paired, sizeof(__pyx_k_require_paired), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_right_parser, __pyx_k_right_parser, sizeof(__pyx_k_right_parser), 0, 0, 1, 1},
  {&__pyx_n_s_second, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_seq, __pyx_k_seq, sizeof(__pyx_k_seq), 0, 0, 1, 1},
  {&__pyx_n_s_sequence, __pyx_k_sequence, sizeof(__pyx_k_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 147, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "khmer/_oxli/parsing.pyx":73
 *             return x.name == y.name and x.sequence == y.sequence
 *         else:
 *             raise NotImplementedError('Operator not available')             # <<<<<<<<<<<<<<
 * 
 *     def kmers(self, int K):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Operator_not_available); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "khmer/_oxli/parsing.pyx":117
 *             seq._obj.quality = _bstring(record.quality)
 * 
 *         for attr in ('annotations', 'description'):             # <<<<<<<<<<<<<<
 *             if hasattr(record, attr):
 *                 seq._obj.description = _bstring(getattr(record, attr))
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_u_annotations, __pyx_n_u_description); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "khmer/_oxli/parsing.pyx":290
 * 
 *         if first_complete:
 *             return 0, None, None, None             # <<<<<<<<<<<<<<
 * 
 *         if first is None or second is None:
 */
  __pyx_tuple__11 = PyTuple_Pack(4, __pyx_int_0, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "khmer/_oxli/parsing.pyx":313
 * 
 *         if force_single and require_paired:
 *             raise ValueError("force_single and require_paired cannot both be set!")             # <<<<<<<<<<<<<<
 * 
 *         self.parser = parser
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_force_single_and_require_paired); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "khmer/_oxli/parsing.pyx":384
 *             is_pair = _check_is_pair(first, second)
 *             if is_pair == -1:
 *                 err = ValueError("records must be same type (FASTA or FASTQ)")             # <<<<<<<<<<<<<<
 *                 return -1, None, None, err
 *             if is_pair and not self.force_single:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_records_must_be_same_type_FASTA); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "khmer/_oxli/parsing.pyx":487
 *     cdef int ret = _check_is_pair(first, second)
 *     if ret == -1:
 *         raise ValueError("both records must be same type (FASTA or FASTQ)")             # <<<<<<<<<<<<<<
 *     return ret == 1
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_both_records_must_be_same_type_F); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_tuple__21 = PyTuple_Pack(3, __pyx_int_222419149, __pyx_int_238750788, __pyx_int_228825662); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "khmer/_oxli/parsing.pyx":17
 * 
 *     @staticmethod
 *     def get(name):             # <<<<<<<<<<<<<<
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 *         if not alphabet:
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_alphabet); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_khmer__oxli_parsing_pyx, __pyx_n_s_get, 17, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 17, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":111
 * 
 *     @staticmethod
 *     def from_screed_record(record):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence(name=record.name,
 *                                      sequence=record.sequence)
 */
  __pyx_tuple__24 = PyTuple_Pack(3, __pyx_n_s_record, __pyx_n_s_seq, __pyx_n_s_attr); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_khmer__oxli_parsing_pyx, __pyx_n_s_from_screed_record, 111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 111, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":144
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_msg); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_khmer__oxli_parsing_pyx, __pyx_n_s_print_error, 144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 144, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":150
 * 
 * 
 * class UnpairedReadsError(ValueError):             # <<<<<<<<<<<<<<
 *     """ValueError with refs to the read pair in question."""
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_builtin_ValueError); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "khmer/_oxli/parsing.pyx":153
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */
  __pyx_tuple__29 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_msg, __pyx_n_s_r1, __pyx_n_s_r2, __pyx_n_s_r1_name, __pyx_n_s_r2_name); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_khmer__oxli_parsing_pyx, __pyx_n_s_init, 153, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 153, __pyx_L1_error)

  /* "khmer/_oxli/parsing.pyx":480
 * 
 * 
 * def check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *     if type(first) is not Sequence:
 *         first = Sequence.from_screed_record(first)
 */
  __pyx_tuple__31 = PyTuple_Pack(3, __pyx_n_s_first, __pyx_n_s_second, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_khmer__oxli_parsing_pyx, __pyx_n_s_check_is_pair, 480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 480, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Alphabets(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__33 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Alphabets, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("_split_left_right", (void (*)(void))__pyx_f_5khmer_5_oxli_7parsing__split_left_right, "PyObject *(PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cppstring_split_left_right", (void (*)(void))__pyx_f_5khmer_5_oxli_7parsing__cppstring_split_left_right, "PyObject *(std::string &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_check_is_pair", (void (*)(void))__pyx_f_5khmer_5_oxli_7parsing__check_is_pair, "int (struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *, struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("check_is_left", (void (*)(void))__pyx_f_5khmer_5_oxli_7parsing_check_is_left, "bool (PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("check_is_right", (void (*)(void))__pyx_f_5khmer_5_oxli_7parsing_check_is_right, "bool (PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("is_valid", (void (*)(void))__pyx_f_5khmer_5_oxli_7parsing_is_valid, "bool (char const , std::string &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sanitize_sequence", (void (*)(void))__pyx_f_5khmer_5_oxli_7parsing_sanitize_sequence, "bool (std::string &, std::string &, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5khmer_5_oxli_7parsing_Alphabets = &__pyx_vtable_5khmer_5_oxli_7parsing_Alphabets;
  __pyx_vtable_5khmer_5_oxli_7parsing_Alphabets._get = (std::string (*)(std::string))__pyx_f_5khmer_5_oxli_7parsing_9Alphabets__get;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing_Alphabets) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing_Alphabets.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing_Alphabets.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing_Alphabets.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing_Alphabets.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_7parsing_Alphabets.tp_dict, __pyx_vtabptr_5khmer_5_oxli_7parsing_Alphabets) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Alphabets, (PyObject *)&__pyx_type_5khmer_5_oxli_7parsing_Alphabets) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_7parsing_Alphabets) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_Alphabets = &__pyx_type_5khmer_5_oxli_7parsing_Alphabets;
  __pyx_vtabptr_5khmer_5_oxli_7parsing_Sequence = &__pyx_vtable_5khmer_5_oxli_7parsing_Sequence;
  __pyx_vtable_5khmer_5_oxli_7parsing_Sequence._wrap = (struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *(*)(oxli::read_parsers::Read))__pyx_f_5khmer_5_oxli_7parsing_8Sequence__wrap;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing_Sequence) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing_Sequence.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing_Sequence.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing_Sequence.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing_Sequence.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_7parsing_Sequence.tp_dict, __pyx_vtabptr_5khmer_5_oxli_7parsing_Sequence) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sequence, (PyObject *)&__pyx_type_5khmer_5_oxli_7parsing_Sequence) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_7parsing_Sequence) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_Sequence = &__pyx_type_5khmer_5_oxli_7parsing_Sequence;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing_ReadBundle) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing_ReadBundle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing_ReadBundle.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing_ReadBundle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing_ReadBundle.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ReadBundle, (PyObject *)&__pyx_type_5khmer_5_oxli_7parsing_ReadBundle) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_7parsing_ReadBundle) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_ReadBundle = &__pyx_type_5khmer_5_oxli_7parsing_ReadBundle;
  __pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser = &__pyx_vtable_5khmer_5_oxli_7parsing_FastxParser;
  __pyx_vtable_5khmer_5_oxli_7parsing_FastxParser.is_complete = (bool (*)(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *, int __pyx_skip_dispatch))__pyx_f_5khmer_5_oxli_7parsing_11FastxParser_is_complete;
  __pyx_vtable_5khmer_5_oxli_7parsing_FastxParser._next = (struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *(*)(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *))__pyx_f_5khmer_5_oxli_7parsing_11FastxParser__next;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing_FastxParser) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing_FastxParser.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing_FastxParser.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing_FastxParser.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing_FastxParser.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_7parsing_FastxParser.tp_dict, __pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FastxParser, (PyObject *)&__pyx_type_5khmer_5_oxli_7parsing_FastxParser) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_7parsing_FastxParser) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_FastxParser = &__pyx_type_5khmer_5_oxli_7parsing_FastxParser;
  __pyx_vtabptr_5khmer_5_oxli_7parsing_SanitizedFastxParser = &__pyx_vtable_5khmer_5_oxli_7parsing_SanitizedFastxParser;
  __pyx_vtable_5khmer_5_oxli_7parsing_SanitizedFastxParser.__pyx_base = *__pyx_vtabptr_5khmer_5_oxli_7parsing_FastxParser;
  __pyx_vtable_5khmer_5_oxli_7parsing_SanitizedFastxParser.__pyx_base._next = (struct __pyx_obj_5khmer_5_oxli_7parsing_Sequence *(*)(struct __pyx_obj_5khmer_5_oxli_7parsing_FastxParser *))__pyx_f_5khmer_5_oxli_7parsing_20SanitizedFastxParser__next;
  __pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser.tp_base = __pyx_ptype_5khmer_5_oxli_7parsing_FastxParser;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser.tp_dict, __pyx_vtabptr_5khmer_5_oxli_7parsing_SanitizedFastxParser) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SanitizedFastxParser, (PyObject *)&__pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_SanitizedFastxParser = &__pyx_type_5khmer_5_oxli_7parsing_SanitizedFastxParser;
  __pyx_vtabptr_5khmer_5_oxli_7parsing_SplitPairedReader = &__pyx_vtable_5khmer_5_oxli_7parsing_SplitPairedReader;
  __pyx_vtable_5khmer_5_oxli_7parsing_SplitPairedReader._next = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_7parsing_SplitPairedReader *))__pyx_f_5khmer_5_oxli_7parsing_17SplitPairedReader__next;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader.tp_dict, __pyx_vtabptr_5khmer_5_oxli_7parsing_SplitPairedReader) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SplitPairedReader, (PyObject *)&__pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_SplitPairedReader = &__pyx_type_5khmer_5_oxli_7parsing_SplitPairedReader;
  __pyx_vtabptr_5khmer_5_oxli_7parsing_BrokenPairedReader = &__pyx_vtable_5khmer_5_oxli_7parsing_BrokenPairedReader;
  __pyx_vtable_5khmer_5_oxli_7parsing_BrokenPairedReader._next = (PyObject *(*)(struct __pyx_obj_5khmer_5_oxli_7parsing_BrokenPairedReader *))__pyx_f_5khmer_5_oxli_7parsing_18BrokenPairedReader__next;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader.tp_dict, __pyx_vtabptr_5khmer_5_oxli_7parsing_BrokenPairedReader) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BrokenPairedReader, (PyObject *)&__pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  __pyx_ptype_5khmer_5_oxli_7parsing_BrokenPairedReader = &__pyx_type_5khmer_5_oxli_7parsing_BrokenPairedReader;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers = &__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct__kmers;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__ = &__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_1___iter__;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__ = &__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_2___iter__;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__) < 0) __PYX_ERR(0, 254, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__ = &__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_3___iter__;
  if (PyType_Ready(&__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__.tp_dictoffset && __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__ = &__pyx_type_5khmer_5_oxli_7parsing___pyx_scope_struct_4___iter__;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("khmer._oxli.utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "_bstring", (void (**)(void))&__pyx_f_5khmer_5_oxli_5utils__bstring, "PyObject *(PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_ustring", (void (**)(void))&__pyx_f_5khmer_5_oxli_5utils__ustring, "PyObject *(PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initparsing(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initparsing(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_parsing(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_parsing(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_parsing(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'parsing' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_parsing(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("parsing", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_khmer___oxli__parsing) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "khmer._oxli.parsing")) {
      if (unlikely(PyDict_SetItemString(modules, "khmer._oxli.parsing", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "khmer/_oxli/parsing.pyx":9
 * from libcpp.string cimport string
 * 
 * import sys             # <<<<<<<<<<<<<<
 * 
 * from khmer._oxli.utils cimport _bstring, _ustring
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":17
 * 
 *     @staticmethod
 *     def get(name):             # <<<<<<<<<<<<<<
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 *         if not alphabet:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_7parsing_9Alphabets_1get, NULL, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets->tp_dict, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets);

  /* "khmer/_oxli/parsing.pyx":16
 * cdef class Alphabets:
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get(name):
 *         cdef unicode alphabet = _ustring(Alphabets._get(_bstring(name)))
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets->tp_dict, __pyx_n_s_get, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_7parsing_Alphabets);

  /* "khmer/_oxli/parsing.pyx":111
 * 
 *     @staticmethod
 *     def from_screed_record(record):             # <<<<<<<<<<<<<<
 *         cdef Sequence seq = Sequence(name=record.name,
 *                                      sequence=record.sequence)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_7parsing_8Sequence_16from_screed_record, NULL, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence->tp_dict, __pyx_n_s_from_screed_record, __pyx_t_2) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_7parsing_Sequence);

  /* "khmer/_oxli/parsing.pyx":110
 *         return cleaned_seq if cleaned_seq else None
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_screed_record(record):
 *         cdef Sequence seq = Sequence(name=record.name,
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence, __pyx_n_s_from_screed_record); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5khmer_5_oxli_7parsing_Sequence->tp_dict, __pyx_n_s_from_screed_record, __pyx_t_1) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5khmer_5_oxli_7parsing_Sequence);

  /* "khmer/_oxli/parsing.pyx":144
 * 
 * 
 * def print_error(msg):             # <<<<<<<<<<<<<<
 *     """Print the given message to 'stderr'."""
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_7parsing_1print_error, NULL, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_print_error, __pyx_t_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":150
 * 
 * 
 * class UnpairedReadsError(ValueError):             # <<<<<<<<<<<<<<
 *     """ValueError with refs to the read pair in question."""
 * 
 */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__28); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_tuple__28, __pyx_n_s_UnpairedReadsError, __pyx_n_s_UnpairedReadsError, (PyObject *) NULL, __pyx_n_s_khmer__oxli_parsing, __pyx_kp_s_ValueError_with_refs_to_the_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "khmer/_oxli/parsing.pyx":153
 *     """ValueError with refs to the read pair in question."""
 * 
 *     def __init__(self, msg, r1, r2):             # <<<<<<<<<<<<<<
 *         r1_name = "<no read>"
 *         r2_name = "<no read>"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5khmer_5_oxli_7parsing_18UnpairedReadsError_1__init__, 0, __pyx_n_s_UnpairedReadsError___init, NULL, __pyx_n_s_khmer__oxli_parsing, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_3) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "khmer/_oxli/parsing.pyx":150
 * 
 * 
 * class UnpairedReadsError(ValueError):             # <<<<<<<<<<<<<<
 *     """ValueError with refs to the read pair in question."""
 * 
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_UnpairedReadsError, __pyx_tuple__28, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnpairedReadsError, __pyx_t_3) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":480
 * 
 * 
 * def check_is_pair(first, second):             # <<<<<<<<<<<<<<
 *     if type(first) is not Sequence:
 *         first = Sequence.from_screed_record(first)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_7parsing_5check_is_pair, NULL, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_is_pair, __pyx_t_1) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Alphabets(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_5_oxli_7parsing_11__pyx_unpickle_Alphabets, NULL, __pyx_n_s_khmer__oxli_parsing); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Alphabets, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "khmer/_oxli/parsing.pyx":1
 * # -*- coding: UTF-8 -*-             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init khmer._oxli.parsing", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init khmer._oxli.parsing");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyUnicode_Substring */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length;
    if (unlikely(__Pyx_PyUnicode_READY(text) == -1)) return NULL;
    length = __Pyx_PyUnicode_GET_LENGTH(text);
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    if (stop <= start)
        return __Pyx_NewRef(__pyx_empty_unicode);
#if CYTHON_PEP393_ENABLED
    return PyUnicode_FromKindAndData(PyUnicode_KIND(text),
        PyUnicode_1BYTE_DATA(text) + start*PyUnicode_KIND(text), stop-start);
#else
    return PyUnicode_FromUnicode(PyUnicode_AS_UNICODE(text)+start, stop-start);
#endif
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* unicode_tailmatch */
static int __Pyx_PyUnicode_TailmatchTuple(PyObject* s, PyObject* substrings,
                                          Py_ssize_t start, Py_ssize_t end, int direction) {
    Py_ssize_t i, count = PyTuple_GET_SIZE(substrings);
    for (i = 0; i < count; i++) {
        Py_ssize_t result;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        result = PyUnicode_Tailmatch(s, PyTuple_GET_ITEM(substrings, i),
                                     start, end, direction);
#else
        PyObject* sub = PySequence_ITEM(substrings, i);
        if (unlikely(!sub)) return -1;
        result = PyUnicode_Tailmatch(s, sub, start, end, direction);
        Py_DECREF(sub);
#endif
        if (result) {
            return (int) result;
        }
    }
    return 0;
}
static int __Pyx_PyUnicode_Tailmatch(PyObject* s, PyObject* substr,
                                     Py_ssize_t start, Py_ssize_t end, int direction) {
    if (unlikely(PyTuple_Check(substr))) {
        return __Pyx_PyUnicode_TailmatchTuple(s, substr, start, end, direction);
    }
    return (int) PyUnicode_Tailmatch(s, substr, start, end, direction);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
